// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteTaskV1Comment 该接口用于通过评论ID删除评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/delete
// new doc: https://open.feishu.cn/document/server-docs/task-v1/task-comment/delete
//
// Deprecated
func (r *TaskV1Service) DeleteTaskV1Comment(ctx context.Context, request *DeleteTaskV1CommentReq, options ...MethodOptionFunc) (*DeleteTaskV1CommentResp, *Response, error) {
	if r.cli.mock.mockTaskV1DeleteTaskV1Comment != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] TaskV1#DeleteTaskV1Comment mock enable")
		return r.cli.mock.mockTaskV1DeleteTaskV1Comment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "TaskV1",
		API:                   "DeleteTaskV1Comment",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteTaskV1CommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskV1DeleteTaskV1Comment mock TaskV1DeleteTaskV1Comment method
func (r *Mock) MockTaskV1DeleteTaskV1Comment(f func(ctx context.Context, request *DeleteTaskV1CommentReq, options ...MethodOptionFunc) (*DeleteTaskV1CommentResp, *Response, error)) {
	r.mockTaskV1DeleteTaskV1Comment = f
}

// UnMockTaskV1DeleteTaskV1Comment un-mock TaskV1DeleteTaskV1Comment method
func (r *Mock) UnMockTaskV1DeleteTaskV1Comment() {
	r.mockTaskV1DeleteTaskV1Comment = nil
}

// DeleteTaskV1CommentReq ...
type DeleteTaskV1CommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值: "83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论ID, 示例值: "6937231762296684564"
}

// DeleteTaskV1CommentResp ...
type DeleteTaskV1CommentResp struct {
}

// deleteTaskV1CommentResp ...
type deleteTaskV1CommentResp struct {
	Code  int64                    `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                   `json:"msg,omitempty"`  // 错误描述
	Data  *DeleteTaskV1CommentResp `json:"data,omitempty"`
	Error *ErrorDetail             `json:"error,omitempty"`
}
