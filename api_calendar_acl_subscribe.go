// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// SubscribeCalendarACL 调用该接口以用户身份订阅指定日历下的访问控制变更事件。
//
// 当前用户身份必须对日历有访问权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/subscription
// new doc: https://open.feishu.cn/document/server-docs/calendar-v4/calendar-acl/subscription
func (r *CalendarService) SubscribeCalendarACL(ctx context.Context, request *SubscribeCalendarACLReq, options ...MethodOptionFunc) (*SubscribeCalendarACLResp, *Response, error) {
	if r.cli.mock.mockCalendarSubscribeCalendarACL != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Calendar#SubscribeCalendarACL mock enable")
		return r.cli.mock.mockCalendarSubscribeCalendarACL(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "SubscribeCalendarACL",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/acls/subscription",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(subscribeCalendarACLResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarSubscribeCalendarACL mock CalendarSubscribeCalendarACL method
func (r *Mock) MockCalendarSubscribeCalendarACL(f func(ctx context.Context, request *SubscribeCalendarACLReq, options ...MethodOptionFunc) (*SubscribeCalendarACLResp, *Response, error)) {
	r.mockCalendarSubscribeCalendarACL = f
}

// UnMockCalendarSubscribeCalendarACL un-mock CalendarSubscribeCalendarACL method
func (r *Mock) UnMockCalendarSubscribeCalendarACL() {
	r.mockCalendarSubscribeCalendarACL = nil
}

// SubscribeCalendarACLReq ...
type SubscribeCalendarACLReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID, 创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID, [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary), [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list), [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search), 示例值: "feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// SubscribeCalendarACLResp ...
type SubscribeCalendarACLResp struct {
}

// subscribeCalendarACLResp ...
type subscribeCalendarACLResp struct {
	Code  int64                     `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                    `json:"msg,omitempty"`  // 错误描述
	Data  *SubscribeCalendarACLResp `json:"data,omitempty"`
	Error *ErrorDetail              `json:"error,omitempty"`
}
