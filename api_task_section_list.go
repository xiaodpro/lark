// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetTaskSectionList 获取一个资源下所有的自定义分组列表。支持分页。返回结果按照自定义分组在界面上的顺序排序。
//
// 获取自定义分组列表需要资源的读取权限。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/section/list
func (r *TaskService) GetTaskSectionList(ctx context.Context, request *GetTaskSectionListReq, options ...MethodOptionFunc) (*GetTaskSectionListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskSectionList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#GetTaskSectionList mock enable")
		return r.cli.mock.mockTaskGetTaskSectionList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskSectionList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/sections",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskSectionListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskSectionList mock TaskGetTaskSectionList method
func (r *Mock) MockTaskGetTaskSectionList(f func(ctx context.Context, request *GetTaskSectionListReq, options ...MethodOptionFunc) (*GetTaskSectionListResp, *Response, error)) {
	r.mockTaskGetTaskSectionList = f
}

// UnMockTaskGetTaskSectionList un-mock TaskGetTaskSectionList method
func (r *Mock) UnMockTaskGetTaskSectionList() {
	r.mockTaskGetTaskSectionList = nil
}

// GetTaskSectionListReq ...
type GetTaskSectionListReq struct {
	PageSize     *int64  `query:"page_size" json:"-"`     // 分页大小, 示例值: 50, 默认值: `50`, 取值范围: `1` ～ `100`
	PageToken    *string `query:"page_token" json:"-"`    // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: aWQ9NzEwMjMzMjMxMDE=, 最大长度: `100` 字符
	ResourceType string  `query:"resource_type" json:"-"` // 自定义分组所属的资源类型。支持my_tasks(我负责的）和tasklist（清单）。当使用tasklist时, 需要用resource_id提供清单的全局唯一ID, 示例值: tasklist, 最大长度: `100` 字符
	ResourceID   *string `query:"resource_id" json:"-"`   // 如`resource_type`为"tasklist", 这里需要填写要列取自定义分组的清单的GUID, 示例值: caef228f-2342-23c1-c36d-91186414dc64, 最大长度: `100` 字符
	UserIDType   *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值: open_id, 默认值: `open_id`
}

// GetTaskSectionListResp ...
type GetTaskSectionListResp struct {
	Items     []*GetTaskSectionListRespItem `json:"items,omitempty"`      // 自定义分组的摘要列表
	PageToken string                        `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskSectionListRespItem ...
type GetTaskSectionListRespItem struct {
	Guid      string `json:"guid,omitempty"`       // 自定义分组的全局唯一ID
	Name      string `json:"name,omitempty"`       // 自定义分组的名称
	IsDefault bool   `json:"is_default,omitempty"` // 是否是默认分组
}

// getTaskSectionListResp ...
type getTaskSectionListResp struct {
	Code  int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                  `json:"msg,omitempty"`  // 错误描述
	Data  *GetTaskSectionListResp `json:"data,omitempty"`
	Error *ErrorDetail            `json:"error,omitempty"`
}
