// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// BatchGetMeetingRoomBuildingID 该接口用于根据租户自定义建筑 ID 查询建筑 ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQzMxYjL0MTM24CNzEjN
func (r *MeetingRoomService) BatchGetMeetingRoomBuildingID(ctx context.Context, request *BatchGetMeetingRoomBuildingIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingIDResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuildingID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomBuildingID mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuildingID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomBuildingID",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomBuildingIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomBatchGetMeetingRoomBuildingID(f func(ctx context.Context, request *BatchGetMeetingRoomBuildingIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingIDResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomBuildingID = f
}

func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomBuildingID() {
	r.mockMeetingRoomBatchGetMeetingRoomBuildingID = nil
}

type BatchGetMeetingRoomBuildingIDReq struct {
	CustomBuildingIDs string `query:"custom_building_ids" json:"-"` // 用于查询指定建筑物的租户自定义建筑ID
}

type batchGetMeetingRoomBuildingIDResp struct {
	Code int64                              `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomBuildingIDResp `json:"data,omitempty"` // 返回业务信息
}

type BatchGetMeetingRoomBuildingIDResp struct {
	Buildings *BatchGetMeetingRoomBuildingIDRespBuilding `json:"buildings,omitempty"` // 建筑列表
}

type BatchGetMeetingRoomBuildingIDRespBuilding struct {
	BuildingID       string `json:"building_id,omitempty"`        // 建筑物ID
	CustomBuildingID string `json:"custom_building_id,omitempty"` // 租户自定义建筑物ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMeetingRoomBuilding 该接口对应管理后台的添加建筑，添加楼层的功能，可用于创建建筑物和建筑物的楼层信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNwYjLwUDM24CM1AjN
func (r *MeetingRoomService) CreateMeetingRoomBuilding(ctx context.Context, request *CreateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*CreateMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomCreateMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomCreateMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "CreateMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomCreateMeetingRoomBuilding(f func(ctx context.Context, request *CreateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*CreateMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomCreateMeetingRoomBuilding = f
}

func (r *Mock) UnMockMeetingRoomCreateMeetingRoomBuilding() {
	r.mockMeetingRoomCreateMeetingRoomBuilding = nil
}

type CreateMeetingRoomBuildingReq struct {
	Name             string   `json:"name,omitempty"`               // 建筑名称
	Floors           []string `json:"floors,omitempty"`             // 楼层列表
	CountryID        string   `json:"country_id,omitempty"`         // 国家/地区ID
	DistrictID       string   `json:"district_id,omitempty"`        // 城市ID
	CustomBuildingID *string  `json:"custom_building_id,omitempty"` // 租户自定义建筑ID
}

type createMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *CreateMeetingRoomBuildingResp `json:"data,omitempty"` // 返回业务信息
}

type CreateMeetingRoomBuildingResp struct {
	BuildingID string `json:"building_id,omitempty"` // 成功创建的建筑ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMeetingRoomBuilding 该接口用于删除建筑物（办公大楼）。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzMxYjLzMTM24yMzEjN
func (r *MeetingRoomService) DeleteMeetingRoomBuilding(ctx context.Context, request *DeleteMeetingRoomBuildingReq, options ...MethodOptionFunc) (*DeleteMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomDeleteMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#DeleteMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomDeleteMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "DeleteMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomDeleteMeetingRoomBuilding(f func(ctx context.Context, request *DeleteMeetingRoomBuildingReq, options ...MethodOptionFunc) (*DeleteMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomDeleteMeetingRoomBuilding = f
}

func (r *Mock) UnMockMeetingRoomDeleteMeetingRoomBuilding() {
	r.mockMeetingRoomDeleteMeetingRoomBuilding = nil
}

type DeleteMeetingRoomBuildingReq struct {
	BuildingID string `json:"building_id,omitempty"` // 要删除的建筑ID
}

type deleteMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *DeleteMeetingRoomBuildingResp `json:"data,omitempty"`
}

type DeleteMeetingRoomBuildingResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomBuildingList 该接口用于获取本企业下的建筑物（办公大楼）。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugzNyUjL4cjM14CO3ITN
func (r *MeetingRoomService) GetMeetingRoomBuildingList(ctx context.Context, request *GetMeetingRoomBuildingListReq, options ...MethodOptionFunc) (*GetMeetingRoomBuildingListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomBuildingList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomBuildingList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomBuildingList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomBuildingList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomBuildingListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomGetMeetingRoomBuildingList(f func(ctx context.Context, request *GetMeetingRoomBuildingListReq, options ...MethodOptionFunc) (*GetMeetingRoomBuildingListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomBuildingList = f
}

func (r *Mock) UnMockMeetingRoomGetMeetingRoomBuildingList() {
	r.mockMeetingRoomGetMeetingRoomBuildingList = nil
}

type GetMeetingRoomBuildingListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 请求期望返回的建筑物数量，不足则返回全部，该值默认为 10，最大为 100
	PageToken *string `query:"page_token" json:"-"` // 用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素
	OrderBy   *string `query:"order_by" json:"-"`   // 提供用于对名称进行升序/降序排序的方式查询，可选项有："name-asc,name-desc"，传入其他字符串不做处理，默认无序
	Fields    *string `query:"fields" json:"-"`     // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,floors"，默认返回所有字段
}

type getMeetingRoomBuildingListResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomBuildingListResp `json:"data,omitempty"` // 返回业务信息
}

type GetMeetingRoomBuildingListResp struct {
	PageToken string                                   `json:"page_token,omitempty"` // 分页标记，存在下一页时返回
	HasMore   bool                                     `json:"has_more,omitempty"`   // 存在下一页时，该值为 true，否则为 false
	Buildings *GetMeetingRoomBuildingListRespBuildings `json:"buildings,omitempty"`  // 建筑列表
}

type GetMeetingRoomBuildingListRespBuildings struct {
	BuildingID  string   `json:"building_id,omitempty"` // 建筑物 ID
	Description string   `json:"description,omitempty"` // 建筑物的相关描述
	Floors      []string `json:"floors,omitempty"`      // 属于当前建筑物的所有楼层列表
	Name        string   `json:"name,omitempty"`        // 建筑物名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMeetingRoomBuilding 该接口用于编辑建筑信息，添加楼层，删除楼层，编辑楼层信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uETNwYjLxUDM24SM1AjN
func (r *MeetingRoomService) UpdateMeetingRoomBuilding(ctx context.Context, request *UpdateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*UpdateMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomUpdateMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#UpdateMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomUpdateMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "UpdateMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomUpdateMeetingRoomBuilding(f func(ctx context.Context, request *UpdateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*UpdateMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomUpdateMeetingRoomBuilding = f
}

func (r *Mock) UnMockMeetingRoomUpdateMeetingRoomBuilding() {
	r.mockMeetingRoomUpdateMeetingRoomBuilding = nil
}

type UpdateMeetingRoomBuildingReq struct {
	BuildingID       string   `json:"building_id,omitempty"`        // 要更新的建筑ID
	Name             *string  `json:"name,omitempty"`               // 建筑名称
	Floors           []string `json:"floors,omitempty"`             // 楼层列表
	CountryID        *string  `json:"country_id,omitempty"`         // 国家/地区ID
	DistrictID       *string  `json:"district_id,omitempty"`        // 城市ID
	CustomBuildingID *string  `json:"custom_building_id,omitempty"` // 租户自定义建筑ID
}

type updateMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *UpdateMeetingRoomBuildingResp `json:"data,omitempty"`
}

type UpdateMeetingRoomBuildingResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomCountryList 新建建筑时需要标明所处国家/地区，该接口用于获得系统预先提供的可供选择的国家 /地区列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTNwYjL0UDM24CN1AjN
func (r *MeetingRoomService) GetMeetingRoomCountryList(ctx context.Context, request *GetMeetingRoomCountryListReq, options ...MethodOptionFunc) (*GetMeetingRoomCountryListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomCountryList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomCountryList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomCountryList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomCountryList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/country/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomCountryListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomGetMeetingRoomCountryList(f func(ctx context.Context, request *GetMeetingRoomCountryListReq, options ...MethodOptionFunc) (*GetMeetingRoomCountryListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomCountryList = f
}

func (r *Mock) UnMockMeetingRoomGetMeetingRoomCountryList() {
	r.mockMeetingRoomGetMeetingRoomCountryList = nil
}

type GetMeetingRoomCountryListReq struct{}

type getMeetingRoomCountryListResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomCountryListResp `json:"data,omitempty"` // 返回业务信息
}

type GetMeetingRoomCountryListResp struct {
	Countries *GetMeetingRoomCountryListRespCountries `json:"countries,omitempty"` // 国家地区列表
}

type GetMeetingRoomCountryListRespCountries struct {
	CountryID string `json:"country_id,omitempty"` // 国家地区ID
	Name      string `json:"name,omitempty"`       // 国家地区名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomDistrictList 新建建筑时需要选择所处国家/地区，该接口用于获得系统预先提供的可供选择的城市列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTNwYjL1UDM24SN1AjN
func (r *MeetingRoomService) GetMeetingRoomDistrictList(ctx context.Context, request *GetMeetingRoomDistrictListReq, options ...MethodOptionFunc) (*GetMeetingRoomDistrictListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomDistrictList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomDistrictList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomDistrictList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomDistrictList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/district/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomDistrictListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomGetMeetingRoomDistrictList(f func(ctx context.Context, request *GetMeetingRoomDistrictListReq, options ...MethodOptionFunc) (*GetMeetingRoomDistrictListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomDistrictList = f
}

func (r *Mock) UnMockMeetingRoomGetMeetingRoomDistrictList() {
	r.mockMeetingRoomGetMeetingRoomDistrictList = nil
}

type GetMeetingRoomDistrictListReq struct {
	CountryID int64 `query:"country_id" json:"-"` // 国家地区ID
}

type getMeetingRoomDistrictListResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomDistrictListResp `json:"data,omitempty"` // 返回业务信息
}

type GetMeetingRoomDistrictListResp struct {
	Districts *GetMeetingRoomDistrictListRespDistricts `json:"districts,omitempty"` // 城市列表
}

type GetMeetingRoomDistrictListRespDistricts struct {
	DistrictID string `json:"district_id,omitempty"` // 城市ID
	Name       string `json:"name,omitempty"`        // 城市名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomFreebusy 该接口用于获取指定会议室的忙闲日程实例列表。非重复日程只有唯一实例；重复日程可能存在多个实例，依据重复规则和时间范围扩展。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIDOyUjLygjM14iM4ITN
func (r *MeetingRoomService) BatchGetMeetingRoomFreebusy(ctx context.Context, request *BatchGetMeetingRoomFreebusyReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomFreebusyResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomFreebusy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomFreebusy mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomFreebusy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomFreebusy",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/freebusy/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomFreebusyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomBatchGetMeetingRoomFreebusy(f func(ctx context.Context, request *BatchGetMeetingRoomFreebusyReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomFreebusyResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomFreebusy = f
}

func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomFreebusy() {
	r.mockMeetingRoomBatchGetMeetingRoomFreebusy = nil
}

type BatchGetMeetingRoomFreebusyReq struct {
	RoomIDs []string `query:"room_ids" json:"-"` // 用于查询指定会议室的 ID
	TimeMin string   `query:"time_min" json:"-"` // 查询会议室忙闲的起始时间，需要遵循格式 [RFC3339](https://tools.ietf.org/html/rfc3339)，需要进行URL Encode
	TimeMax string   `query:"time_max" json:"-"` // 查询会议室忙闲的结束时间，需要遵循格式 [RFC3339](https://tools.ietf.org/html/rfc3339)，需要进行URL Encode
}

type batchGetMeetingRoomFreebusyResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomFreebusyResp `json:"data,omitempty"` // 返回业务信息
}

type BatchGetMeetingRoomFreebusyResp struct {
	TimeMin  string                                   `json:"time_min,omitempty"`  // 查询会议室忙闲的起始时间，与请求参数完全相同
	TimeMax  string                                   `json:"time_max,omitempty"`  // 查询会议室忙闲的结束时间，与请求参数完全相同
	FreeBusy *BatchGetMeetingRoomFreebusyRespFreeBusy `json:"free_busy,omitempty"` // 会议室忙闲列表
}

type BatchGetMeetingRoomFreebusyRespFreeBusy struct {
	RoomID *BatchGetMeetingRoomFreebusyRespFreeBusyRoomID `json:"room_id,omitempty"` // 与请求合法参数相同，表示之后是对应会议室的忙闲状态
}

type BatchGetMeetingRoomFreebusyRespFreeBusyRoomID struct {
	StartTime     string                                                      `json:"start_time,omitempty"`     // 忙碌起始时间
	EndTime       string                                                      `json:"end_time,omitempty"`       // 忙碌结束时间
	Uid           string                                                      `json:"uid,omitempty"`            // 日程 ID
	OriginalTime  int64                                                       `json:"original_time,omitempty"`  // 日程实例的原始时间, 非重复日程为0，重复日程为非0
	OrganizerInfo *BatchGetMeetingRoomFreebusyRespFreeBusyRoomIDOrganizerInfo `json:"organizer_info,omitempty"` // 组织者信息, 私密日程不返回该信息
}

type BatchGetMeetingRoomFreebusyRespFreeBusyRoomIDOrganizerInfo struct {
	Name   string `json:"name,omitempty"`    // 组织者姓名
	OpenID string `json:"open_id,omitempty"` // 组织者 open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ReplyMeetingRoomInstance 该接口用于回复会议室日程实例，包括未签到释放和提前结束释放。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYzN4UjL2cDO14iN3gTN
func (r *MeetingRoomService) ReplyMeetingRoomInstance(ctx context.Context, request *ReplyMeetingRoomInstanceReq, options ...MethodOptionFunc) (*ReplyMeetingRoomInstanceResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomReplyMeetingRoomInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#ReplyMeetingRoomInstance mock enable")
		return r.cli.mock.mockMeetingRoomReplyMeetingRoomInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "ReplyMeetingRoomInstance",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/instance/reply",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(replyMeetingRoomInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomReplyMeetingRoomInstance(f func(ctx context.Context, request *ReplyMeetingRoomInstanceReq, options ...MethodOptionFunc) (*ReplyMeetingRoomInstanceResp, *Response, error)) {
	r.mockMeetingRoomReplyMeetingRoomInstance = f
}

func (r *Mock) UnMockMeetingRoomReplyMeetingRoomInstance() {
	r.mockMeetingRoomReplyMeetingRoomInstance = nil
}

type ReplyMeetingRoomInstanceReq struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室的 ID
	Uid          string `json:"uid,omitempty"`           // 会议室的日程 ID
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。重复日程若为0则表示回复其所有实例，否则表示回复单个实例。
	Status       string `json:"status,omitempty"`        // 回复状态，NOT_CHECK_IN 表示未签到，ENDED_BEFORE_DUE 表示提前结束
}

type replyMeetingRoomInstanceResp struct {
	Code int64                         `json:"code,omitempty"` // 返回码，非 0 表示失败。105003表示 original_time 非法，此时可能是重复日程的整个开始时间被修改，建议应用重新查询会议室日程实例列表，获取最新的 original_time。
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *ReplyMeetingRoomInstanceResp `json:"data,omitempty"`
}

type ReplyMeetingRoomInstanceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomRoom 该接口用于获取指定会议室的详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEDOyUjLxgjM14SM4ITN
func (r *MeetingRoomService) BatchGetMeetingRoomRoom(ctx context.Context, request *BatchGetMeetingRoomRoomReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomRoom",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomBatchGetMeetingRoomRoom(f func(ctx context.Context, request *BatchGetMeetingRoomRoomReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomRoom = f
}

func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomRoom() {
	r.mockMeetingRoomBatchGetMeetingRoomRoom = nil
}

type BatchGetMeetingRoomRoomReq struct {
	RoomIDs []string `query:"room_ids" json:"-"` // 用于查询指定会议室的 ID
	Fields  *string  `query:"fields" json:"-"`   // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,capacity,building_id,building_name,floor_name,is_disabled,display_id"，默认返回所有字段
}

type batchGetMeetingRoomRoomResp struct {
	Code int64                        `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomRoomResp `json:"data,omitempty"` // 返回业务信息
}

type BatchGetMeetingRoomRoomResp struct {
	Rooms *BatchGetMeetingRoomRoomRespRoom `json:"rooms,omitempty"` // 会议室列表
}

type BatchGetMeetingRoomRoomRespRoom struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室 ID
	BuildingID   string `json:"building_id,omitempty"`   // 会议室所属建筑物 ID
	BuildingName string `json:"building_name,omitempty"` // 会议室所属建筑物名称
	Capacity     int64  `json:"capacity,omitempty"`      // 会议室能容纳的人数
	Description  string `json:"description,omitempty"`   // 会议室的相关描述
	DisplayID    string `json:"display_id,omitempty"`    // 会议室的展示 ID
	FloorName    string `json:"floor_name,omitempty"`    // 会议室所在楼层名称
	IsDisabled   bool   `json:"is_disabled,omitempty"`   // 会议室是否不可用，若会议室不可用，则该值为 true，否则为 false
	Name         string `json:"name,omitempty"`          // 会议室名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomRoomID 该接口用于根据租户自定义会议室ID查询会议室ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYzMxYjL2MTM24iNzEjN
func (r *MeetingRoomService) BatchGetMeetingRoomRoomID(ctx context.Context, request *BatchGetMeetingRoomRoomIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomIDResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoomID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomRoomID mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoomID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomRoomID",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomRoomIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomBatchGetMeetingRoomRoomID(f func(ctx context.Context, request *BatchGetMeetingRoomRoomIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomIDResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomRoomID = f
}

func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomRoomID() {
	r.mockMeetingRoomBatchGetMeetingRoomRoomID = nil
}

type BatchGetMeetingRoomRoomIDReq struct {
	CustomRoomIDs string `query:"custom_room_ids" json:"-"` // 用于查询指定会议室的租户自定义会议室ID
}

type batchGetMeetingRoomRoomIDResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomRoomIDResp `json:"data,omitempty"` // 返回业务信息
}

type BatchGetMeetingRoomRoomIDResp struct {
	Rooms *BatchGetMeetingRoomRoomIDRespRoom `json:"rooms,omitempty"` // 会议室列表
}

type BatchGetMeetingRoomRoomIDRespRoom struct {
	RoomID       string `json:"room_id,omitempty"`        // 会议室 ID
	CustomRoomID string `json:"custom_room_id,omitempty"` // 租户自定义会议室 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMeetingRoomRoom 该接口用于创建会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITNwYjLyUDM24iM1AjN
func (r *MeetingRoomService) CreateMeetingRoomRoom(ctx context.Context, request *CreateMeetingRoomRoomReq, options ...MethodOptionFunc) (*CreateMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomCreateMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomCreateMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "CreateMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomCreateMeetingRoomRoom(f func(ctx context.Context, request *CreateMeetingRoomRoomReq, options ...MethodOptionFunc) (*CreateMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomCreateMeetingRoomRoom = f
}

func (r *Mock) UnMockMeetingRoomCreateMeetingRoomRoom() {
	r.mockMeetingRoomCreateMeetingRoomRoom = nil
}

type CreateMeetingRoomRoomReq struct {
	BuildingID   string  `json:"building_id,omitempty"`    // 会议室所在的建筑ID
	Floor        string  `json:"floor,omitempty"`          // 会议室所在的建筑楼层
	Name         string  `json:"name,omitempty"`           // 会议室名称
	Capacity     int64   `json:"capacity,omitempty"`       // 容量
	IsDisabled   bool    `json:"is_disabled,omitempty"`    // 是否禁用
	CustomRoomID *string `json:"custom_room_id,omitempty"` // 租户自定义会议室ID
}

type createMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *CreateMeetingRoomRoomResp `json:"data,omitempty"` // 返回业务信息
}

type CreateMeetingRoomRoomResp struct {
	RoomID string `json:"room_id,omitempty"` // 成功创建的会议室ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMeetingRoomRoom 该接口用于删除会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUzMxYjL1MTM24SNzEjN
func (r *MeetingRoomService) DeleteMeetingRoomRoom(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#DeleteMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "DeleteMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomDeleteMeetingRoomRoom(f func(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomDeleteMeetingRoomRoom = f
}

func (r *Mock) UnMockMeetingRoomDeleteMeetingRoomRoom() {
	r.mockMeetingRoomDeleteMeetingRoomRoom = nil
}

type DeleteMeetingRoomRoomReq struct {
	RoomID string `json:"room_id,omitempty"` // 要删除的会议室ID
}

type deleteMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *DeleteMeetingRoomRoomResp `json:"data,omitempty"`
}

type DeleteMeetingRoomRoomResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomRoomList 该接口用于获取指定建筑下的会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADOyUjLwgjM14CM4ITN
func (r *MeetingRoomService) GetMeetingRoomRoomList(ctx context.Context, request *GetMeetingRoomRoomListReq, options ...MethodOptionFunc) (*GetMeetingRoomRoomListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomRoomList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomRoomList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomRoomList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomRoomList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomRoomListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomGetMeetingRoomRoomList(f func(ctx context.Context, request *GetMeetingRoomRoomListReq, options ...MethodOptionFunc) (*GetMeetingRoomRoomListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomRoomList = f
}

func (r *Mock) UnMockMeetingRoomGetMeetingRoomRoomList() {
	r.mockMeetingRoomGetMeetingRoomRoomList = nil
}

type GetMeetingRoomRoomListReq struct {
	BuildingID string  `query:"building_id" json:"-"` // 被查询的建筑物 ID
	PageSize   *int64  `query:"page_size" json:"-"`   // 请求期望返回的会议室数量，不足则返回全部，该值默认为 100，最大为 1000
	PageToken  *string `query:"page_token" json:"-"`  // 用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素
	OrderBy    *string `query:"order_by" json:"-"`    // 提供用于对名称/楼层进行升序/降序排序的方式查询，可选项有："name-asc,name-desc,floor_name-asc,floor_name-desc"，传入其他字符串不做处理，默认无序
	Fields     *string `query:"fields" json:"-"`      // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,capacity,building_id,building_name,floor_name,is_disabled,display_id"，默认返回所有字段
}

type getMeetingRoomRoomListResp struct {
	Code int64                       `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomRoomListResp `json:"data,omitempty"` // 返回业务信息
}

type GetMeetingRoomRoomListResp struct {
	PageToken string                           `json:"page_token,omitempty"` // 分页标记，存在下一页时返回
	HasMore   bool                             `json:"has_more,omitempty"`   // 存在下一页时，该值为 true，否则为 false
	Rooms     *GetMeetingRoomRoomListRespRooms `json:"rooms,omitempty"`      // 会议室列表
}

type GetMeetingRoomRoomListRespRooms struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室 ID
	BuildingID   string `json:"building_id,omitempty"`   // 会议室所属建筑物 ID
	BuildingName string `json:"building_name,omitempty"` // 会议室所属建筑物名称
	Capacity     int64  `json:"capacity,omitempty"`      // 会议室能容纳的人数
	Description  string `json:"description,omitempty"`   // 会议室的相关描述
	DisplayID    string `json:"display_id,omitempty"`    // 会议室的展示 ID
	FloorName    string `json:"floor_name,omitempty"`    // 会议室所在楼层名称
	IsDisabled   bool   `json:"is_disabled,omitempty"`   // 会议室是否不可用，若会议室不可用，则该值为 true，否则为 false
	Name         string `json:"name,omitempty"`          // 会议室名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMeetingRoomRoom 该接口用于更新会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTNwYjLzUDM24yM1AjN
func (r *MeetingRoomService) UpdateMeetingRoomRoom(ctx context.Context, request *UpdateMeetingRoomRoomReq, options ...MethodOptionFunc) (*UpdateMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomUpdateMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#UpdateMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomUpdateMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "UpdateMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomUpdateMeetingRoomRoom(f func(ctx context.Context, request *UpdateMeetingRoomRoomReq, options ...MethodOptionFunc) (*UpdateMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomUpdateMeetingRoomRoom = f
}

func (r *Mock) UnMockMeetingRoomUpdateMeetingRoomRoom() {
	r.mockMeetingRoomUpdateMeetingRoomRoom = nil
}

type UpdateMeetingRoomRoomReq struct {
	RoomID       string  `json:"room_id,omitempty"`        // 要更新的会议室ID
	Name         *string `json:"name,omitempty"`           // 会议室名称
	Capacity     *int64  `json:"capacity,omitempty"`       // 容量
	CustomRoomID *string `json:"custom_room_id,omitempty"` // 租户自定义会议室ID
}

type updateMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *UpdateMeetingRoomRoomResp `json:"data,omitempty"`
}

type UpdateMeetingRoomRoomResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomSummary 通过日程的Uid和Original time，查询会议室日程主题。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjM5UjLyITO14iMykTN/
func (r *MeetingRoomService) BatchGetMeetingRoomSummary(ctx context.Context, request *BatchGetMeetingRoomSummaryReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomSummaryResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomSummary != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomSummary mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomSummary(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomSummary",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/summary/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomSummaryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMeetingRoomBatchGetMeetingRoomSummary(f func(ctx context.Context, request *BatchGetMeetingRoomSummaryReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomSummaryResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomSummary = f
}

func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomSummary() {
	r.mockMeetingRoomBatchGetMeetingRoomSummary = nil
}

type BatchGetMeetingRoomSummaryReq struct {
	EventUids *BatchGetMeetingRoomSummaryReqEventUid `json:"EventUids,omitempty"` // 需要查询的日程Uid和Original time
}

type BatchGetMeetingRoomSummaryReqEventUid struct {
	Uid          string `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。若为0则表示回复其重复日程的名字（不包含重复日程中的单个例外），否则表示回复单个实例。
}

type batchGetMeetingRoomSummaryResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomSummaryResp `json:"data,omitempty"` // 返回业务信息
}

type BatchGetMeetingRoomSummaryResp struct {
	EventInfos     *BatchGetMeetingRoomSummaryRespEventInfo     `json:"EventInfos,omitempty"`     // 成功查询到的日程信息
	ErrorEventUids *BatchGetMeetingRoomSummaryRespErrorEventUid `json:"ErrorEventUids,omitempty"` // 没有查询到的日程
}

type BatchGetMeetingRoomSummaryRespEventInfo struct {
	Uid          string `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。重复日程若为0则表示回复其所有实例，否则表示回复单个实例。
	Summary      string `json:"summary,omitempty"`       // 日程主题
}

type BatchGetMeetingRoomSummaryRespErrorEventUid struct {
	Uid          string `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。若为0则表示回复其重复日程的名字（不包含重复日程中的单个例外），否则表示回复单个实例。
	ErrorMsg     string `json:"error_msg,omitempty"`     // 错误信息
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMessage 机器人撤回机器人自己发送的消息或群主撤回群内消息。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)  ，撤回消息时机器人仍需要在会话内
// - 机器人可以撤回单聊和群组内，自己发送 且 发送时间不超过1天(24小时)的消息
// - 若机器人要撤回群内他人发送的消息，则机器人必须是该群的群主 或者 得到群主的授权，且消息发送时间不超过1天（24小时）
// - 无法撤回通过「批量发送消息接口」发送的消息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete
func (r *MessageService) DeleteMessage(ctx context.Context, request *DeleteMessageReq, options ...MethodOptionFunc) (*DeleteMessageResp, *Response, error) {
	if r.cli.mock.mockMessageDeleteMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#DeleteMessage mock enable")
		return r.cli.mock.mockMessageDeleteMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "DeleteMessage",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockMessageDeleteMessage(f func(ctx context.Context, request *DeleteMessageReq, options ...MethodOptionFunc) (*DeleteMessageResp, *Response, error)) {
	r.mockMessageDeleteMessage = f
}

func (r *Mock) UnMockMessageDeleteMessage() {
	r.mockMessageDeleteMessage = nil
}

type DeleteMessageReq struct {
	MessageID string `path:"message_id" json:"-"` // 待撤回的消息的ID, 示例值："om_dc13264520392913993dd051dba21dcf"
}

type deleteMessageResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMessageResp `json:"data,omitempty"`
}

type DeleteMessageResp struct{}
