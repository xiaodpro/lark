// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
	"io"
)

// GetHireApplication 根据投递 ID 获取单个投递信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get
func (r *HireService) GetHireApplication(ctx context.Context, request *GetHireApplicationReq, options ...MethodOptionFunc) (*GetHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplication mock enable")
		return r.cli.mock.mockHireGetHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireApplication(f func(ctx context.Context, request *GetHireApplicationReq, options ...MethodOptionFunc) (*GetHireApplicationResp, *Response, error)) {
	r.mockHireGetHireApplication = f
}

func (r *Mock) UnMockHireGetHireApplication() {
	r.mockHireGetHireApplication = nil
}

type GetHireApplicationReq struct {
	ApplicationID string `path:"application_id" json:"-"` // 投递ID, 示例值："212121"
}

type getHireApplicationResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationResp `json:"data,omitempty"`
}

type GetHireApplicationResp struct {
	Application *GetHireApplicationRespApplication `json:"application,omitempty"` // 投递数据
}

type GetHireApplicationRespApplication struct {
	ID               string                                  `json:"id,omitempty"`                 // 投递id
	JobID            string                                  `json:"job_id,omitempty"`             // 投递的职位id
	TalentID         string                                  `json:"talent_id,omitempty"`          // 候选人id
	ResumeResourceID string                                  `json:"resume_resource_id,omitempty"` // 简历来源id
	Stage            *GetHireApplicationRespApplicationStage `json:"stage,omitempty"`              // 投递处于的阶段
	ActiveStatus     int64                                   `json:"active_status,omitempty"`      // 活跃状态, 可选值有: `1`：活跃, `2`：非活跃, `3`：全部
}

type GetHireApplicationRespApplicationStage struct {
	ID     string `json:"id,omitempty"`      // 阶段id
	ZhName string `json:"zh_name,omitempty"` // 阶段中文名字
	EnName string `json:"en_name,omitempty"` // 英文名
	Type   int64  `json:"type,omitempty"`    // 阶段类型, 可选值有: `1`：筛选型, `2`：评估型, `3`：笔试型, `4`：面试型, `5`：Offer型, `6`：待入职, `7`：已入职, `8`：其它类型, `255`：系统默认
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireApplicationInterviewList 根据投递 ID 获取面试记录列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application-interview/list
//
// Deprecated
func (r *HireService) GetHireApplicationInterviewList(ctx context.Context, request *GetHireApplicationInterviewListReq, options ...MethodOptionFunc) (*GetHireApplicationInterviewListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplicationInterviewList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplicationInterviewList mock enable")
		return r.cli.mock.mockHireGetHireApplicationInterviewList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplicationInterviewList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/interviews",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationInterviewListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireApplicationInterviewList(f func(ctx context.Context, request *GetHireApplicationInterviewListReq, options ...MethodOptionFunc) (*GetHireApplicationInterviewListResp, *Response, error)) {
	r.mockHireGetHireApplicationInterviewList = f
}

func (r *Mock) UnMockHireGetHireApplicationInterviewList() {
	r.mockHireGetHireApplicationInterviewList = nil
}

type GetHireApplicationInterviewListReq struct {
	PageSize      int64   `query:"page_size" json:"-"`     // 分页大小, 示例值：10
	PageToken     *string `query:"page_token" json:"-"`    // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xx"
	UserIDType    *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ApplicationID string  `path:"application_id" json:"-"` // 投递ID, 示例值："6949805467799537964"
}

type getHireApplicationInterviewListResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationInterviewListResp `json:"data,omitempty"`
}

type GetHireApplicationInterviewListResp struct {
	PageToken string                                     `json:"page_token,omitempty"` // 分页标志
	HasMore   bool                                       `json:"has_more,omitempty"`   // 是否有更多
	Items     []*GetHireApplicationInterviewListRespItem `json:"items,omitempty"`      // 面试列表
}

type GetHireApplicationInterviewListRespItem struct {
	ID                  string                                                    `json:"id,omitempty"`                    // 面试id
	BeginTime           int64                                                     `json:"begin_time,omitempty"`            // 面试开始时间（ms）
	EndTime             int64                                                     `json:"end_time,omitempty"`              // 面试结束时间（ms）
	Round               int64                                                     `json:"round,omitempty"`                 // 面试轮次（从0开始计数）
	StageID             string                                                    `json:"stage_id,omitempty"`              // 面试关联的投递阶段
	InterviewRecordList []*GetHireApplicationInterviewListRespItemInterviewRecord `json:"interview_record_list,omitempty"` // 面试官记录列表
}

type GetHireApplicationInterviewListRespItemInterviewRecord struct {
	ID             string                                                                `json:"id,omitempty"`               // 面试记录id
	UserID         string                                                                `json:"user_id,omitempty"`          // 面试官用户id
	Content        string                                                                `json:"content,omitempty"`          // 面试评价
	MinJobLevelID  string                                                                `json:"min_job_level_id,omitempty"` // 建议定级下限的职级id
	MaxJobLevelID  string                                                                `json:"max_job_level_id,omitempty"` // 建议定级上限的职级id
	CommitStatus   int64                                                                 `json:"commit_status,omitempty"`    // 提交状态, 可选值有: `1`：已提交, `2`：未提交
	Conclusion     int64                                                                 `json:"conclusion,omitempty"`       // 面试结论, 可选值有: `1`：通过, `2`：未通过, `3`：未开始, `4`：未提交, `5`：未到场
	InterviewScore *GetHireApplicationInterviewListRespItemInterviewRecordInterviewScore `json:"interview_score,omitempty"`  // 面试评分
}

type GetHireApplicationInterviewListRespItemInterviewRecordInterviewScore struct {
	ID            string `json:"id,omitempty"`             // 面试评分id
	Level         int64  `json:"level,omitempty"`          // 分数级别
	ZhName        string `json:"zh_name,omitempty"`        // 中文名称
	ZhDescription string `json:"zh_description,omitempty"` // 中文描述
	EnName        string `json:"en_name,omitempty"`        // 英文名称
	EnDescription string `json:"en_description,omitempty"` // 英文描述
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireApplicationList 根据限定条件获取投递列表信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list
func (r *HireService) GetHireApplicationList(ctx context.Context, request *GetHireApplicationListReq, options ...MethodOptionFunc) (*GetHireApplicationListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplicationList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplicationList mock enable")
		return r.cli.mock.mockHireGetHireApplicationList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplicationList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireApplicationList(f func(ctx context.Context, request *GetHireApplicationListReq, options ...MethodOptionFunc) (*GetHireApplicationListResp, *Response, error)) {
	r.mockHireGetHireApplicationList = f
}

func (r *Mock) UnMockHireGetHireApplicationList() {
	r.mockHireGetHireApplicationList = nil
}

type GetHireApplicationListReq struct {
	ProcessID    *string `query:"process_id" json:"-"`    // 按流程过滤, 示例值："212121"
	StageID      *string `query:"stage_id" json:"-"`      // 按阶段过滤, 示例值："212121"
	TalentID     *string `query:"talent_id" json:"-"`     // 按人才过滤, 示例值："123321"
	ActiveStatus *string `query:"active_status" json:"-"` // 按活跃状态筛选 1=活跃投递, 2=非活跃投递, 3=全部,, 示例值："1"
	PageToken    *string `query:"page_token" json:"-"`    // 查询游标, 由上一页结果返回, 第一页不传, 示例值："1"
	PageSize     *int64  `query:"page_size" json:"-"`     // 每页限制, 每页最大不超过100, 示例值：100
}

type getHireApplicationListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationListResp `json:"data,omitempty"`
}

type GetHireApplicationListResp struct {
	Items     []string `json:"items,omitempty"`      // 投递数据列表
	PageToken string   `json:"page_token,omitempty"` // 游标, 翻下一页数据时使用
	HasMore   bool     `json:"has_more,omitempty"`   // 是否还有下一页数据
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// TerminateHireApplication 根据投递 ID 修改投递状态为「已终止」
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/terminate
func (r *HireService) TerminateHireApplication(ctx context.Context, request *TerminateHireApplicationReq, options ...MethodOptionFunc) (*TerminateHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireTerminateHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#TerminateHireApplication mock enable")
		return r.cli.mock.mockHireTerminateHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "TerminateHireApplication",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/terminate",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(terminateHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireTerminateHireApplication(f func(ctx context.Context, request *TerminateHireApplicationReq, options ...MethodOptionFunc) (*TerminateHireApplicationResp, *Response, error)) {
	r.mockHireTerminateHireApplication = f
}

func (r *Mock) UnMockHireTerminateHireApplication() {
	r.mockHireTerminateHireApplication = nil
}

type TerminateHireApplicationReq struct {
	ApplicationID         string   `path:"application_id" json:"-"`           // 投递ID, 示例值："12312312312"
	TerminationType       int64    `json:"termination_type,omitempty"`        // 终止原因的类型, 示例值：1, 可选值有: `1`：我们拒绝了候选人, `22`：候选人拒绝了我们, `27`：其他
	TerminationReasonList []string `json:"termination_reason_list,omitempty"` // 终止的具体原因的id列表
	TerminationReasonNote *string  `json:"termination_reason_note,omitempty"` // 终止备注, 示例值："不符合期望"
}

type terminateHireApplicationResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *TerminateHireApplicationResp `json:"data,omitempty"`
}

type TerminateHireApplicationResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireAttachment 获取招聘系统中附件的元信息，比如文件名、创建时间、文件url等
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/attachment/get
func (r *HireService) GetHireAttachment(ctx context.Context, request *GetHireAttachmentReq, options ...MethodOptionFunc) (*GetHireAttachmentResp, *Response, error) {
	if r.cli.mock.mockHireGetHireAttachment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireAttachment mock enable")
		return r.cli.mock.mockHireGetHireAttachment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireAttachment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/attachments/:attachment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireAttachmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireAttachment(f func(ctx context.Context, request *GetHireAttachmentReq, options ...MethodOptionFunc) (*GetHireAttachmentResp, *Response, error)) {
	r.mockHireGetHireAttachment = f
}

func (r *Mock) UnMockHireGetHireAttachment() {
	r.mockHireGetHireAttachment = nil
}

type GetHireAttachmentReq struct {
	AttachmentID string `path:"attachment_id" json:"-"` // 附件id, 示例值："6435242341238"
}

type getHireAttachmentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetHireAttachmentResp `json:"data,omitempty"`
}

type GetHireAttachmentResp struct {
	Attachment *GetHireAttachmentRespAttachment `json:"attachment,omitempty"` // 附件信息
}

type GetHireAttachmentRespAttachment struct {
	ID         string `json:"id,omitempty"`          // 附件id
	URL        string `json:"url,omitempty"`         // 附件的url
	Name       string `json:"name,omitempty"`        // 附件文件名
	Mime       string `json:"mime,omitempty"`        // 媒体类型/MIME
	CreateTime int64  `json:"create_time,omitempty"` // 附件创建时间（单位ms）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireAttachmentPreview 根据附件 ID 获取附件预览信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/attachment/preview
func (r *HireService) GetHireAttachmentPreview(ctx context.Context, request *GetHireAttachmentPreviewReq, options ...MethodOptionFunc) (*GetHireAttachmentPreviewResp, *Response, error) {
	if r.cli.mock.mockHireGetHireAttachmentPreview != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireAttachmentPreview mock enable")
		return r.cli.mock.mockHireGetHireAttachmentPreview(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireAttachmentPreview",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/attachments/:attachment_id/preview",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireAttachmentPreviewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireAttachmentPreview(f func(ctx context.Context, request *GetHireAttachmentPreviewReq, options ...MethodOptionFunc) (*GetHireAttachmentPreviewResp, *Response, error)) {
	r.mockHireGetHireAttachmentPreview = f
}

func (r *Mock) UnMockHireGetHireAttachmentPreview() {
	r.mockHireGetHireAttachmentPreview = nil
}

type GetHireAttachmentPreviewReq struct {
	AttachmentID string `path:"attachment_id" json:"-"` // 附件id, 示例值："11111"
}

type getHireAttachmentPreviewResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetHireAttachmentPreviewResp `json:"data,omitempty"`
}

type GetHireAttachmentPreviewResp struct {
	URL string `json:"url,omitempty"` // 预览链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireEmployee 通过员工 ID 获取入职信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get
func (r *HireService) GetHireEmployee(ctx context.Context, request *GetHireEmployeeReq, options ...MethodOptionFunc) (*GetHireEmployeeResp, *Response, error) {
	if r.cli.mock.mockHireGetHireEmployee != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireEmployee mock enable")
		return r.cli.mock.mockHireGetHireEmployee(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireEmployee",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/employees/:employee_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireEmployeeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireEmployee(f func(ctx context.Context, request *GetHireEmployeeReq, options ...MethodOptionFunc) (*GetHireEmployeeResp, *Response, error)) {
	r.mockHireGetHireEmployee = f
}

func (r *Mock) UnMockHireGetHireEmployee() {
	r.mockHireGetHireEmployee = nil
}

type GetHireEmployeeReq struct {
	EmployeeID string `path:"employee_id" json:"-"` // 员工ID, 示例值："123"
}

type getHireEmployeeResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetHireEmployeeResp `json:"data,omitempty"`
}

type GetHireEmployeeResp struct {
	Employee *GetHireEmployeeRespEmployee `json:"employee,omitempty"` // 员工信息
}

type GetHireEmployeeRespEmployee struct {
	ID                     string `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64  `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64  `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64  `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64  `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64  `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64  `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string `json:"overboard_note,omitempty"`           // 离职原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireEmployeeByApplication 通过投递 ID 获取入职信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get_by_application
func (r *HireService) GetHireEmployeeByApplication(ctx context.Context, request *GetHireEmployeeByApplicationReq, options ...MethodOptionFunc) (*GetHireEmployeeByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireEmployeeByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireEmployeeByApplication mock enable")
		return r.cli.mock.mockHireGetHireEmployeeByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireEmployeeByApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/employees/get_by_application",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireEmployeeByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireEmployeeByApplication(f func(ctx context.Context, request *GetHireEmployeeByApplicationReq, options ...MethodOptionFunc) (*GetHireEmployeeByApplicationResp, *Response, error)) {
	r.mockHireGetHireEmployeeByApplication = f
}

func (r *Mock) UnMockHireGetHireEmployeeByApplication() {
	r.mockHireGetHireEmployeeByApplication = nil
}

type GetHireEmployeeByApplicationReq struct {
	ApplicationID string `query:"application_id" json:"-"` // 投递ID, 示例值："123"
}

type getHireEmployeeByApplicationResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHireEmployeeByApplicationResp `json:"data,omitempty"`
}

type GetHireEmployeeByApplicationResp struct {
	Employee *GetHireEmployeeByApplicationRespEmployee `json:"employee,omitempty"` // 员工信息
}

type GetHireEmployeeByApplicationRespEmployee struct {
	ID                     string `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64  `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64  `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64  `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64  `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64  `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64  `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string `json:"overboard_note,omitempty"`           // 离职原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHireEmployee 根据员工 ID 更新员工转正、离职状态
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/patch
func (r *HireService) UpdateHireEmployee(ctx context.Context, request *UpdateHireEmployeeReq, options ...MethodOptionFunc) (*UpdateHireEmployeeResp, *Response, error) {
	if r.cli.mock.mockHireUpdateHireEmployee != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#UpdateHireEmployee mock enable")
		return r.cli.mock.mockHireUpdateHireEmployee(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "UpdateHireEmployee",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/employees/:employee_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateHireEmployeeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireUpdateHireEmployee(f func(ctx context.Context, request *UpdateHireEmployeeReq, options ...MethodOptionFunc) (*UpdateHireEmployeeResp, *Response, error)) {
	r.mockHireUpdateHireEmployee = f
}

func (r *Mock) UnMockHireUpdateHireEmployee() {
	r.mockHireUpdateHireEmployee = nil
}

type UpdateHireEmployeeReq struct {
	EmployeeID     string                               `path:"employee_id" json:"-"`      // 员工ID, 示例值："123"
	Operation      int64                                `json:"operation,omitempty"`       // 修改状态操作, 示例值：1, 可选值有: `1`：转正, `2`：离职
	ConversionInfo *UpdateHireEmployeeReqConversionInfo `json:"conversion_info,omitempty"` // 转正信息
	OverboardInfo  *UpdateHireEmployeeReqOverboardInfo  `json:"overboard_info,omitempty"`  // 离职信息
}

type UpdateHireEmployeeReqConversionInfo struct {
	ActualConversionTime *int64 `json:"actual_conversion_time,omitempty"` // 实际转正日期, 示例值：1637596800000
}

type UpdateHireEmployeeReqOverboardInfo struct {
	ActualOverboardTime *int64  `json:"actual_overboard_time,omitempty"` // 实际离职日期, 示例值：1637596800000
	OverboardNote       *string `json:"overboard_note,omitempty"`        // 离职原因, 示例值："职业发展考虑"
}

type updateHireEmployeeResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHireEmployeeResp `json:"data,omitempty"`
}

type UpdateHireEmployeeResp struct {
	Employee *UpdateHireEmployeeRespEmployee `json:"employee,omitempty"` // 员工信息
}

type UpdateHireEmployeeRespEmployee struct {
	ID                     string `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64  `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64  `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64  `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64  `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64  `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64  `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string `json:"overboard_note,omitempty"`           // 离职原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireJob 根据职位 ID 获取职位信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/get
func (r *HireService) GetHireJob(ctx context.Context, request *GetHireJobReq, options ...MethodOptionFunc) (*GetHireJobResp, *Response, error) {
	if r.cli.mock.mockHireGetHireJob != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireJob mock enable")
		return r.cli.mock.mockHireGetHireJob(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireJob",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/jobs/:job_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireJobResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireJob(f func(ctx context.Context, request *GetHireJobReq, options ...MethodOptionFunc) (*GetHireJobResp, *Response, error)) {
	r.mockHireGetHireJob = f
}

func (r *Mock) UnMockHireGetHireJob() {
	r.mockHireGetHireJob = nil
}

type GetHireJobReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	JobID      int64   `path:"job_id" json:"-"`        // 职位 ID，请求Path中, 示例值：6001
}

type getHireJobResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *GetHireJobResp `json:"data,omitempty"`
}

type GetHireJobResp struct {
	Job *GetHireJobRespJob `json:"job,omitempty"` // 职位数据
}

type GetHireJobRespJob struct {
	ID                 string                             `json:"id,omitempty"`                   // 职位 ID
	Title              string                             `json:"title,omitempty"`                // 职位名称
	Description        string                             `json:"description,omitempty"`          // 职位描述
	Requirement        string                             `json:"requirement,omitempty"`          // 职位要求
	RecruitmentType    *GetHireJobRespJobRecruitmentType  `json:"recruitment_type,omitempty"`     // 雇佣类型
	Department         *GetHireJobRespJobDepartment       `json:"department,omitempty"`           // 部门
	City               *GetHireJobRespJobCity             `json:"city,omitempty"`                 // 工作地点
	MinJobLevel        *GetHireJobRespJobMinJobLevel      `json:"min_job_level,omitempty"`        // 最低职级
	MaxJobLevel        *GetHireJobRespJobMaxJobLevel      `json:"max_job_level,omitempty"`        // 最高职级
	HighlightList      []*GetHireJobRespJobHighlight      `json:"highlight_list,omitempty"`       // 职位亮点
	JobCategory        *GetHireJobRespJobJobCategory      `json:"job_category,omitempty"`         // 职位序列
	JobType            *GetHireJobRespJobJobType          `json:"job_type,omitempty"`             // 职位类别
	ActiveStatus       int64                              `json:"active_status,omitempty"`        // 启用状态, 可选值有: `1`：启用, `2`：未启用
	CreateUserID       string                             `json:"create_user_id,omitempty"`       // 创建人ID
	CreateTime         int64                              `json:"create_time,omitempty"`          // 创建时间
	UpdateTime         int64                              `json:"update_time,omitempty"`          // 更新时间
	ProcessType        int64                              `json:"process_type,omitempty"`         // 职位流程类型, 可选值有: `1`：社招流程, `2`：校招流程
	CustomizedDataList []*GetHireJobRespJobCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段列表
}

type GetHireJobRespJobRecruitmentType struct {
	ID           string `json:"id,omitempty"`            // 雇佣类型 ID
	ZhName       string `json:"zh_name,omitempty"`       // 雇佣类型中文名称
	EnName       string `json:"en_name,omitempty"`       // 雇佣类型英文名称
	ActiveStatus int64  `json:"active_status,omitempty"` // 雇佣类型启用状态, 可选值有: `1`：启用, `2`：未启用
}

type GetHireJobRespJobDepartment struct {
	ID     string `json:"id,omitempty"`      // 部门 ID
	ZhName string `json:"zh_name,omitempty"` // 部门中文名称
	EnName string `json:"en_name,omitempty"` // 部门英文名称
}

type GetHireJobRespJobCity struct {
	CityCode string `json:"city_code,omitempty"` // 工作地点城市代码
	ZhName   string `json:"zh_name,omitempty"`   // 工作地点中文名称
	EnName   string `json:"en_name,omitempty"`   // 工作地点英文名称
}

type GetHireJobRespJobMinJobLevel struct {
	ID           string `json:"id,omitempty"`            // 职级 ID
	ZhName       string `json:"zh_name,omitempty"`       // 职级中文名称
	EnName       string `json:"en_name,omitempty"`       // 职级英文名称
	ActiveStatus int64  `json:"active_status,omitempty"` // 职级启用状态, 可选值有: `1`：启用, `2`：未启用
}

type GetHireJobRespJobMaxJobLevel struct {
	ID           string `json:"id,omitempty"`            // 职级 ID
	ZhName       string `json:"zh_name,omitempty"`       // 职级中文名称
	EnName       string `json:"en_name,omitempty"`       // 职级英文名称
	ActiveStatus int64  `json:"active_status,omitempty"` // 职级启用状态, 可选值有: `1`：启用, `2`：未启用
}

type GetHireJobRespJobHighlight struct {
	ID     string `json:"id,omitempty"`      // 职位亮点 ID
	ZhName string `json:"zh_name,omitempty"` // 职位亮点中文名称
	EnName string `json:"en_name,omitempty"` // 职位亮点英文名称
}

type GetHireJobRespJobJobCategory struct {
	ID           string `json:"id,omitempty"`            // 职位序列 ID
	ZhName       string `json:"zh_name,omitempty"`       // 职位序列中文名称
	EnName       string `json:"en_name,omitempty"`       // 职位序列英文名称
	ActiveStatus int64  `json:"active_status,omitempty"` // 职位序列启用状态, 可选值有: `1`：启用, `2`：未启用
}

type GetHireJobRespJobJobType struct {
	ID     string `json:"id,omitempty"`      // 职位类别 ID
	ZhName string `json:"zh_name,omitempty"` // 职位类别中文名称
	EnName string `json:"en_name,omitempty"` // 职位类别英文名称
}

type GetHireJobRespJobCustomizedData struct {
	ObjectID   string                                `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireJobRespJobCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                 `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireJobRespJobCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

type GetHireJobRespJobCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

type GetHireJobRespJobCustomizedDataValue struct {
	Content    string                                         `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireJobRespJobCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireJobRespJobCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireJobRespJobCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                         `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
	Number     string                                         `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

type GetHireJobRespJobCustomizedDataValueOption struct {
	Key  string                                          `json:"key,omitempty"`  // 选项 ID
	Name *GetHireJobRespJobCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

type GetHireJobRespJobCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

type GetHireJobRespJobCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireJobManager 根据职位 ID 获取职位上的招聘人员信息，如招聘负责人、用人经理
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job-manager/get
func (r *HireService) GetHireJobManager(ctx context.Context, request *GetHireJobManagerReq, options ...MethodOptionFunc) (*GetHireJobManagerResp, *Response, error) {
	if r.cli.mock.mockHireGetHireJobManager != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireJobManager mock enable")
		return r.cli.mock.mockHireGetHireJobManager(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireJobManager",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/jobs/:job_id/managers/:manager_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireJobManagerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireJobManager(f func(ctx context.Context, request *GetHireJobManagerReq, options ...MethodOptionFunc) (*GetHireJobManagerResp, *Response, error)) {
	r.mockHireGetHireJobManager = f
}

func (r *Mock) UnMockHireGetHireJobManager() {
	r.mockHireGetHireJobManager = nil
}

type GetHireJobManagerReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	JobID      string  `path:"job_id" json:"-"`        // 职位ID, 示例值："1618209327096"
	ManagerID  string  `path:"manager_id" json:"-"`    // 人员ID，目前传职位ID, 示例值："1618209327096"
}

type getHireJobManagerResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetHireJobManagerResp `json:"data,omitempty"`
}

type GetHireJobManagerResp struct {
	Info *GetHireJobManagerRespInfo `json:"info,omitempty"` // 职位负责人
}

type GetHireJobManagerRespInfo struct {
	ID                  string   `json:"id,omitempty"`                     // 职位ID
	RecruiterID         string   `json:"recruiter_id,omitempty"`           // 招聘负责人ID
	HiringManagerIDList []string `json:"hiring_manager_id_list,omitempty"` // 用人经理ID列表
	AssistantIDList     []string `json:"assistant_id_list,omitempty"`      // 协助人ID列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireJobProcessList 获取全部招聘流程信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_process/list
func (r *HireService) GetHireJobProcessList(ctx context.Context, request *GetHireJobProcessListReq, options ...MethodOptionFunc) (*GetHireJobProcessListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireJobProcessList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireJobProcessList mock enable")
		return r.cli.mock.mockHireGetHireJobProcessList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireJobProcessList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/job_processes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireJobProcessListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireJobProcessList(f func(ctx context.Context, request *GetHireJobProcessListReq, options ...MethodOptionFunc) (*GetHireJobProcessListResp, *Response, error)) {
	r.mockHireGetHireJobProcessList = f
}

func (r *Mock) UnMockHireGetHireJobProcessList() {
	r.mockHireGetHireJobProcessList = nil
}

type GetHireJobProcessListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 不能超过 100, 示例值：10
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1"
}

type getHireJobProcessListResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHireJobProcessListResp `json:"data,omitempty"`
}

type GetHireJobProcessListResp struct {
	HasMore   bool                             `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                           `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetHireJobProcessListRespItem `json:"items,omitempty"`      // 列表
}

type GetHireJobProcessListRespItem struct {
	ID        string                                `json:"id,omitempty"`         // ID
	ZhName    string                                `json:"zh_name,omitempty"`    // 中文名称
	EnName    string                                `json:"en_name,omitempty"`    // 英文名称
	Type      int64                                 `json:"type,omitempty"`       // 类型 1=社招流程, 2=校招流程,, 可选值有: `1`：社招流程, `2`：校招流程
	StageList []*GetHireJobProcessListRespItemStage `json:"stage_list,omitempty"` // 阶段列表, 内部按用户设置顺序排列
}

type GetHireJobProcessListRespItemStage struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
	Type   int64  `json:"type,omitempty"`    // 1=筛选型, 2=评估型, 3=笔试型, 4=面试型, 5=Offer型, 6=待入职, 7=已入职, 8=其它类型, 255=系统默认，后端模型中并没有该字段，仅用于前端显示,, 可选值有: `1`：筛选型, `2`：评估型, `3`：笔试型, `4`：面试型, `5`：Offer型, `6`：待入职, `7`：已入职, `8`：其它类型, `255`：系统默认
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHireNote 创建备注信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/create
func (r *HireService) CreateHireNote(ctx context.Context, request *CreateHireNoteReq, options ...MethodOptionFunc) (*CreateHireNoteResp, *Response, error) {
	if r.cli.mock.mockHireCreateHireNote != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#CreateHireNote mock enable")
		return r.cli.mock.mockHireCreateHireNote(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "CreateHireNote",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/notes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createHireNoteResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireCreateHireNote(f func(ctx context.Context, request *CreateHireNoteReq, options ...MethodOptionFunc) (*CreateHireNoteResp, *Response, error)) {
	r.mockHireCreateHireNote = f
}

func (r *Mock) UnMockHireCreateHireNote() {
	r.mockHireCreateHireNote = nil
}

type CreateHireNoteReq struct {
	UserIDType    *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	TalentID      string  `json:"talent_id,omitempty"`      // 人才ID, 示例值："6916472453069883661"
	ApplicationID *string `json:"application_id,omitempty"` // 投递ID, 示例值："6891565253964859661"
	CreatorID     *string `json:"creator_id,omitempty"`     // 创建人ID, 示例值："ou_f476cb099ac9227c9bae09ce46112579"
	Content       string  `json:"content,omitempty"`        // 内容, 示例值："测试5"
	Privacy       *int64  `json:"privacy,omitempty"`        // 备注私密属性（默认为公开）, 示例值：1, 可选值有: `1`：私密, `2`：公开
}

type createHireNoteResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *CreateHireNoteResp `json:"data,omitempty"`
}

type CreateHireNoteResp struct {
	Note *CreateHireNoteRespNote `json:"note,omitempty"` // 备注信息
}

type CreateHireNoteRespNote struct {
	ID            string `json:"id,omitempty"`             // ID备注
	TalentID      string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationID string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    int64  `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    int64  `json:"modify_time,omitempty"`    // 更新时间
	CreatorID     string `json:"creator_id,omitempty"`     // 创建人ID
	Content       string `json:"content,omitempty"`        // 内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireNote 根据备注 ID 获取备注信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/get
func (r *HireService) GetHireNote(ctx context.Context, request *GetHireNoteReq, options ...MethodOptionFunc) (*GetHireNoteResp, *Response, error) {
	if r.cli.mock.mockHireGetHireNote != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireNote mock enable")
		return r.cli.mock.mockHireGetHireNote(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireNote",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/notes/:note_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireNoteResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireNote(f func(ctx context.Context, request *GetHireNoteReq, options ...MethodOptionFunc) (*GetHireNoteResp, *Response, error)) {
	r.mockHireGetHireNote = f
}

func (r *Mock) UnMockHireGetHireNote() {
	r.mockHireGetHireNote = nil
}

type GetHireNoteReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	NoteID     string  `path:"note_id" json:"-"`       // Note ID, 示例值："6950620009265891614"
}

type getHireNoteResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetHireNoteResp `json:"data,omitempty"`
}

type GetHireNoteResp struct {
	Note *GetHireNoteRespNote `json:"note,omitempty"` // 备注数据
}

type GetHireNoteRespNote struct {
	ID            string `json:"id,omitempty"`             // ID备注
	TalentID      string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationID string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    int64  `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    int64  `json:"modify_time,omitempty"`    // 更新时间
	CreatorID     string `json:"creator_id,omitempty"`     // 创建人ID
	Content       string `json:"content,omitempty"`        // 内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireNoteList 获取备注列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/list
func (r *HireService) GetHireNoteList(ctx context.Context, request *GetHireNoteListReq, options ...MethodOptionFunc) (*GetHireNoteListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireNoteList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireNoteList mock enable")
		return r.cli.mock.mockHireGetHireNoteList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireNoteList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/notes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireNoteListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireNoteList(f func(ctx context.Context, request *GetHireNoteListReq, options ...MethodOptionFunc) (*GetHireNoteListResp, *Response, error)) {
	r.mockHireGetHireNoteList = f
}

func (r *Mock) UnMockHireGetHireNoteList() {
	r.mockHireGetHireNoteList = nil
}

type GetHireNoteListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 每页限制, 每页最大不超过100, 示例值：10
	PageToken  *string `query:"page_token" json:"-"`   // 查询游标, 由上一页结果返回, 第一页不传, 示例值："1"
	TalentID   string  `query:"talent_id" json:"-"`    // 人才ID, 示例值："6916472453069883661"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

type getHireNoteListResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetHireNoteListResp `json:"data,omitempty"`
}

type GetHireNoteListResp struct {
	Items     []*GetHireNoteListRespItem `json:"items,omitempty"`      // 备注数据列表
	HasMore   bool                       `json:"has_more,omitempty"`   // 是否还有下一页数据
	PageToken string                     `json:"page_token,omitempty"` // 游标, 翻下一页数据时使用
}

type GetHireNoteListRespItem struct {
	ID            string `json:"id,omitempty"`             // ID备注
	TalentID      string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationID string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    int64  `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    int64  `json:"modify_time,omitempty"`    // 更新时间
	CreatorID     string `json:"creator_id,omitempty"`     // 创建人ID
	Content       string `json:"content,omitempty"`        // 内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHireNote 根据备注 ID 更新备注信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/patch
func (r *HireService) UpdateHireNote(ctx context.Context, request *UpdateHireNoteReq, options ...MethodOptionFunc) (*UpdateHireNoteResp, *Response, error) {
	if r.cli.mock.mockHireUpdateHireNote != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#UpdateHireNote mock enable")
		return r.cli.mock.mockHireUpdateHireNote(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "UpdateHireNote",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/notes/:note_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateHireNoteResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireUpdateHireNote(f func(ctx context.Context, request *UpdateHireNoteReq, options ...MethodOptionFunc) (*UpdateHireNoteResp, *Response, error)) {
	r.mockHireUpdateHireNote = f
}

func (r *Mock) UnMockHireUpdateHireNote() {
	r.mockHireUpdateHireNote = nil
}

type UpdateHireNoteReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	NoteID     string  `path:"note_id" json:"-"`       // Note ID, 示例值："6950620009265891614"
	Content    string  `json:"content,omitempty"`      // 备注内容, 示例值："111"
}

type updateHireNoteResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHireNoteResp `json:"data,omitempty"`
}

type UpdateHireNoteResp struct {
	Note *UpdateHireNoteRespNote `json:"note,omitempty"` // 备注数据
}

type UpdateHireNoteRespNote struct {
	ID            string `json:"id,omitempty"`             // ID备注
	TalentID      string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationID string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    int64  `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    int64  `json:"modify_time,omitempty"`    // 更新时间
	CreatorID     string `json:"creator_id,omitempty"`     // 创建人ID
	Content       string `json:"content,omitempty"`        // 内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireOfferByApplication 根据投递 ID 获取 Offer 信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/offer
func (r *HireService) GetHireOfferByApplication(ctx context.Context, request *GetHireOfferByApplicationReq, options ...MethodOptionFunc) (*GetHireOfferByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireOfferByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireOfferByApplication mock enable")
		return r.cli.mock.mockHireGetHireOfferByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireOfferByApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/offer",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireOfferByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireOfferByApplication(f func(ctx context.Context, request *GetHireOfferByApplicationReq, options ...MethodOptionFunc) (*GetHireOfferByApplicationResp, *Response, error)) {
	r.mockHireGetHireOfferByApplication = f
}

func (r *Mock) UnMockHireGetHireOfferByApplication() {
	r.mockHireGetHireOfferByApplication = nil
}

type GetHireOfferByApplicationReq struct {
	UserIDType    *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ApplicationID string  `path:"application_id" json:"-"` // 投递ID, 示例值："12312312312"
}

type getHireOfferByApplicationResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetHireOfferByApplicationResp `json:"data,omitempty"`
}

type GetHireOfferByApplicationResp struct {
	Offer *GetHireOfferByApplicationRespOffer `json:"offer,omitempty"` // Offer数据
}

type GetHireOfferByApplicationRespOffer struct {
	ID            string                                        `json:"id,omitempty"`             // Offer id
	ApplicationID string                                        `json:"application_id,omitempty"` // 投递id
	BasicInfo     *GetHireOfferByApplicationRespOfferBasicInfo  `json:"basic_info,omitempty"`     // 基础信息
	SalaryPlan    *GetHireOfferByApplicationRespOfferSalaryPlan `json:"salary_plan,omitempty"`    // 薪酬计划
	SchemaID      string                                        `json:"schema_id,omitempty"`      // 当前offer使用的schema
	OfferStatus   int64                                         `json:"offer_status,omitempty"`   // Offer状态, 可选值有: `0`：所有, `1`：未申请, `2`：审批中, `3`：审批已撤回, `4`：审批通过, `5`：审批不通过, `6`：Offer 已发出, `7`：候选人已接受, `8`：候选人已拒绝, `9`：Offer 已失效
}

type GetHireOfferByApplicationRespOfferBasicInfo struct {
	OfferType         int64                                                       `json:"offer_type,omitempty"`          // Offer类型 1=Social, 2=Campus, 3=Intern, 4=InternTransfer, 可选值有: `1`：Social, `2`：Campus, `3`：Intern, `4`：InternTransfer
	Remark            string                                                      `json:"remark,omitempty"`              // 备注
	ExpireTime        int64                                                       `json:"expire_time,omitempty"`         // Offer过期时间
	OwnerUserID       string                                                      `json:"owner_user_id,omitempty"`       // string
	LeaderUserID      string                                                      `json:"leader_user_id,omitempty"`      // string
	OnboardDate       string                                                      `json:"onboard_date,omitempty"`        // 入职日期
	DepartmentID      string                                                      `json:"department_id,omitempty"`       // 入职部门
	ProbationMonth    int64                                                       `json:"probation_month,omitempty"`     // 试用期, 比如试用期6个月
	ContractYear      int64                                                       `json:"contract_year,omitempty"`       // 合同期, 比如3年
	RecruitmentType   *GetHireOfferByApplicationRespOfferBasicInfoRecruitmentType `json:"recruitment_type,omitempty"`    // 雇员类型
	Sequence          *GetHireOfferByApplicationRespOfferBasicInfoSequence        `json:"sequence,omitempty"`            // 序列
	Level             *GetHireOfferByApplicationRespOfferBasicInfoLevel           `json:"level,omitempty"`               // 级别
	OnboardAddress    *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddress  `json:"onboard_address,omitempty"`     // 入职地点
	WorkAddress       *GetHireOfferByApplicationRespOfferBasicInfoWorkAddress     `json:"work_address,omitempty"`        // 工作地点
	CustomizeInfoList []*GetHireOfferByApplicationRespOfferBasicInfoCustomizeInfo `json:"customize_info_list,omitempty"` // 自定义字段的value信息
}

type GetHireOfferByApplicationRespOfferBasicInfoRecruitmentType struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
}

type GetHireOfferByApplicationRespOfferBasicInfoSequence struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
}

type GetHireOfferByApplicationRespOfferBasicInfoLevel struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
}

type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddress struct {
	ID       string                                                             `json:"id,omitempty"`       // ID
	ZhName   string                                                             `json:"zh_name,omitempty"`  // 中文名称
	EnName   string                                                             `json:"en_name,omitempty"`  // 英文名称
	District *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressDistrict `json:"district,omitempty"` // 区域信息
	City     *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCity     `json:"city,omitempty"`     // 城市信息
	State    *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressState    `json:"state,omitempty"`    // 省信息
	Country  *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCountry  `json:"country,omitempty"`  // 国家信息
}

type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressDistrict struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型 1=COUNTRY, 2=STATE, 3=CITY, 4=DISTRICT, 5=ADDRESS,
}

type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCity struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型 1=COUNTRY, 2=STATE, 3=CITY, 4=DISTRICT, 5=ADDRESS,, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressState struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型 1=COUNTRY, 2=STATE, 3=CITY, 4=DISTRICT, 5=ADDRESS,, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCountry struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型 1=COUNTRY, 2=STATE, 3=CITY, 4=DISTRICT, 5=ADDRESS,, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

type GetHireOfferByApplicationRespOfferBasicInfoWorkAddress struct {
	ID       string                                                          `json:"id,omitempty"`       // ID
	ZhName   string                                                          `json:"zh_name,omitempty"`  // 中文名称
	EnName   string                                                          `json:"en_name,omitempty"`  // 英文名称
	District *GetHireOfferByApplicationRespOfferBasicInfoWorkAddressDistrict `json:"district,omitempty"` // 区域信息
	City     *GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCity     `json:"city,omitempty"`     // 城市信息
	State    *GetHireOfferByApplicationRespOfferBasicInfoWorkAddressState    `json:"state,omitempty"`    // 省信息
	Country  *GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCountry  `json:"country,omitempty"`  // 国家信息
}

type GetHireOfferByApplicationRespOfferBasicInfoWorkAddressDistrict struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型 1=COUNTRY, 2=STATE, 3=CITY, 4=DISTRICT, 5=ADDRESS,
}

type GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCity struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型 1=COUNTRY, 2=STATE, 3=CITY, 4=DISTRICT, 5=ADDRESS,, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

type GetHireOfferByApplicationRespOfferBasicInfoWorkAddressState struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型 1=COUNTRY, 2=STATE, 3=CITY, 4=DISTRICT, 5=ADDRESS,, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

type GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCountry struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型 1=COUNTRY, 2=STATE, 3=CITY, 4=DISTRICT, 5=ADDRESS,, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

type GetHireOfferByApplicationRespOfferBasicInfoCustomizeInfo struct {
	ObjectID       string `json:"object_id,omitempty"`       // 自定义字段ID
	CustomizeValue string `json:"customize_value,omitempty"` // 自定义字段Value
}

type GetHireOfferByApplicationRespOfferSalaryPlan struct {
	Currency                  string                                                       `json:"currency,omitempty"`                    // 币种
	BasicSalary               string                                                       `json:"basic_salary,omitempty"`                // 基本薪资, 注意是json
	ProbationSalaryPercentage string                                                       `json:"probation_salary_percentage,omitempty"` // 试用期百分比
	AwardSalaryMultiple       string                                                       `json:"award_salary_multiple,omitempty"`       // 年终奖月数
	OptionShares              string                                                       `json:"option_shares,omitempty"`               // 期权股数
	QuarterlyBonus            string                                                       `json:"quarterly_bonus,omitempty"`             // 季度奖金额
	HalfYearBonus             string                                                       `json:"half_year_bonus,omitempty"`             // 半年奖金额
	TotalAnnualCash           string                                                       `json:"total_annual_cash,omitempty"`           // 年度现金总额(数量，非公式)
	CustomizeInfoList         []*GetHireOfferByApplicationRespOfferSalaryPlanCustomizeInfo `json:"customize_info_list,omitempty"`         // 自定义字段的value信息
}

type GetHireOfferByApplicationRespOfferSalaryPlanCustomizeInfo struct {
	ObjectID       string `json:"object_id,omitempty"`       // 自定义字段ID
	CustomizeValue string `json:"customize_value,omitempty"` // 自定义字段Value
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireOfferSchema 根据 Offer 申请表 ID，获取 Offer 申请表的详细信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer_schema/get
//
// Deprecated
func (r *HireService) GetHireOfferSchema(ctx context.Context, request *GetHireOfferSchemaReq, options ...MethodOptionFunc) (*GetHireOfferSchemaResp, *Response, error) {
	if r.cli.mock.mockHireGetHireOfferSchema != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireOfferSchema mock enable")
		return r.cli.mock.mockHireGetHireOfferSchema(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireOfferSchema",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/offer_schemas/:offer_schema_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireOfferSchemaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireOfferSchema(f func(ctx context.Context, request *GetHireOfferSchemaReq, options ...MethodOptionFunc) (*GetHireOfferSchemaResp, *Response, error)) {
	r.mockHireGetHireOfferSchema = f
}

func (r *Mock) UnMockHireGetHireOfferSchema() {
	r.mockHireGetHireOfferSchema = nil
}

type GetHireOfferSchemaReq struct {
	OfferSchemaID string `path:"offer_schema_id" json:"-"` // offer申请表的ID *必需属性, 示例值："1231231231231"
}

type getHireOfferSchemaResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetHireOfferSchemaResp `json:"data,omitempty"`
}

type GetHireOfferSchemaResp struct {
	ID         string                          `json:"id,omitempty"`          // offer申请表ID
	Scenario   int64                           `json:"scenario,omitempty"`    // offer申请表使用场景, 可选值有: `1`：Offer审批表
	Version    int64                           `json:"version,omitempty"`     // 申请表版本
	ObjectList []*GetHireOfferSchemaRespObject `json:"object_list,omitempty"` // 字段对象信息
}

type GetHireOfferSchemaRespObject struct {
	ID           string                                `json:"id,omitempty"`            // 字段ID
	Name         *GetHireOfferSchemaRespObjectName     `json:"name,omitempty"`          // 字段名称
	Type         string                                `json:"type,omitempty"`          // 字段类型, text=单行文本, long_text=多行文本, select=单选, multi_select=多选, date_select=日期, number=数字
	IsCustomized bool                                  `json:"is_customized,omitempty"` // 字段是否为自定义
	OptionList   []*GetHireOfferSchemaRespObjectOption `json:"option_list,omitempty"`   // 单选/多选可选择字段的选项值
}

type GetHireOfferSchemaRespObjectName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文名
	EnUs string `json:"en_us,omitempty"` // 英文名
}

type GetHireOfferSchemaRespObjectOption struct {
	Name         *GetHireOfferSchemaRespObjectOptionName `json:"name,omitempty"`          // 名字
	Index        int64                                   `json:"index,omitempty"`         // 选项序号
	ActiveStatus int64                                   `json:"active_status,omitempty"` // 选项当前是否启用, 可选值有: `1`：进行中, `2`：已终止
}

type GetHireOfferSchemaRespObjectOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文名
	EnUs string `json:"en_us,omitempty"` // 英文名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireReferralByApplication 根据投递 ID 获取内推信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral/get_by_application
func (r *HireService) GetHireReferralByApplication(ctx context.Context, request *GetHireReferralByApplicationReq, options ...MethodOptionFunc) (*GetHireReferralByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireReferralByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireReferralByApplication mock enable")
		return r.cli.mock.mockHireGetHireReferralByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireReferralByApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/referrals/get_by_application",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireReferralByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireReferralByApplication(f func(ctx context.Context, request *GetHireReferralByApplicationReq, options ...MethodOptionFunc) (*GetHireReferralByApplicationResp, *Response, error)) {
	r.mockHireGetHireReferralByApplication = f
}

func (r *Mock) UnMockHireGetHireReferralByApplication() {
	r.mockHireGetHireReferralByApplication = nil
}

type GetHireReferralByApplicationReq struct {
	ApplicationID string  `query:"application_id" json:"-"` // 投递的id, 示例值："6134134355464633"
	UserIDType    *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

type getHireReferralByApplicationResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHireReferralByApplicationResp `json:"data,omitempty"`
}

type GetHireReferralByApplicationResp struct {
	Referral *GetHireReferralByApplicationRespReferral `json:"referral,omitempty"` // 内推信息
}

type GetHireReferralByApplicationRespReferral struct {
	ApplicationID  string `json:"application_id,omitempty"`   // 投递id
	CreateTime     int64  `json:"create_time,omitempty"`      // 创建时间（ms）
	ID             string `json:"id,omitempty"`               // 内推的id
	ReferralUserID string `json:"referral_user_id,omitempty"` // 内推人的id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireResumeSource 获取简历来源列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/resume_source/list
func (r *HireService) GetHireResumeSource(ctx context.Context, request *GetHireResumeSourceReq, options ...MethodOptionFunc) (*GetHireResumeSourceResp, *Response, error) {
	if r.cli.mock.mockHireGetHireResumeSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireResumeSource mock enable")
		return r.cli.mock.mockHireGetHireResumeSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireResumeSource",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/resume_sources",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireResumeSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireResumeSource(f func(ctx context.Context, request *GetHireResumeSourceReq, options ...MethodOptionFunc) (*GetHireResumeSourceResp, *Response, error)) {
	r.mockHireGetHireResumeSource = f
}

func (r *Mock) UnMockHireGetHireResumeSource() {
	r.mockHireGetHireResumeSource = nil
}

type GetHireResumeSourceReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1"
}

type getHireResumeSourceResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetHireResumeSourceResp `json:"data,omitempty"`
}

type GetHireResumeSourceResp struct {
	Items     []*GetHireResumeSourceRespItem `json:"items,omitempty"`      // 数据
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

type GetHireResumeSourceRespItem struct {
	ID               string `json:"id,omitempty"`                 // 来源 ID
	ZhName           string `json:"zh_name,omitempty"`            // 中文名
	EnName           string `json:"en_name,omitempty"`            // 英文名
	ActiveStatus     int64  `json:"active_status,omitempty"`      // 启用状态, 可选值有: `1`：已启用, `2`：已禁用
	ResumeSourceType int64  `json:"resume_source_type,omitempty"` // 来源类型, 可选值有: `10000`：内推, `10001`：猎头, `10002`：内部来源, `10003`：第三方招聘网站, `10004`：社交媒体, `10005`：线下来源, `10006`：其他, `10007`：外部推荐
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireTalent 根据人才 ID 获取人才信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/get
func (r *HireService) GetHireTalent(ctx context.Context, request *GetHireTalentReq, options ...MethodOptionFunc) (*GetHireTalentResp, *Response, error) {
	if r.cli.mock.mockHireGetHireTalent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireTalent mock enable")
		return r.cli.mock.mockHireGetHireTalent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireTalent",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/talents/:talent_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireTalentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireGetHireTalent(f func(ctx context.Context, request *GetHireTalentReq, options ...MethodOptionFunc) (*GetHireTalentResp, *Response, error)) {
	r.mockHireGetHireTalent = f
}

func (r *Mock) UnMockHireGetHireTalent() {
	r.mockHireGetHireTalent = nil
}

type GetHireTalentReq struct {
	TalentID string `path:"talent_id" json:"-"` // 人才ID, 示例值："6891560630172518670"
}

type getHireTalentResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *GetHireTalentResp `json:"data,omitempty"`
}

type GetHireTalentResp struct {
	Talent *GetHireTalentRespTalent `json:"talent,omitempty"` // 人才信息
}

type GetHireTalentRespTalent struct {
	ID                        string                                          `json:"id,omitempty"`                          // ID
	BasicInfo                 *GetHireTalentRespTalentBasicInfo               `json:"basic_info,omitempty"`                  // 基础信息
	EducationList             []*GetHireTalentRespTalentEducation             `json:"education_list,omitempty"`              // 教育经历
	CareerList                []*GetHireTalentRespTalentCareer                `json:"career_list,omitempty"`                 // 工作经历
	ProjectList               []*GetHireTalentRespTalentProject               `json:"project_list,omitempty"`                // 项目经历
	WorksList                 []*GetHireTalentRespTalentWorks                 `json:"works_list,omitempty"`                  // 作品集
	AwardList                 []*GetHireTalentRespTalentAward                 `json:"award_list,omitempty"`                  // 获奖列表
	CompetitionList           []*GetHireTalentRespTalentCompetition           `json:"competition_list,omitempty"`            // 竞赛列表
	CertificateList           []*GetHireTalentRespTalentCertificate           `json:"certificate_list,omitempty"`            // 证书列表
	LanguageList              []*GetHireTalentRespTalentLanguage              `json:"language_list,omitempty"`               // 语言列表
	SnsList                   []*GetHireTalentRespTalentSns                   `json:"sns_list,omitempty"`                    // SNS列表
	ResumeSourceList          []*GetHireTalentRespTalentResumeSource          `json:"resume_source_list,omitempty"`          // 简历来源
	InterviewRegistrationList []*GetHireTalentRespTalentInterviewRegistration `json:"interview_registration_list,omitempty"` // 面试登记表
	ResumeAttachmentIDList    []string                                        `json:"resume_attachment_id_list,omitempty"`   // 简历附件id列表（按照简历创建时间降序）
}

type GetHireTalentRespTalentBasicInfo struct {
	Name                 string                                           `json:"name,omitempty"`                  // 名字
	Mobile               string                                           `json:"mobile,omitempty"`                // 手机
	MobileCountryCode    string                                           `json:"mobile_country_code,omitempty"`   // 手机国家代码
	Email                string                                           `json:"email,omitempty"`                 // 邮箱
	ExperienceYears      int64                                            `json:"experience_years,omitempty"`      // 工作年限
	Age                  int64                                            `json:"age,omitempty"`                   // 年龄
	Nationality          *GetHireTalentRespTalentBasicInfoNationality     `json:"nationality,omitempty"`           // 国籍
	Gender               int64                                            `json:"gender,omitempty"`                // 性别, 可选值有: `1`：男, `2`：女, `3`：其他
	CurrentCity          *GetHireTalentRespTalentBasicInfoCurrentCity     `json:"current_city,omitempty"`          // 当前所在城市信息
	HometownCity         *GetHireTalentRespTalentBasicInfoHometownCity    `json:"hometown_city,omitempty"`         // 家乡
	PreferredCityList    []*GetHireTalentRespTalentBasicInfoPreferredCity `json:"preferred_city_list,omitempty"`   // 偏好城市
	IdentificationType   int64                                            `json:"identification_type,omitempty"`   // 证件类型, 可选值有: `1`：中国 - 居民身份证, `2`：护照, `3`：中国 - 港澳居民居住证, `4`：中国 - 台湾居民来往大陆通行证, `5`：其他, `6`：中国 - 港澳居民来往内地通行证, `9`：中国 - 台湾居民居住证
	IdentificationNumber string                                           `json:"identification_number,omitempty"` // 证件号
	Birthday             int64                                            `json:"birthday,omitempty"`              // 生日
}

type GetHireTalentRespTalentBasicInfoNationality struct {
	NationalityCode string `json:"nationality_code,omitempty"` // 国家编码
	ZhName          string `json:"zh_name,omitempty"`          // 名字
	EnName          string `json:"en_name,omitempty"`          // 英文名
}

type GetHireTalentRespTalentBasicInfoCurrentCity struct {
	CityCode string `json:"city_code,omitempty"` // 城市码
	ZhName   string `json:"zh_name,omitempty"`   // 名字
	EnName   string `json:"en_name,omitempty"`   // 英文名
}

type GetHireTalentRespTalentBasicInfoHometownCity struct {
	CityCode string `json:"city_code,omitempty"` // 城市码
	ZhName   string `json:"zh_name,omitempty"`   // 名字
	EnName   string `json:"en_name,omitempty"`   // 英文名
}

type GetHireTalentRespTalentBasicInfoPreferredCity struct {
	CityCode string `json:"city_code,omitempty"` // 城市码
	ZhName   string `json:"zh_name,omitempty"`   // 名字
	EnName   string `json:"en_name,omitempty"`   // 英文名
}

type GetHireTalentRespTalentEducation struct {
	ID              string `json:"id,omitempty"`               // ID
	Degree          int64  `json:"degree,omitempty"`           // 学位, 可选值有: `1`：小学, `2`：初中, `3`：专职, `4`：高中, `5`：大专, `6`：本科, `7`：硕士, `8`：博士, `9`：其他
	School          string `json:"school,omitempty"`           // 学校
	FieldOfStudy    string `json:"field_of_study,omitempty"`   // 专业
	StartTime       int64  `json:"start_time,omitempty"`       // 开始时间
	EndTime         int64  `json:"end_time,omitempty"`         // 结束时间
	EducationType   int64  `json:"education_type,omitempty"`   // 学历类型, 可选值有: `1`：非中国大陆, `2`：统招全日制, `3`：非全日制, `4`：自考, `5`：其他
	AcademicRanking int64  `json:"academic_ranking,omitempty"` // 成绩排名, 可选值有: `5`：前 5 %, `10`：前 10 %, `20`：前 20 %, `30`：前 30 %, `50`：前 50 %, `-1`：其他
	TagList         string `json:"tag_list,omitempty"`         // 标记, 可选值有: `1`：985学校, `2`：211学校, `3`：一本, `4`：国外院校QS200, `5`：百度 阿里 腾讯, `6`：头条, 美团, 滴滴, `7`：其它大厂, `8`：猎头渠道, `9`：内推渠道, `10`：互联网大厂（包含 BAT/TMD）, `11`：熟人内推, `100`：email, `101`：mobile, `102`：猎头保护中, `103`：已入职, `104`：已离职
}

type GetHireTalentRespTalentCareer struct {
	ID        string `json:"id,omitempty"`         // ID
	Company   string `json:"company,omitempty"`    // 公司
	Title     string `json:"title,omitempty"`      // 职位
	Desc      string `json:"desc,omitempty"`       // 描述
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间
	TagList   int64  `json:"tag_list,omitempty"`   // 标签, 可选值有: `1`：985学校, `2`：211学校, `3`：一本, `4`：国外院校QS200, `5`：百度 阿里 腾讯, `6`：头条, 美团, 滴滴, `7`：其它大厂, `8`：猎头渠道, `9`：内推渠道, `10`：互联网大厂（包含 BAT/TMD）, `11`：熟人内推, `100`：email, `101`：mobile, `102`：猎头保护中, `103`：已入职, `104`：已离职
}

type GetHireTalentRespTalentProject struct {
	ID        string `json:"id,omitempty"`         // ID
	Name      string `json:"name,omitempty"`       // 项目名称
	Role      string `json:"role,omitempty"`       // 项目角色
	Link      string `json:"link,omitempty"`       // 项目链接
	Desc      string `json:"desc,omitempty"`       // 描述
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间
}

type GetHireTalentRespTalentWorks struct {
	ID   string `json:"id,omitempty"`   // ID
	Link string `json:"link,omitempty"` // 链接
	Desc string `json:"desc,omitempty"` // 描述
	Name string `json:"name,omitempty"` // 名字
}

type GetHireTalentRespTalentAward struct {
	ID        string `json:"id,omitempty"`         // ID
	Title     string `json:"title,omitempty"`      // 名称
	AwardTime string `json:"award_time,omitempty"` // 获奖时间
	Desc      string `json:"desc,omitempty"`       // 描述
}

type GetHireTalentRespTalentCompetition struct {
	ID   string `json:"id,omitempty"`   // ID
	Name string `json:"name,omitempty"` // 竞赛名称
	Desc string `json:"desc,omitempty"` // 竞赛描述
}

type GetHireTalentRespTalentCertificate struct {
	ID   string `json:"id,omitempty"`   // ID
	Name string `json:"name,omitempty"` // 证件名称
	Desc string `json:"desc,omitempty"` // 证件描述
}

type GetHireTalentRespTalentLanguage struct {
	ID          string `json:"id,omitempty"`          // ID
	Language    int64  `json:"language,omitempty"`    // 语言, 可选值有: `1`：英语, `2`：法语, `3`：日语, `4`：韩语, `5`：德语, `6`：俄语, `7`：西班牙语, `8`：葡萄牙语, `9`：阿拉伯语, `10`：印地语, `11`：印度斯坦语, `12`：孟加拉语, `13`：豪萨语, `14`：旁遮普语, `15`：波斯语, `16`：斯瓦西里语, `17`：泰卢固语, `18`：土耳其语, `19`：意大利语, `20`：爪哇语, `21`：泰米尔语, `22`：马拉地语, `23`：越南语, `24`：普通话, `25`：粤语
	Proficiency int64  `json:"proficiency,omitempty"` // 熟练程度, 可选值有: `1`：入门, `2`：日常会话, `3`：商务会话, `4`：无障碍沟通, `5`：母语
}

type GetHireTalentRespTalentSns struct {
	ID      string `json:"id,omitempty"`       // ID
	SnsType int64  `json:"sns_type,omitempty"` // SNS类型, 可选值有: `1`：领英, `2`：脉脉, `3`：微信, `4`：微博, `5`：Github, `6`：知乎, `7`：脸书, `8`：推特, `9`：Whatsapp, `10`：个人网站, `11`：QQ
	Link    string `json:"link,omitempty"`     // SNS链接
}

type GetHireTalentRespTalentResumeSource struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名
	EnName string `json:"en_name,omitempty"` // 英文名
}

type GetHireTalentRespTalentInterviewRegistration struct {
	ID               string `json:"id,omitempty"`                // ID
	RegistrationTime int64  `json:"registration_time,omitempty"` // 创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MakeHireTransferOnboardByApplication 根据投递 ID 操作候选人入职并创建员工，投递须处于「待入职」阶段
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/transfer_onboard
func (r *HireService) MakeHireTransferOnboardByApplication(ctx context.Context, request *MakeHireTransferOnboardByApplicationReq, options ...MethodOptionFunc) (*MakeHireTransferOnboardByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireMakeHireTransferOnboardByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#MakeHireTransferOnboardByApplication mock enable")
		return r.cli.mock.mockHireMakeHireTransferOnboardByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "MakeHireTransferOnboardByApplication",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/transfer_onboard",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(makeHireTransferOnboardByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireMakeHireTransferOnboardByApplication(f func(ctx context.Context, request *MakeHireTransferOnboardByApplicationReq, options ...MethodOptionFunc) (*MakeHireTransferOnboardByApplicationResp, *Response, error)) {
	r.mockHireMakeHireTransferOnboardByApplication = f
}

func (r *Mock) UnMockHireMakeHireTransferOnboardByApplication() {
	r.mockHireMakeHireTransferOnboardByApplication = nil
}

type MakeHireTransferOnboardByApplicationReq struct {
	ApplicationID          string `path:"application_id" json:"-"`            // 投递ID, 示例值："12312312312"
	ActualOnboardTime      *int64 `json:"actual_onboard_time,omitempty"`      // 实际入职时间, 示例值：1616428800000
	ExpectedConversionTime *int64 `json:"expected_conversion_time,omitempty"` // 预期转正时间, 示例值：1616428800000
}

type makeHireTransferOnboardByApplicationResp struct {
	Code int64                                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                    `json:"msg,omitempty"`  // 错误描述
	Data *MakeHireTransferOnboardByApplicationResp `json:"data,omitempty"`
}

type MakeHireTransferOnboardByApplicationResp struct {
	ID                     string `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64  `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64  `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64  `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64  `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64  `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64  `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string `json:"overboard_note,omitempty"`           // 离职原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CropFaceVerifyImage
//
// 无源人脸比对接入需申请白名单，接入前请联系飞书开放平台工作人员，邮箱：openplatform@bytedance.com。
// 无源人脸比对流程，开发者后台通过调用此接口对基准图片做规范校验及处理。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/human_authentication-v1/face/facial-image-cropping
func (r *HumanAuthService) CropFaceVerifyImage(ctx context.Context, request *CropFaceVerifyImageReq, options ...MethodOptionFunc) (*CropFaceVerifyImageResp, *Response, error) {
	if r.cli.mock.mockHumanAuthCropFaceVerifyImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] HumanAuth#CropFaceVerifyImage mock enable")
		return r.cli.mock.mockHumanAuthCropFaceVerifyImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "HumanAuth",
		API:                   "CropFaceVerifyImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/face_verify/v1/crop_face_image",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(cropFaceVerifyImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHumanAuthCropFaceVerifyImage(f func(ctx context.Context, request *CropFaceVerifyImageReq, options ...MethodOptionFunc) (*CropFaceVerifyImageResp, *Response, error)) {
	r.mockHumanAuthCropFaceVerifyImage = f
}

func (r *Mock) UnMockHumanAuthCropFaceVerifyImage() {
	r.mockHumanAuthCropFaceVerifyImage = nil
}

type CropFaceVerifyImageReq struct {
	RawImage io.Reader `json:"raw_image,omitempty"` // 带有头像的人脸照片文件名称
}

type cropFaceVerifyImageResp struct {
	Code int64                    `json:"code,omitempty"` // 返回码，非0为失败
	Msg  string                   `json:"msg,omitempty"`  // 返回信息，返回码的描述
	Data *CropFaceVerifyImageResp `json:"data,omitempty"` // 业务数据
}

type CropFaceVerifyImageResp struct {
	FaceImage string `json:"face_image,omitempty"` // BASE64(裁剪后的人脸基准图片)，code为0时返回
}
