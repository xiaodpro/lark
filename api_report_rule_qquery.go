// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// QueryReportRule 查询规则。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/report/report-v1/rule/query
// new doc: https://open.feishu.cn/document/server-docs/report-v1/rule/query
func (r *ReportService) QueryReportRule(ctx context.Context, request *QueryReportRuleReq, options ...MethodOptionFunc) (*QueryReportRuleResp, *Response, error) {
	if r.cli.mock.mockReportQueryReportRule != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Report#QueryReportRule mock enable")
		return r.cli.mock.mockReportQueryReportRule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Report",
		API:                   "QueryReportRule",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/report/v1/rules/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(queryReportRuleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockReportQueryReportRule mock ReportQueryReportRule method
func (r *Mock) MockReportQueryReportRule(f func(ctx context.Context, request *QueryReportRuleReq, options ...MethodOptionFunc) (*QueryReportRuleResp, *Response, error)) {
	r.mockReportQueryReportRule = f
}

// UnMockReportQueryReportRule un-mock ReportQueryReportRule method
func (r *Mock) UnMockReportQueryReportRule() {
	r.mockReportQueryReportRule = nil
}

// QueryReportRuleReq ...
type QueryReportRuleReq struct {
	RuleName       string  `query:"rule_name" json:"-"`       // 规则名称, 示例值: 工作月报
	IncludeDeleted *int64  `query:"include_deleted" json:"-"` // 是否包括已删除, 默认未删除, 示例值: 0, 可选值有: 0: 不包括已删除, 1: 包括已删除, 取值范围: `0` ～ `1`
	UserIDType     *IDType `query:"user_id_type" json:"-"`    // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// QueryReportRuleResp ...
type QueryReportRuleResp struct {
	Rules []*QueryReportRuleRespRule `json:"rules,omitempty"` // 规则列表
}

// QueryReportRuleRespRule ...
type QueryReportRuleRespRule struct {
	RuleID                  string                               `json:"rule_id,omitempty"`                    // 规则唯一标识
	Name                    string                               `json:"name,omitempty"`                       // 规则名称
	IconName                string                               `json:"icon_name,omitempty"`                  // 规则图标
	CreatedAt               int64                                `json:"created_at,omitempty"`                 // 创建时间
	CreatorUserID           string                               `json:"creator_user_id,omitempty"`            // 创建人ID
	CreatorUserName         string                               `json:"creator_user_name,omitempty"`          // 创建人名称
	OwnerUserID             string                               `json:"owner_user_id,omitempty"`              // 规则所有者ID
	OwnerUserName           string                               `json:"owner_user_name,omitempty"`            // 规则所有者名称
	FormSchema              []*QueryReportRuleRespRuleFormSchema `json:"form_schema,omitempty"`                // 表单定义
	IsDeleted               int64                                `json:"is_deleted,omitempty"`                 // 规则是否已删除, 可选值有: 0: 未删除, 1: 已删除
	NeedReportUserIDs       []string                             `json:"need_report_user_ids,omitempty"`       // 需要汇报的用户ID列表
	NeedReportDepartmentIDs []string                             `json:"need_report_department_ids,omitempty"` // 需要汇报的部门ID列表（如果id为0, 表示全员）
	NeedReportChatIDs       []string                             `json:"need_report_chat_ids,omitempty"`       // 需要汇报的群ID列表
	CcUserIDs               []string                             `json:"cc_user_ids,omitempty"`                // 抄送用户ID列表
	CcDepartmentIDs         []string                             `json:"cc_department_ids,omitempty"`          // 抄送部门ID列表
	ToUserIDs               []string                             `json:"to_user_ids,omitempty"`                // 汇报对象用户ID列表
	ToChatIDs               []string                             `json:"to_chat_ids,omitempty"`                // 汇报对象群ID列表
	ToLeaders               []int64                              `json:"to_leaders,omitempty"`                 // 上级汇报对象, 0表示第一级, 依次类推, 最大为5表示第六级
	ToDepartmentOwners      []int64                              `json:"to_department_owners,omitempty"`       // 部门负责人汇报对象, 0表示第一级, 依次类推, 最大为5表示第六级
	ManagerUserIDs          []string                             `json:"manager_user_ids,omitempty"`           // 规则管理员用户ID列表
	CcChatIDs               []string                             `json:"cc_chat_ids,omitempty"`                // 抄送群ID列表
}

// QueryReportRuleRespRuleFormSchema ...
type QueryReportRuleRespRuleFormSchema struct {
	Name string `json:"name,omitempty"` // 字段名称
	Type string `json:"type,omitempty"` // 字段类型, 可选值有: text: 文本, number: 数字, dropdown: 单选, image: 图片, attachement: 附件, multiSelect: 多选, address: 地址, datetime: 时间
}

// queryReportRuleResp ...
type queryReportRuleResp struct {
	Code  int64                `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string               `json:"msg,omitempty"`  // 错误描述
	Data  *QueryReportRuleResp `json:"data,omitempty"`
	Error *ErrorDetail         `json:"error,omitempty"`
}
