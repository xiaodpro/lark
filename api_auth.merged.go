// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// RefreshAccessToken user_access_token 具有一定的时效性，默认最长有效期为7200秒。该接口用于在 user_access_token 过期时用 refresh_token 重新获取 access_token。此时会返回新的 refresh_token，再次刷新 access_token 时需要使用新的 refresh_token。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/refresh_access_token
func (r *AuthService) RefreshAccessToken(ctx context.Context, request *RefreshAccessTokenReq, options ...MethodOptionFunc) (*RefreshAccessTokenResp, *Response, error) {
	if r.cli.mock.mockAuthRefreshAccessToken != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#RefreshAccessToken mock enable")
		return r.cli.mock.mockAuthRefreshAccessToken(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "RefreshAccessToken",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/refresh_access_token",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedAppAccessToken:  true,
		NeedUserAccessToken: true,
	}
	resp := new(refreshAccessTokenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAuthRefreshAccessToken(f func(ctx context.Context, request *RefreshAccessTokenReq, options ...MethodOptionFunc) (*RefreshAccessTokenResp, *Response, error)) {
	r.mockAuthRefreshAccessToken = f
}

func (r *Mock) UnMockAuthRefreshAccessToken() {
	r.mockAuthRefreshAccessToken = nil
}

type RefreshAccessTokenReq struct {
	GrantType    string `json:"grant_type,omitempty"`    // 授权类型，本流程中，此值为："refresh_token", 示例值："refresh_token"
	RefreshToken string `json:"refresh_token,omitempty"` // 来自[获取登录用户身份](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token) 或 本接口返回值, 示例值："ur-t9HHgRCsMqGqIU9vw5Zhof"
}

type refreshAccessTokenResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *RefreshAccessTokenResp `json:"data,omitempty"`
}

type RefreshAccessTokenResp struct {
	AccessToken      string `json:"access_token,omitempty"`       // user_access_token，用于获取用户资源
	TokenType        string `json:"token_type,omitempty"`         // token 类型
	ExpiresIn        int64  `json:"expires_in,omitempty"`         // access_token 的有效期，单位: 秒
	Name             string `json:"name,omitempty"`               // 用户姓名
	EnName           string `json:"en_name,omitempty"`            // 用户英文名称
	AvatarURL        string `json:"avatar_url,omitempty"`         // 用户头像
	AvatarThumb      string `json:"avatar_thumb,omitempty"`       // 用户头像 72x72
	AvatarMiddle     string `json:"avatar_middle,omitempty"`      // 用户头像 240x240
	AvatarBig        string `json:"avatar_big,omitempty"`         // 用户头像 640x640
	OpenID           string `json:"open_id,omitempty"`            // 用户在应用内的唯一标识
	UnionID          string `json:"union_id,omitempty"`           // 用户统一ID
	Email            string `json:"email,omitempty"`              // 用户邮箱, 字段权限要求:  获取用户邮箱信息
	UserID           string `json:"user_id,omitempty"`            // 用户 user_id, 字段权限要求:  获取用户 user ID
	Mobile           string `json:"mobile,omitempty"`             // 用户手机号, 字段权限要求:  获取用户手机号
	TenantKey        string `json:"tenant_key,omitempty"`         // 当前企业标识
	RefreshExpiresIn int64  `json:"refresh_expires_in,omitempty"` // refresh_token 的有效期，单位: 秒
	RefreshToken     string `json:"refresh_token,omitempty"`      // 刷新用户 access_token 时使用的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ResendAppTicket 飞书每隔 1 小时会给应用推送一次最新的 app_ticket，应用也可以主动调用此接口，触发飞书进行及时的重新推送。（该接口并不能直接获取app_ticket，而是触发事件推送）
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/auth-v3/auth/app_ticket_resend
func (r *AuthService) ResendAppTicket(ctx context.Context, request *ResendAppTicketReq, options ...MethodOptionFunc) (*ResendAppTicketResp, *Response, error) {
	if r.cli.mock.mockAuthResendAppTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#ResendAppTicket mock enable")
		return r.cli.mock.mockAuthResendAppTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:        "Auth",
		API:          "ResendAppTicket",
		Method:       "POST",
		URL:          r.cli.openBaseURL + "/open-apis/auth/v3/app_ticket/resend",
		Body:         request,
		MethodOption: newMethodOption(options),
	}
	resp := new(resendAppTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAuthResendAppTicket(f func(ctx context.Context, request *ResendAppTicketReq, options ...MethodOptionFunc) (*ResendAppTicketResp, *Response, error)) {
	r.mockAuthResendAppTicket = f
}

func (r *Mock) UnMockAuthResendAppTicket() {
	r.mockAuthResendAppTicket = nil
}

type ResendAppTicketReq struct {
	AppID     string `json:"app_id,omitempty"`     // 应用唯一标识，创建应用后获得, 示例值："cli_slkdjalasdkjasd"
	AppSecret string `json:"app_secret,omitempty"` // 应用秘钥，创建应用后获得, 示例值："dskLLdkasdjlasdKK"
}

type resendAppTicketResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *ResendAppTicketResp `json:"data,omitempty"`
}

type ResendAppTicketResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUserInfo 通过 user_access_token 获取登录用户的信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/user_info
func (r *AuthService) GetUserInfo(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error) {
	if r.cli.mock.mockAuthGetUserInfo != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#GetUserInfo mock enable")
		return r.cli.mock.mockAuthGetUserInfo(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "GetUserInfo",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/user_info",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getUserInfoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAuthGetUserInfo(f func(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error)) {
	r.mockAuthGetUserInfo = f
}

func (r *Mock) UnMockAuthGetUserInfo() {
	r.mockAuthGetUserInfo = nil
}

type GetUserInfoReq struct{}

type getUserInfoResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetUserInfoResp `json:"data,omitempty"`
}

type GetUserInfoResp struct {
	Name         string `json:"name,omitempty"`          // 用户姓名
	EnName       string `json:"en_name,omitempty"`       // 用户英文名称
	AvatarURL    string `json:"avatar_url,omitempty"`    // 用户头像
	AvatarThumb  string `json:"avatar_thumb,omitempty"`  // 用户头像 72x72
	AvatarMiddle string `json:"avatar_middle,omitempty"` // 用户头像 240x240
	AvatarBig    string `json:"avatar_big,omitempty"`    // 用户头像 640x640
	OpenID       string `json:"open_id,omitempty"`       // 用户在应用内的唯一标识
	UnionID      string `json:"union_id,omitempty"`      // 用户对ISV的唯一标识，对于同一个ISV，用户在其名下所有应用的union_id相同
	Email        string `json:"email,omitempty"`         // 用户邮箱, 字段权限要求:  获取用户邮箱信息
	UserID       string `json:"user_id,omitempty"`       // 用户 user_id, 字段权限要求:  获取用户 user ID
	Mobile       string `json:"mobile,omitempty"`        // 用户手机号, 字段权限要求:  获取用户手机号
	TenantKey    string `json:"tenant_key,omitempty"`    // 当前企业标识
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBitableField 该接口用于在数据表中新增一个字段
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/create
func (r *BitableService) CreateBitableField(ctx context.Context, request *CreateBitableFieldReq, options ...MethodOptionFunc) (*CreateBitableFieldResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableField mock enable")
		return r.cli.mock.mockBitableCreateBitableField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableField",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockBitableCreateBitableField(f func(ctx context.Context, request *CreateBitableFieldReq, options ...MethodOptionFunc) (*CreateBitableFieldResp, *Response, error)) {
	r.mockBitableCreateBitableField = f
}

func (r *Mock) UnMockBitableCreateBitableField() {
	r.mockBitableCreateBitableField = nil
}

type CreateBitableFieldReq struct {
	UserIDType *IDType                        `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppToken   string                         `path:"app_token" json:"-"`     // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID    string                         `path:"table_id" json:"-"`      // table id, 示例值："tblsRc9GRRXKqhvW"
	FieldName  string                         `json:"field_name,omitempty"`   // 多维表格字段名, 示例值："多行文本"
	Type       int64                          `json:"type,omitempty"`         // 多维表格字段类型, 示例值：具体参考: [Property说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure#b286b4ee)
	Property   *CreateBitableFieldReqProperty `json:"property,omitempty"`     // 字段属性, 具体参考: [Property说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure#b286b4ee)
}

type CreateBitableFieldReqProperty struct {
	Options    []*CreateBitableFieldReqPropertyOption `json:"options,omitempty"`     // 单选/多选字段的选项信息
	Formatter  *string                                `json:"formatter,omitempty"`   // 数字字段的数字显示格式, 示例值："0"
	DateFormat *string                                `json:"date_format,omitempty"` // 日期格式, 示例值："yyyy/MM/dd"
	TimeFormat *string                                `json:"time_format,omitempty"` // 时间格式, 示例值："HH:mm"
	AutoFill   *bool                                  `json:"auto_fill,omitempty"`   // 是否自动填入创建时间, 示例值：false
	Multiple   *bool                                  `json:"multiple,omitempty"`    // 多选标记, 示例值：false
	TableID    *string                                `json:"table_id,omitempty"`    // 关联字段中关联表的id, 示例值："tblsRc9GRRXKqhvW"
	ViewID     *string                                `json:"view_id,omitempty"`     // 关联字段中关联表的视图id, 示例值："vewOVMEXPF"
	Fields     []string                               `json:"fields,omitempty"`      // 关联字段要展示的字段, 示例值：["fldSiTwIqy"]
}

type CreateBitableFieldReqPropertyOption struct {
	Name *string `json:"name,omitempty"` // 选项名, 示例值："红色"
	ID   *string `json:"id,omitempty"`   // 选项id, 示例值："optKl35lnG"
}

type createBitableFieldResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableFieldResp `json:"data,omitempty"`
}

type CreateBitableFieldResp struct {
	Field *CreateBitableFieldRespField `json:"field,omitempty"` // 字段
}

type CreateBitableFieldRespField struct {
	FieldID   string                               `json:"field_id,omitempty"`   // 多维表格字段 id
	FieldName string                               `json:"field_name,omitempty"` // 多维表格字段名
	Type      int64                                `json:"type,omitempty"`       // 多维表格字段类型
	Property  *CreateBitableFieldRespFieldProperty `json:"property,omitempty"`   // 字段属性, 具体参考: [Property说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure#b286b4ee)
}

type CreateBitableFieldRespFieldProperty struct {
	Options    []*CreateBitableFieldRespFieldPropertyOption `json:"options,omitempty"`     // 单选/多选字段的选项信息
	Formatter  string                                       `json:"formatter,omitempty"`   // 数字字段的数字显示格式
	DateFormat string                                       `json:"date_format,omitempty"` // 日期格式
	TimeFormat string                                       `json:"time_format,omitempty"` // 时间格式
	AutoFill   bool                                         `json:"auto_fill,omitempty"`   // 是否自动填入创建时间
	Multiple   bool                                         `json:"multiple,omitempty"`    // 多选标记
	TableID    string                                       `json:"table_id,omitempty"`    // 关联字段中关联表的id
	ViewID     string                                       `json:"view_id,omitempty"`     // 关联字段中关联表的视图id
	Fields     []string                                     `json:"fields,omitempty"`      // 关联字段要展示的字段
}

type CreateBitableFieldRespFieldPropertyOption struct {
	Name string `json:"name,omitempty"` // 选项名
	ID   string `json:"id,omitempty"`   // 选项id
}
