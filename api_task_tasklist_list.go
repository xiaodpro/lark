// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetTaskTasklistList 获取调用身份所有可读取的清单列表。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/list
func (r *TaskService) GetTaskTasklistList(ctx context.Context, request *GetTaskTasklistListReq, options ...MethodOptionFunc) (*GetTaskTasklistListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskTasklistList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#GetTaskTasklistList mock enable")
		return r.cli.mock.mockTaskGetTaskTasklistList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskTasklistList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/tasklists",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskTasklistListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskTasklistList mock TaskGetTaskTasklistList method
func (r *Mock) MockTaskGetTaskTasklistList(f func(ctx context.Context, request *GetTaskTasklistListReq, options ...MethodOptionFunc) (*GetTaskTasklistListResp, *Response, error)) {
	r.mockTaskGetTaskTasklistList = f
}

// UnMockTaskGetTaskTasklistList un-mock TaskGetTaskTasklistList method
func (r *Mock) UnMockTaskGetTaskTasklistList() {
	r.mockTaskGetTaskTasklistList = nil
}

// GetTaskTasklistListReq ...
type GetTaskTasklistListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 每页返回的清单数量, 示例值: 50, 默认值: `50`, 取值范围: `1` ～ `100`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: aWQ9NzEwMjMzMjMxMDE=
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 默认值: `open_id`
}

// GetTaskTasklistListResp ...
type GetTaskTasklistListResp struct {
	Items     []*GetTaskTasklistListRespItem `json:"items,omitempty"`      // 清单数据列表
	PageToken string                         `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskTasklistListRespItem ...
type GetTaskTasklistListRespItem struct {
	Guid      string                               `json:"guid,omitempty"`       // 清单的全局唯一ID
	Name      string                               `json:"name,omitempty"`       // 清单名
	Creator   *GetTaskTasklistListRespItemCreator  `json:"creator,omitempty"`    // 清单创建者
	Owner     *GetTaskTasklistListRespItemOwner    `json:"owner,omitempty"`      // 清单负责人
	Members   []*GetTaskTasklistListRespItemMember `json:"members,omitempty"`    // 清单协作成员列表
	URL       string                               `json:"url,omitempty"`        // 该清单分享的applink
	CreatedAt string                               `json:"created_at,omitempty"` // 清单创建时间戳(ms)
	UpdatedAt string                               `json:"updated_at,omitempty"` // 清单最后一次更新时间戳（ms)
}

// GetTaskTasklistListRespItemCreator ...
type GetTaskTasklistListRespItemCreator struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员类型
	Role string `json:"role,omitempty"` // 清单角色
}

// GetTaskTasklistListRespItemMember ...
type GetTaskTasklistListRespItemMember struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// GetTaskTasklistListRespItemOwner ...
type GetTaskTasklistListRespItemOwner struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员类型
	Role string `json:"role,omitempty"` // 成员角色
}

// getTaskTasklistListResp ...
type getTaskTasklistListResp struct {
	Code  int64                    `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                   `json:"msg,omitempty"`  // 错误描述
	Data  *GetTaskTasklistListResp `json:"data,omitempty"`
	Error *ErrorDetail             `json:"error,omitempty"`
}
