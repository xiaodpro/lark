// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetTaskTaskListOfSection 列取一个自定义分组里的所有任务。支持分页。任务按照自定义排序的顺序返回。本接口支持简单的过滤。
//
// 需要自定义分组所在资源的读取权限。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/section/tasks
func (r *TaskService) GetTaskTaskListOfSection(ctx context.Context, request *GetTaskTaskListOfSectionReq, options ...MethodOptionFunc) (*GetTaskTaskListOfSectionResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskTaskListOfSection != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#GetTaskTaskListOfSection mock enable")
		return r.cli.mock.mockTaskGetTaskTaskListOfSection(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskTaskListOfSection",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/sections/:section_guid/tasks",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskTaskListOfSectionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskTaskListOfSection mock TaskGetTaskTaskListOfSection method
func (r *Mock) MockTaskGetTaskTaskListOfSection(f func(ctx context.Context, request *GetTaskTaskListOfSectionReq, options ...MethodOptionFunc) (*GetTaskTaskListOfSectionResp, *Response, error)) {
	r.mockTaskGetTaskTaskListOfSection = f
}

// UnMockTaskGetTaskTaskListOfSection un-mock TaskGetTaskTaskListOfSection method
func (r *Mock) UnMockTaskGetTaskTaskListOfSection() {
	r.mockTaskGetTaskTaskListOfSection = nil
}

// GetTaskTaskListOfSectionReq ...
type GetTaskTaskListOfSectionReq struct {
	SectionGuid string  `path:"section_guid" json:"-"`  // 要获取任务的自定义分组全局唯一ID, 示例值: "9842501a-9f47-4ff5-a622-d319eeecb97f"
	PageSize    *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 50, 默认值: `50`, 取值范围: `1` ～ `100`
	PageToken   *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: aWQ9NzEwMjMzMjMxMDE=
	Completed   *bool   `query:"completed" json:"-"`    // 按照任务状态过滤, 如果不填写则表示不按完成状态过滤, 示例值: true
	CreatedFrom *string `query:"created_from" json:"-"` // 按照创建时间筛选的起始时间戳（ms), 如不填写则为首个任务的创建时刻, 示例值: 1675742789470, 最大长度: `30` 字符
	CreatedTo   *string `query:"created_to" json:"-"`   // 按照创建时间筛选的起始时间戳（ms), 如不填写则为最后任务的创建时刻, 示例值: 1675742789470, 最大长度: `30` 字符
}

// GetTaskTaskListOfSectionResp ...
type GetTaskTaskListOfSectionResp struct {
	Items     []*GetTaskTaskListOfSectionRespItem `json:"items,omitempty"`      // 任务摘要信息
	PageToken string                              `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                                `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskTaskListOfSectionRespItem ...
type GetTaskTaskListOfSectionRespItem struct {
	Guid         string                                    `json:"guid,omitempty"`          // 任务GUID
	Summary      string                                    `json:"summary,omitempty"`       // 任务标题
	CompletedAt  string                                    `json:"completed_at,omitempty"`  // 任务完成的时间戳(ms), 为0表示未完成
	Start        *GetTaskTaskListOfSectionRespItemStart    `json:"start,omitempty"`         // 任务开始时间
	Due          *GetTaskTaskListOfSectionRespItemDue      `json:"due,omitempty"`           // 任务截止时间
	Members      []*GetTaskTaskListOfSectionRespItemMember `json:"members,omitempty"`       // 任务成员列表
	SubtaskCount int64                                     `json:"subtask_count,omitempty"` // 子任务的个数
}

// GetTaskTaskListOfSectionRespItemDue ...
type GetTaskTaskListOfSectionRespItemDue struct {
	Timestamp string `json:"timestamp,omitempty"`  // 截止时间/日期的时间戳, 距1970-01-01 00:00:00的毫秒数。如果截止时间是一个日期, 需要把日期转换成时间戳, 并设置 is_all_day=true
	IsAllDay  bool   `json:"is_all_day,omitempty"` // 是否截止到一个日期。如果设为true, timestamp中只有日期的部分会被解析和存储。
}

// GetTaskTaskListOfSectionRespItemMember ...
type GetTaskTaskListOfSectionRespItemMember struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// GetTaskTaskListOfSectionRespItemStart ...
type GetTaskTaskListOfSectionRespItemStart struct {
	Timestamp string `json:"timestamp,omitempty"`  // 开始时间/日期的时间戳, 距1970-01-01 00:00:00的毫秒数。如果开始时间是一个日期, 需要把日期转换成时间戳, 并设置 is_all_day=true
	IsAllDay  bool   `json:"is_all_day,omitempty"` // 是否开始于一个日期。如果设为true, timestamp中只有日期的部分会被解析和存储。
}

// getTaskTaskListOfSectionResp ...
type getTaskTaskListOfSectionResp struct {
	Code  int64                         `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                        `json:"msg,omitempty"`  // 错误描述
	Data  *GetTaskTaskListOfSectionResp `json:"data,omitempty"`
	Error *ErrorDetail                  `json:"error,omitempty"`
}
