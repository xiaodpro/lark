// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateAppFeedCard 应用消息流卡片是飞书为应用提供的消息触达能力, 让应用可以直接在消息流发送消息, 重要消息能更快触达用户。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/group/im-v2/app_feed_card/create
func (r *MessageService) CreateAppFeedCard(ctx context.Context, request *CreateAppFeedCardReq, options ...MethodOptionFunc) (*CreateAppFeedCardResp, *Response, error) {
	if r.cli.mock.mockMessageCreateAppFeedCard != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Message#CreateAppFeedCard mock enable")
		return r.cli.mock.mockMessageCreateAppFeedCard(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "CreateAppFeedCard",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v2/app_feed_card",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAppFeedCardResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageCreateAppFeedCard mock MessageCreateAppFeedCard method
func (r *Mock) MockMessageCreateAppFeedCard(f func(ctx context.Context, request *CreateAppFeedCardReq, options ...MethodOptionFunc) (*CreateAppFeedCardResp, *Response, error)) {
	r.mockMessageCreateAppFeedCard = f
}

// UnMockMessageCreateAppFeedCard un-mock MessageCreateAppFeedCard method
func (r *Mock) UnMockMessageCreateAppFeedCard() {
	r.mockMessageCreateAppFeedCard = nil
}

// CreateAppFeedCardReq ...
type CreateAppFeedCardReq struct {
	UserIDType  *IDType                          `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppFeedCard *CreateAppFeedCardReqAppFeedCard `json:"app_feed_card,omitempty"` // 应用消息卡片
	UserIDs     []string                         `json:"user_ids,omitempty"`      // 用户 ID, 示例值: ["ou_a0553eda9014c201e6969b478895c230"], 长度范围: `1` ～ `20`
}

// CreateAppFeedCardReqAppFeedCard ...
type CreateAppFeedCardReqAppFeedCard struct {
	BizID         *string                                     `json:"biz_id,omitempty"`         // 业务 ID, 示例值: "096e2927-40a6-41a3-9562-314d641d09ae", 长度范围: `0` ～ `200` 字符
	Title         *string                                     `json:"title,omitempty"`          // 主标题, 示例值: "主标题", 长度范围: `0` ～ `60` 字符
	AvatarKey     *string                                     `json:"avatar_key,omitempty"`     // 头像 key, 示例值: "v3_0041_007bca9f-67ba-4199-bf00-4031b12cf226", 长度范围: `0` ～ `100` 字符
	Preview       *string                                     `json:"preview,omitempty"`        // 预览信息, 示例值: "预览信息", 长度范围: `0` ～ `120` 字符
	StatusLabel   *CreateAppFeedCardReqAppFeedCardStatusLabel `json:"status_label,omitempty"`   // 状态标签
	Buttons       *CreateAppFeedCardReqAppFeedCardButtons     `json:"buttons,omitempty"`        // 交互按钮
	Link          *CreateAppFeedCardReqAppFeedCardLink        `json:"link,omitempty"`           // 跳转链接（创建时该参数为必填参数）
	TimeSensitive *bool                                       `json:"time_sensitive,omitempty"` // 即时提醒状态, true-打开, false-关闭, 示例值: false, 默认值: `false`
	Notify        *CreateAppFeedCardReqAppFeedCardNotify      `json:"notify,omitempty"`         // 通知设置, 当前可设置通知是否关闭, 为空时默认进行通知
}

// CreateAppFeedCardReqAppFeedCardButtons ...
type CreateAppFeedCardReqAppFeedCardButtons struct {
	Buttons []*CreateAppFeedCardReqAppFeedCardButtonsButton `json:"buttons,omitempty"` // 按钮组合, 长度范围: `0` ～ `2`
}

// CreateAppFeedCardReqAppFeedCardButtonsButton ...
type CreateAppFeedCardReqAppFeedCardButtonsButton struct {
	MultiURL   *CreateAppFeedCardReqAppFeedCardButtonsButtonMultiURL `json:"multi_url,omitempty"`   // 跳转 URL
	ActionType string                                                `json:"action_type,omitempty"` // 交互类型, 示例值: "url_page", 可选值有: url_page: URL 页面, webhook: 回调
	Text       *CreateAppFeedCardReqAppFeedCardButtonsButtonText     `json:"text,omitempty"`        // 文字
	ButtonType *string                                               `json:"button_type,omitempty"` // 按钮类型, 示例值: "default", 可选值有: default: 默认, primary: 主要, success: 成功, 默认值: `default`
	ActionMap  map[string]string                                     `json:"action_map,omitempty"`  // action 字典, 示例值: {"foo": "bar"}
}

// CreateAppFeedCardReqAppFeedCardButtonsButtonMultiURL ...
type CreateAppFeedCardReqAppFeedCardButtonsButtonMultiURL struct {
	URL        *string `json:"url,omitempty"`         // 默认 URL, 示例值: "https://www.feishu.cn/", 最大长度: `700` 字符
	AndroidURL *string `json:"android_url,omitempty"` // Android 平台 URL, 示例值: "https://www.feishu.cn/", 最大长度: `700` 字符
	IosURL     *string `json:"ios_url,omitempty"`     // iOS 平台 URL, 示例值: "https://www.feishu.cn/", 最大长度: `700` 字符
	PcURL      *string `json:"pc_url,omitempty"`      // PC URL, 示例值: "https://www.feishu.cn/", 最大长度: `700` 字符
}

// CreateAppFeedCardReqAppFeedCardButtonsButtonText ...
type CreateAppFeedCardReqAppFeedCardButtonsButtonText struct {
	Text string `json:"text,omitempty"` // 文本, 示例值: "文本", 长度范围: `1` ～ `30` 字符
}

// CreateAppFeedCardReqAppFeedCardLink ...
type CreateAppFeedCardReqAppFeedCardLink struct {
	Link *string `json:"link,omitempty"` // 链接, 示例值: "https://www.feishu.cn/", 最大长度: `700` 字符
}

// CreateAppFeedCardReqAppFeedCardNotify ...
type CreateAppFeedCardReqAppFeedCardNotify struct {
	CloseNotify     *bool   `json:"close_notify,omitempty"`      // 是否关闭通知, 示例值: true, 默认值: `false`
	CustomSoundText *string `json:"custom_sound_text,omitempty"` // 自定义语音播报文本内容, 示例值: "您有新的订单", 最大长度: `20` 字符
	WithCustomSound *bool   `json:"with_custom_sound,omitempty"` // 是否播报自定义语音, 示例值: true, 默认值: `false`
}

// CreateAppFeedCardReqAppFeedCardStatusLabel ...
type CreateAppFeedCardReqAppFeedCardStatusLabel struct {
	Text string `json:"text,omitempty"` // 标签文字, 示例值: "标签文字", 长度范围: `1` ～ `20` 字符
	Type string `json:"type,omitempty"` // 标签类型, 示例值: "primary", 可选值有: primary: 主类型, secondary: 次要类型, success: 成功类型, danger: 危险类型, 默认值: `primary`
}

// CreateAppFeedCardResp ...
type CreateAppFeedCardResp struct {
	FailedCards []*CreateAppFeedCardRespFailedCard `json:"failed_cards,omitempty"` // 失败的卡片
	BizID       string                             `json:"biz_id,omitempty"`       // 卡片业务 ID
}

// CreateAppFeedCardRespFailedCard ...
type CreateAppFeedCardRespFailedCard struct {
	BizID  string `json:"biz_id,omitempty"`  // 业务 ID
	UserID string `json:"user_id,omitempty"` // 用户 ID
	Reason string `json:"reason,omitempty"`  // 原因, 可选值有: 0: 未知, 1: 无权限, 2: 未创建, 3: 频率限制, 4: 重复
}

// createAppFeedCardResp ...
type createAppFeedCardResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *CreateAppFeedCardResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
