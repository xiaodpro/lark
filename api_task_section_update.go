// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateTaskSection 更新自定义分组, 可以更新自定义分组的名称和位置。
//
// 更新时, 将`update_fields`字段中填写所有要修改的字段名, 同时在`section`字段中填写要修改的字段的新值即可。调用约定详情见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 关于资源的更新”章节。
// 目前支持更新的字段包括:
// * `name` - 自定义字段名字;
// * `insert_before` - 要让当前自定义分组放到某个自定义分组前面的secion_guid, 用于改变当前自定义分组的位置;
// * `insert_after` - 要让当前自定义分组放到某个自定义分组后面的secion_guid, 用于改变当前自定义分组的位置。
// `insert_before`和`insert_after`如果填写, 必须是同一个资源的合法section_guid。注意不能同时设置`insert_before`和`insert_after`。
// 需要自定义分组所在资源的编辑权限。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/section/patch
func (r *TaskService) UpdateTaskSection(ctx context.Context, request *UpdateTaskSectionReq, options ...MethodOptionFunc) (*UpdateTaskSectionResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTaskSection != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#UpdateTaskSection mock enable")
		return r.cli.mock.mockTaskUpdateTaskSection(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTaskSection",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/sections/:section_guid",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateTaskSectionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskUpdateTaskSection mock TaskUpdateTaskSection method
func (r *Mock) MockTaskUpdateTaskSection(f func(ctx context.Context, request *UpdateTaskSectionReq, options ...MethodOptionFunc) (*UpdateTaskSectionResp, *Response, error)) {
	r.mockTaskUpdateTaskSection = f
}

// UnMockTaskUpdateTaskSection un-mock TaskUpdateTaskSection method
func (r *Mock) UnMockTaskUpdateTaskSection() {
	r.mockTaskUpdateTaskSection = nil
}

// UpdateTaskSectionReq ...
type UpdateTaskSectionReq struct {
	SectionGuid  string                       `path:"section_guid" json:"-"`   // 要更新的自定义分组GUID, 示例值: "9842501a-9f47-4ff5-a622-d319eeecb97f", 最大长度: `100` 字符
	UserIDType   *IDType                      `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值: open_id, 默认值: `open_id`
	Section      *UpdateTaskSectionReqSection `json:"section,omitempty"`       // 要更新的自定义分组的数据。
	UpdateFields []string                     `json:"update_fields,omitempty"` // 要更新的字段名, 支持: * `name` - 自定义字段名字, * `insert_before` - 要让当前自定义分组放到某个自定义分组前面的secion_guid, 用于改变当前自定义分组的位置, * `insert_after` - 要让当前自定义分组放到某个自定义分组后面的secion_guid, 用于改变当前自定义分组的位置, 示例值: ["name"], 长度范围: `1` ～ `10`
}

// UpdateTaskSectionReqSection ...
type UpdateTaskSectionReqSection struct {
	Name         *string `json:"name,omitempty"`          // 自定义分组名。如更新, 不允许设为空, 支持最大100个utf8字符, 示例值: "已经审核过的任务"
	InsertBefore *string `json:"insert_before,omitempty"` // 要将新分组插入到自定义分分组的前面的目标分组的guid, 示例值: "e6e37dcc-f75a-5936-f589-12fb4b5c80c2", 最大长度: `100` 字符
	InsertAfter  *string `json:"insert_after,omitempty"`  // 要将新分组插入到自定义分分组的后面的目标分组的guid, 示例值: "e6e37dcc-f75a-5936-f589-12fb4b5c80c2", 最大长度: `100` 字符
}

// UpdateTaskSectionResp ...
type UpdateTaskSectionResp struct {
	Section *UpdateTaskSectionRespSection `json:"section,omitempty"` // 更新后的自定义分组
}

// UpdateTaskSectionRespSection ...
type UpdateTaskSectionRespSection struct {
	Guid         string                                `json:"guid,omitempty"`          // 自定义分组的guid
	Name         string                                `json:"name,omitempty"`          // 自定义分组的名字
	ResourceType string                                `json:"resource_type,omitempty"` // 资源类型
	IsDefault    bool                                  `json:"is_default,omitempty"`    // 分组是否为默认自定义分组
	Creator      *UpdateTaskSectionRespSectionCreator  `json:"creator,omitempty"`       // 自定义分组的创建者
	Tasklist     *UpdateTaskSectionRespSectionTasklist `json:"tasklist,omitempty"`      // 如果该分组归属于清单, 展示清单的简要信息
	CreatedAt    string                                `json:"created_at,omitempty"`    // 自定义分组创建时间戳(ms)
	UpdatedAt    string                                `json:"updated_at,omitempty"`    // 自定义分组最近一次更新时间戳(ms)
}

// UpdateTaskSectionRespSectionCreator ...
type UpdateTaskSectionRespSectionCreator struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// UpdateTaskSectionRespSectionTasklist ...
type UpdateTaskSectionRespSectionTasklist struct {
	Guid string `json:"guid,omitempty"` // 清单的全局唯一ID
	Name string `json:"name,omitempty"` // 清单名字
}

// updateTaskSectionResp ...
type updateTaskSectionResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateTaskSectionResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
