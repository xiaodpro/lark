// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteTaskCollaborator 该接口用于删除任务执行者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/delete
func (r *TaskService) DeleteTaskCollaborator(ctx context.Context, request *DeleteTaskCollaboratorReq, options ...MethodOptionFunc) (*DeleteTaskCollaboratorResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskCollaborator != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskCollaborator mock enable")
		return r.cli.mock.mockTaskDeleteTaskCollaborator(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskCollaborator",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/collaborators/:collaborator_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskCollaboratorResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskDeleteTaskCollaborator(f func(ctx context.Context, request *DeleteTaskCollaboratorReq, options ...MethodOptionFunc) (*DeleteTaskCollaboratorResp, *Response, error)) {
	r.mockTaskDeleteTaskCollaborator = f
}

func (r *Mock) UnMockTaskDeleteTaskCollaborator() {
	r.mockTaskDeleteTaskCollaborator = nil
}

type DeleteTaskCollaboratorReq struct {
	TaskID         string `path:"task_id" json:"-"`         // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CollaboratorID string `path:"collaborator_id" json:"-"` // 任务协作者 ID（Open ID）, 示例值："ou_99e1a581b36ecc4862cbfbce123f346a"
}

type deleteTaskCollaboratorResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskCollaboratorResp `json:"data,omitempty"`
}

type DeleteTaskCollaboratorResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskCollaboratorList 该接口用于查询任务执行者列表，支持分页，最大值为50
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/list
func (r *TaskService) GetTaskCollaboratorList(ctx context.Context, request *GetTaskCollaboratorListReq, options ...MethodOptionFunc) (*GetTaskCollaboratorListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskCollaboratorList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskCollaboratorList mock enable")
		return r.cli.mock.mockTaskGetTaskCollaboratorList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskCollaboratorList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/collaborators",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskCollaboratorListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskGetTaskCollaboratorList(f func(ctx context.Context, request *GetTaskCollaboratorListReq, options ...MethodOptionFunc) (*GetTaskCollaboratorListResp, *Response, error)) {
	r.mockTaskGetTaskCollaboratorList = f
}

func (r *Mock) UnMockTaskGetTaskCollaboratorList() {
	r.mockTaskGetTaskCollaboratorList = nil
}

type GetTaskCollaboratorListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：50, 最大值：`50`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："「上次返回的page_token」"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："0d38e26e-190a-49e9-93a2-35067763ed1f"
}

type getTaskCollaboratorListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskCollaboratorListResp `json:"data,omitempty"`
}

type GetTaskCollaboratorListResp struct {
	Items     []*GetTaskCollaboratorListRespItem `json:"items,omitempty"`      // 返回的协作者列表
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
}

type GetTaskCollaboratorListRespItem struct {
	ID string `json:"id,omitempty"` // 任务协作者的 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTaskComment 该接口用于创建和回复任务的评论。当parent_id字段为0时，为创建评论；当parent_id不为0时，为回复某条评论
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/create
func (r *TaskService) CreateTaskComment(ctx context.Context, request *CreateTaskCommentReq, options ...MethodOptionFunc) (*CreateTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTaskComment mock enable")
		return r.cli.mock.mockTaskCreateTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTaskComment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskCreateTaskComment(f func(ctx context.Context, request *CreateTaskCommentReq, options ...MethodOptionFunc) (*CreateTaskCommentResp, *Response, error)) {
	r.mockTaskCreateTaskComment = f
}

func (r *Mock) UnMockTaskCreateTaskComment() {
	r.mockTaskCreateTaskComment = nil
}

type CreateTaskCommentReq struct {
	TaskID   string  `path:"task_id" json:"-"`    // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	Content  *string `json:"content,omitempty"`   // 评论内容, 示例值："举杯邀明月，对影成三人", 长度范围：`0` ～ `65536` 字符
	ParentID *string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复, 示例值："6937231762296684564"
	ID       *string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号, 示例值："6937231762296684564"
}

type createTaskCommentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskCommentResp `json:"data,omitempty"`
}

type CreateTaskCommentResp struct {
	Comment *CreateTaskCommentRespComment `json:"comment,omitempty"` // 返回创建好的任务评论
}

type CreateTaskCommentRespComment struct {
	Content  string `json:"content,omitempty"`   // 评论内容
	ParentID string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复
	ID       string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTaskComment 该接口用于通过评论ID删除评论
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/delete
func (r *TaskService) DeleteTaskComment(ctx context.Context, request *DeleteTaskCommentReq, options ...MethodOptionFunc) (*DeleteTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskComment mock enable")
		return r.cli.mock.mockTaskDeleteTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskComment",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskDeleteTaskComment(f func(ctx context.Context, request *DeleteTaskCommentReq, options ...MethodOptionFunc) (*DeleteTaskCommentResp, *Response, error)) {
	r.mockTaskDeleteTaskComment = f
}

func (r *Mock) UnMockTaskDeleteTaskComment() {
	r.mockTaskDeleteTaskComment = nil
}

type DeleteTaskCommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论ID, 示例值："6937231762296684564"
}

type deleteTaskCommentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskCommentResp `json:"data,omitempty"`
}

type DeleteTaskCommentResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskComment 该接口用于通过评论ID获取评论详情
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/get
func (r *TaskService) GetTaskComment(ctx context.Context, request *GetTaskCommentReq, options ...MethodOptionFunc) (*GetTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskComment mock enable")
		return r.cli.mock.mockTaskGetTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskComment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskGetTaskComment(f func(ctx context.Context, request *GetTaskCommentReq, options ...MethodOptionFunc) (*GetTaskCommentResp, *Response, error)) {
	r.mockTaskGetTaskComment = f
}

func (r *Mock) UnMockTaskGetTaskComment() {
	r.mockTaskGetTaskComment = nil
}

type GetTaskCommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论ID, 示例值："6937231762296684564"
}

type getTaskCommentResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskCommentResp `json:"data,omitempty"`
}

type GetTaskCommentResp struct {
	Comment *GetTaskCommentRespComment `json:"comment,omitempty"` // 返回新的任务评论详情
}

type GetTaskCommentRespComment struct {
	Content  string `json:"content,omitempty"`   // 评论内容
	ParentID string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复
	ID       string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateTaskComment 该接口用于更新评论内容
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/update
func (r *TaskService) UpdateTaskComment(ctx context.Context, request *UpdateTaskCommentReq, options ...MethodOptionFunc) (*UpdateTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#UpdateTaskComment mock enable")
		return r.cli.mock.mockTaskUpdateTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTaskComment",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskUpdateTaskComment(f func(ctx context.Context, request *UpdateTaskCommentReq, options ...MethodOptionFunc) (*UpdateTaskCommentResp, *Response, error)) {
	r.mockTaskUpdateTaskComment = f
}

func (r *Mock) UnMockTaskUpdateTaskComment() {
	r.mockTaskUpdateTaskComment = nil
}

type UpdateTaskCommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论 ID, 示例值："6937231762296684564"
	Content   string `json:"content,omitempty"`   // 新的评论内容, 示例值："飞流直下三千尺，疑是银河落九天"
}

type updateTaskCommentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateTaskCommentResp `json:"data,omitempty"`
}

type UpdateTaskCommentResp struct {
	Comment *UpdateTaskCommentRespComment `json:"comment,omitempty"` // 返回修改后的任务评论详情
}

type UpdateTaskCommentRespComment struct {
	Content  string `json:"content,omitempty"`   // 评论内容
	ParentID string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复
	ID       string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTaskFollower 该接口用于创建任务关注者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/create
func (r *TaskService) CreateTaskFollower(ctx context.Context, request *CreateTaskFollowerReq, options ...MethodOptionFunc) (*CreateTaskFollowerResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTaskFollower != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTaskFollower mock enable")
		return r.cli.mock.mockTaskCreateTaskFollower(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTaskFollower",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/followers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskFollowerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskCreateTaskFollower(f func(ctx context.Context, request *CreateTaskFollowerReq, options ...MethodOptionFunc) (*CreateTaskFollowerResp, *Response, error)) {
	r.mockTaskCreateTaskFollower = f
}

func (r *Mock) UnMockTaskCreateTaskFollower() {
	r.mockTaskCreateTaskFollower = nil
}

type CreateTaskFollowerReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	ID         string  `json:"id,omitempty"`           // 任务关注者 ID, 示例值："ou_99e1a581b36ecc4862cbfbce473f3123"
}

type createTaskFollowerResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskFollowerResp `json:"data,omitempty"`
}

type CreateTaskFollowerResp struct {
	Follower *CreateTaskFollowerRespFollower `json:"follower,omitempty"` // 创建后的任务关注者
}

type CreateTaskFollowerRespFollower struct {
	ID string `json:"id,omitempty"` // 任务关注者 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTaskFollower 该接口用于删除任务关注者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/delete
func (r *TaskService) DeleteTaskFollower(ctx context.Context, request *DeleteTaskFollowerReq, options ...MethodOptionFunc) (*DeleteTaskFollowerResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskFollower != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskFollower mock enable")
		return r.cli.mock.mockTaskDeleteTaskFollower(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskFollower",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/followers/:follower_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskFollowerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskDeleteTaskFollower(f func(ctx context.Context, request *DeleteTaskFollowerReq, options ...MethodOptionFunc) (*DeleteTaskFollowerResp, *Response, error)) {
	r.mockTaskDeleteTaskFollower = f
}

func (r *Mock) UnMockTaskDeleteTaskFollower() {
	r.mockTaskDeleteTaskFollower = nil
}

type DeleteTaskFollowerReq struct {
	TaskID     string `path:"task_id" json:"-"`     // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	FollowerID string `path:"follower_id" json:"-"` // 任务关注者 ID（Open ID）, 示例值："ou_87e1a581b36ecc4862cbfbce473f346a"
}

type deleteTaskFollowerResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskFollowerResp `json:"data,omitempty"`
}

type DeleteTaskFollowerResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskFollowerList 该接口用于查询任务关注者列表，支持分页，最大值为50
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/list
func (r *TaskService) GetTaskFollowerList(ctx context.Context, request *GetTaskFollowerListReq, options ...MethodOptionFunc) (*GetTaskFollowerListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskFollowerList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskFollowerList mock enable")
		return r.cli.mock.mockTaskGetTaskFollowerList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskFollowerList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/followers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskFollowerListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskGetTaskFollowerList(f func(ctx context.Context, request *GetTaskFollowerListReq, options ...MethodOptionFunc) (*GetTaskFollowerListResp, *Response, error)) {
	r.mockTaskGetTaskFollowerList = f
}

func (r *Mock) UnMockTaskGetTaskFollowerList() {
	r.mockTaskGetTaskFollowerList = nil
}

type GetTaskFollowerListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`50`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："「上次返回的page_token」"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："0d38e26e-190a-49e9-93a2-35067763ed1f"
}

type getTaskFollowerListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskFollowerListResp `json:"data,omitempty"`
}

type GetTaskFollowerListResp struct {
	Items     []*GetTaskFollowerListRespItem `json:"items,omitempty"`      // 返回的关注者列表
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

type GetTaskFollowerListRespItem struct {
	ID string `json:"id,omitempty"` // 任务关注者 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTaskReminder 该接口用于创建任务的提醒时间
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/create
func (r *TaskService) CreateTaskReminder(ctx context.Context, request *CreateTaskReminderReq, options ...MethodOptionFunc) (*CreateTaskReminderResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTaskReminder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTaskReminder mock enable")
		return r.cli.mock.mockTaskCreateTaskReminder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTaskReminder",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/reminders",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskReminderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskCreateTaskReminder(f func(ctx context.Context, request *CreateTaskReminderReq, options ...MethodOptionFunc) (*CreateTaskReminderResp, *Response, error)) {
	r.mockTaskCreateTaskReminder = f
}

func (r *Mock) UnMockTaskCreateTaskReminder() {
	r.mockTaskCreateTaskReminder = nil
}

type CreateTaskReminderReq struct {
	TaskID             string `path:"task_id" json:"-"`               // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	RelativeFireMinute int64  `json:"relative_fire_minute,omitempty"` // 相对于截止时间的提醒时间（如提前 30 分钟，截止时间后 30 分钟，则为 -30）, 示例值：30
}

type createTaskReminderResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskReminderResp `json:"data,omitempty"`
}

type CreateTaskReminderResp struct {
	Reminder *CreateTaskReminderRespReminder `json:"reminder,omitempty"` // 返回创建成功的提醒时间
}

type CreateTaskReminderRespReminder struct {
	ID                 string `json:"id,omitempty"`                   // 提醒时间设置的 ID（在删除时候需要使用这个）
	RelativeFireMinute int64  `json:"relative_fire_minute,omitempty"` // 相对于截止时间的提醒时间（如提前 30 分钟，截止时间后 30 分钟，则为 -30）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTaskReminder 删除提醒时间，返回结果状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/delete
func (r *TaskService) DeleteTaskReminder(ctx context.Context, request *DeleteTaskReminderReq, options ...MethodOptionFunc) (*DeleteTaskReminderResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskReminder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskReminder mock enable")
		return r.cli.mock.mockTaskDeleteTaskReminder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskReminder",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/reminders/:reminder_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskReminderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskDeleteTaskReminder(f func(ctx context.Context, request *DeleteTaskReminderReq, options ...MethodOptionFunc) (*DeleteTaskReminderResp, *Response, error)) {
	r.mockTaskDeleteTaskReminder = f
}

func (r *Mock) UnMockTaskDeleteTaskReminder() {
	r.mockTaskDeleteTaskReminder = nil
}

type DeleteTaskReminderReq struct {
	TaskID     string `path:"task_id" json:"-"`     // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	ReminderID string `path:"reminder_id" json:"-"` // 任务提醒时间设置的 ID（即 reminder.id）, 示例值："1"
}

type deleteTaskReminderResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskReminderResp `json:"data,omitempty"`
}

type DeleteTaskReminderResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskReminderList 返回提醒时间列表，支持分页，最大值为50
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/list
func (r *TaskService) GetTaskReminderList(ctx context.Context, request *GetTaskReminderListReq, options ...MethodOptionFunc) (*GetTaskReminderListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskReminderList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskReminderList mock enable")
		return r.cli.mock.mockTaskGetTaskReminderList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskReminderList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/reminders",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskReminderListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskGetTaskReminderList(f func(ctx context.Context, request *GetTaskReminderListReq, options ...MethodOptionFunc) (*GetTaskReminderListResp, *Response, error)) {
	r.mockTaskGetTaskReminderList = f
}

func (r *Mock) UnMockTaskGetTaskReminderList() {
	r.mockTaskGetTaskReminderList = nil
}

type GetTaskReminderListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：50, 最大值：`50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："「填写上次返回的page_token」"
	TaskID    string  `path:"task_id" json:"-"`     // 任务 ID, 示例值："0d38e26e-190a-49e9-93a2-35067763ed1f"
}

type getTaskReminderListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskReminderListResp `json:"data,omitempty"`
}

type GetTaskReminderListResp struct {
	Items     []*GetTaskReminderListRespItem `json:"items,omitempty"`      // 返回提醒时间设置列表
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

type GetTaskReminderListRespItem struct {
	ID                 string `json:"id,omitempty"`                   // 提醒时间设置的 ID（在删除时候需要使用这个）
	RelativeFireMinute int64  `json:"relative_fire_minute,omitempty"` // 相对于截止时间的提醒时间（如提前 30 分钟，截止时间后 30 分钟，则为 -30）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTask 该接口用于获取任务详情，包括任务标题、描述、时间、来源等信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/get
func (r *TaskService) GetTask(ctx context.Context, request *GetTaskReq, options ...MethodOptionFunc) (*GetTaskResp, *Response, error) {
	if r.cli.mock.mockTaskGetTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTask mock enable")
		return r.cli.mock.mockTaskGetTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskGetTask(f func(ctx context.Context, request *GetTaskReq, options ...MethodOptionFunc) (*GetTaskResp, *Response, error)) {
	r.mockTaskGetTask = f
}

func (r *Mock) UnMockTaskGetTask() {
	r.mockTaskGetTask = nil
}

type GetTaskReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
}

type getTaskResp struct {
	Code int64        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string       `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskResp `json:"data,omitempty"`
}

type GetTaskResp struct {
	Task *GetTaskRespTask `json:"task,omitempty"` // 返回任务资源详情
}

type GetTaskRespTask struct {
	ID           string                 `json:"id,omitempty"`            // 任务 ID，由飞书任务服务器发号
	Summary      string                 `json:"summary,omitempty"`       // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务
	Description  string                 `json:"description,omitempty"`   // 任务备注
	CompleteTime string                 `json:"complete_time,omitempty"` // 任务的完成时间戳（单位为秒），如果完成时间为 0，则表示任务尚未完成
	CreatorID    string                 `json:"creator_id,omitempty"`    // 任务的创建者 ID。在创建任务时无需填充该字段
	Extra        string                 `json:"extra,omitempty"`         // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定
	CreateTime   string                 `json:"create_time,omitempty"`   // 任务的创建时间戳（单位为秒）
	UpdateTime   string                 `json:"update_time,omitempty"`   // 任务的更新时间戳（单位为秒）
	Due          *GetTaskRespTaskDue    `json:"due,omitempty"`           // 任务的截止时间设置
	Origin       *GetTaskRespTaskOrigin `json:"origin,omitempty"`        // 任务关联的第三方平台来源信息
	CanEdit      bool                   `json:"can_edit,omitempty"`      // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息
	Custom       string                 `json:"custom,omitempty"`        // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递
}

type GetTaskRespTaskDue struct {
	Time     string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）
	Timezone string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai
	IsAllDay bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）
}

type GetTaskRespTaskOrigin struct {
	PlatformI18nName string                     `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn
	Href             *GetTaskRespTaskOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

type GetTaskRespTaskOriginHref struct {
	URL   string `json:"url,omitempty"`   // 具体链接地址
	Title string `json:"title,omitempty"` // 链接对应的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CompleteTask 该接口用于将接任务状态修改为已完成
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/complete
func (r *TaskService) CompleteTask(ctx context.Context, request *CompleteTaskReq, options ...MethodOptionFunc) (*CompleteTaskResp, *Response, error) {
	if r.cli.mock.mockTaskCompleteTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CompleteTask mock enable")
		return r.cli.mock.mockTaskCompleteTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CompleteTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/complete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(completeTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskCompleteTask(f func(ctx context.Context, request *CompleteTaskReq, options ...MethodOptionFunc) (*CompleteTaskResp, *Response, error)) {
	r.mockTaskCompleteTask = f
}

func (r *Mock) UnMockTaskCompleteTask() {
	r.mockTaskCompleteTask = nil
}

type CompleteTaskReq struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值："bb54ab99-d360-434f-bcaa-a4cc4c05840e"
}

type completeTaskResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *CompleteTaskResp `json:"data,omitempty"`
}

type CompleteTaskResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTask 该接口可以创建一个任务（基本信息），如果需要绑定协作者等需要调用别的资源管理接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/create
func (r *TaskService) CreateTask(ctx context.Context, request *CreateTaskReq, options ...MethodOptionFunc) (*CreateTaskResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTask mock enable")
		return r.cli.mock.mockTaskCreateTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskCreateTask(f func(ctx context.Context, request *CreateTaskReq, options ...MethodOptionFunc) (*CreateTaskResp, *Response, error)) {
	r.mockTaskCreateTask = f
}

func (r *Mock) UnMockTaskCreateTask() {
	r.mockTaskCreateTask = nil
}

type CreateTaskReq struct {
	UserIDType  *IDType              `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	Summary     *string              `json:"summary,omitempty"`      // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务, 示例值："每天喝八杯水，保持身心愉悦", 长度范围：`1` ～ `256` 字符
	Description *string              `json:"description,omitempty"`  // 任务备注, 示例值："多吃水果，多运动，健康生活，快乐工作。", 长度范围：`0` ～ `65536` 字符
	Extra       *string              `json:"extra,omitempty"`        // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定, 示例值："dGVzdA==", 长度范围：`0` ～ `65536` 字符
	Due         *CreateTaskReqDue    `json:"due,omitempty"`          // 任务的截止时间设置
	Origin      *CreateTaskReqOrigin `json:"origin,omitempty"`       // 任务关联的第三方平台来源信息
	CanEdit     *bool                `json:"can_edit,omitempty"`     // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息, 示例值：true, 默认值: `false`
	Custom      *string              `json:"custom,omitempty"`       // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递, 示例值："{\"custom_complete\":{\"android\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"ios\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"pc\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}}}}", 长度范围：`0` ～ `65536` 字符
}

type CreateTaskReqDue struct {
	Time     *string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）, 示例值："1623124318"
	Timezone *string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai, 示例值："Asia/Shanghai", 默认值: `Asia/Shanghai`
	IsAllDay *bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）, 示例值：false, 默认值: `false`
}

type CreateTaskReqOrigin struct {
	PlatformI18nName string                   `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn, 示例值："{\"zh_cn\": \"IT 工作台\", \"en_us\": \"IT Workspace\"}", 长度范围：`0` ～ `1024` 字符
	Href             *CreateTaskReqOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

type CreateTaskReqOriginHref struct {
	URL   *string `json:"url,omitempty"`   // 具体链接地址, 示例值："https://support.feishu.com/internal/foo-bar", 长度范围：`0` ～ `1024` 字符
	Title *string `json:"title,omitempty"` // 链接对应的标题, 示例值："反馈一个问题，需要协助排查", 长度范围：`0` ～ `512` 字符
}

type createTaskResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskResp `json:"data,omitempty"`
}

type CreateTaskResp struct {
	Task *CreateTaskRespTask `json:"task,omitempty"` // 返回创建好的任务
}

type CreateTaskRespTask struct {
	ID           string                    `json:"id,omitempty"`            // 任务 ID，由飞书任务服务器发号
	Summary      string                    `json:"summary,omitempty"`       // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务
	Description  string                    `json:"description,omitempty"`   // 任务备注
	CompleteTime string                    `json:"complete_time,omitempty"` // 任务的完成时间戳（单位为秒），如果完成时间为 0，则表示任务尚未完成
	CreatorID    string                    `json:"creator_id,omitempty"`    // 任务的创建者 ID。在创建任务时无需填充该字段
	Extra        string                    `json:"extra,omitempty"`         // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定
	CreateTime   string                    `json:"create_time,omitempty"`   // 任务的创建时间戳（单位为秒）
	UpdateTime   string                    `json:"update_time,omitempty"`   // 任务的更新时间戳（单位为秒）
	Due          *CreateTaskRespTaskDue    `json:"due,omitempty"`           // 任务的截止时间设置
	Origin       *CreateTaskRespTaskOrigin `json:"origin,omitempty"`        // 任务关联的第三方平台来源信息
	CanEdit      bool                      `json:"can_edit,omitempty"`      // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息
	Custom       string                    `json:"custom,omitempty"`        // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递
}

type CreateTaskRespTaskDue struct {
	Time     string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）
	Timezone string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai
	IsAllDay bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）
}

type CreateTaskRespTaskOrigin struct {
	PlatformI18nName string                        `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn
	Href             *CreateTaskRespTaskOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

type CreateTaskRespTaskOriginHref struct {
	URL   string `json:"url,omitempty"`   // 具体链接地址
	Title string `json:"title,omitempty"` // 链接对应的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTask 该接口用于删除任务
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/delete
func (r *TaskService) DeleteTask(ctx context.Context, request *DeleteTaskReq, options ...MethodOptionFunc) (*DeleteTaskResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTask mock enable")
		return r.cli.mock.mockTaskDeleteTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTask",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskDeleteTask(f func(ctx context.Context, request *DeleteTaskReq, options ...MethodOptionFunc) (*DeleteTaskResp, *Response, error)) {
	r.mockTaskDeleteTask = f
}

func (r *Mock) UnMockTaskDeleteTask() {
	r.mockTaskDeleteTask = nil
}

type DeleteTaskReq struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
}

type deleteTaskResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskResp `json:"data,omitempty"`
}

type DeleteTaskResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UncompleteTask 该接口用于取消任务的已完成状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/uncomplete
func (r *TaskService) UncompleteTask(ctx context.Context, request *UncompleteTaskReq, options ...MethodOptionFunc) (*UncompleteTaskResp, *Response, error) {
	if r.cli.mock.mockTaskUncompleteTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#UncompleteTask mock enable")
		return r.cli.mock.mockTaskUncompleteTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UncompleteTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/uncomplete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(uncompleteTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskUncompleteTask(f func(ctx context.Context, request *UncompleteTaskReq, options ...MethodOptionFunc) (*UncompleteTaskResp, *Response, error)) {
	r.mockTaskUncompleteTask = f
}

func (r *Mock) UnMockTaskUncompleteTask() {
	r.mockTaskUncompleteTask = nil
}

type UncompleteTaskReq struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值："bb54ab99-d360-434f-bcaa-a4cc4c05840e"
}

type uncompleteTaskResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *UncompleteTaskResp `json:"data,omitempty"`
}

type UncompleteTaskResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateTask 该接口用于修改任务的标题、描述、时间、来源等相关信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/patch
func (r *TaskService) UpdateTask(ctx context.Context, request *UpdateTaskReq, options ...MethodOptionFunc) (*UpdateTaskResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#UpdateTask mock enable")
		return r.cli.mock.mockTaskUpdateTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTask",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTaskUpdateTask(f func(ctx context.Context, request *UpdateTaskReq, options ...MethodOptionFunc) (*UpdateTaskResp, *Response, error)) {
	r.mockTaskUpdateTask = f
}

func (r *Mock) UnMockTaskUpdateTask() {
	r.mockTaskUpdateTask = nil
}

type UpdateTaskReq struct {
	UserIDType   *IDType            `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	TaskID       string             `path:"task_id" json:"-"`        // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	Task         *UpdateTaskReqTask `json:"task,omitempty"`          // 被更新的任务实体基础信息
	UpdateFields []string           `json:"update_fields,omitempty"` // 指定需要更新的字段（目前可选更新的字段为：summary, description, due, extra），否则服务端将不知道更新哪些字段, 示例值：["summary"]
}

type UpdateTaskReqTask struct {
	Summary     *string                  `json:"summary,omitempty"`     // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务, 示例值："每天喝八杯水，保持身心愉悦", 长度范围：`1` ～ `256` 字符
	Description *string                  `json:"description,omitempty"` // 任务备注, 示例值："多吃水果，多运动，健康生活，快乐工作。", 长度范围：`0` ～ `65536` 字符
	Extra       *string                  `json:"extra,omitempty"`       // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定, 示例值："dGVzdA==", 长度范围：`0` ～ `65536` 字符
	Due         *UpdateTaskReqTaskDue    `json:"due,omitempty"`         // 任务的截止时间设置
	Origin      *UpdateTaskReqTaskOrigin `json:"origin,omitempty"`      // 任务关联的第三方平台来源信息
	CanEdit     *bool                    `json:"can_edit,omitempty"`    // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息, 示例值：true, 默认值: `false`
	Custom      *string                  `json:"custom,omitempty"`      // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递, 示例值："{\"custom_complete\":{\"android\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"ios\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"pc\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}}}}", 长度范围：`0` ～ `65536` 字符
}

type UpdateTaskReqTaskDue struct {
	Time     *string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）, 示例值："1623124318"
	Timezone *string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai, 示例值："Asia/Shanghai", 默认值: `Asia/Shanghai`
	IsAllDay *bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）, 示例值：false, 默认值: `false`
}

type UpdateTaskReqTaskOrigin struct {
	PlatformI18nName string                       `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn, 示例值："{\"zh_cn\": \"IT 工作台\", \"en_us\": \"IT Workspace\"}", 长度范围：`0` ～ `1024` 字符
	Href             *UpdateTaskReqTaskOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

type UpdateTaskReqTaskOriginHref struct {
	URL   *string `json:"url,omitempty"`   // 具体链接地址, 示例值："https://support.feishu.com/internal/foo-bar", 长度范围：`0` ～ `1024` 字符
	Title *string `json:"title,omitempty"` // 链接对应的标题, 示例值："反馈一个问题，需要协助排查", 长度范围：`0` ～ `512` 字符
}

type updateTaskResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *UpdateTaskResp `json:"data,omitempty"`
}

type UpdateTaskResp struct {
	Task *UpdateTaskRespTask `json:"task,omitempty"` // 返回修改后的任务详情
}

type UpdateTaskRespTask struct {
	ID           string                    `json:"id,omitempty"`            // 任务 ID，由飞书任务服务器发号
	Summary      string                    `json:"summary,omitempty"`       // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务
	Description  string                    `json:"description,omitempty"`   // 任务备注
	CompleteTime string                    `json:"complete_time,omitempty"` // 任务的完成时间戳（单位为秒），如果完成时间为 0，则表示任务尚未完成
	CreatorID    string                    `json:"creator_id,omitempty"`    // 任务的创建者 ID。在创建任务时无需填充该字段
	Extra        string                    `json:"extra,omitempty"`         // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定
	CreateTime   string                    `json:"create_time,omitempty"`   // 任务的创建时间戳（单位为秒）
	UpdateTime   string                    `json:"update_time,omitempty"`   // 任务的更新时间戳（单位为秒）
	Due          *UpdateTaskRespTaskDue    `json:"due,omitempty"`           // 任务的截止时间设置
	Origin       *UpdateTaskRespTaskOrigin `json:"origin,omitempty"`        // 任务关联的第三方平台来源信息
	CanEdit      bool                      `json:"can_edit,omitempty"`      // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息
	Custom       string                    `json:"custom,omitempty"`        // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递
}

type UpdateTaskRespTaskDue struct {
	Time     string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）
	Timezone string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai
	IsAllDay bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）
}

type UpdateTaskRespTaskOrigin struct {
	PlatformI18nName string                        `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn
	Href             *UpdateTaskRespTaskOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

type UpdateTaskRespTaskOriginHref struct {
	URL   string `json:"url,omitempty"`   // 具体链接地址
	Title string `json:"title,omitempty"` // 链接对应的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTenant 获取企业名称、企业编号等企业信息
//
// 如果ISV应用是预装的并且180天内企业未使用过此应用，则无法通过此接口获取到企业信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/tenant-v2/tenant/query
func (r *TenantService) GetTenant(ctx context.Context, request *GetTenantReq, options ...MethodOptionFunc) (*GetTenantResp, *Response, error) {
	if r.cli.mock.mockTenantGetTenant != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Tenant#GetTenant mock enable")
		return r.cli.mock.mockTenantGetTenant(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Tenant",
		API:                   "GetTenant",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/tenant/v2/tenant/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTenantResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockTenantGetTenant(f func(ctx context.Context, request *GetTenantReq, options ...MethodOptionFunc) (*GetTenantResp, *Response, error)) {
	r.mockTenantGetTenant = f
}

func (r *Mock) UnMockTenantGetTenant() {
	r.mockTenantGetTenant = nil
}

type GetTenantReq struct{}

type getTenantResp struct {
	Code int64          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string         `json:"msg,omitempty"`  // 错误描述
	Data *GetTenantResp `json:"data,omitempty"`
}

type GetTenantResp struct {
	Tenant *GetTenantRespTenant `json:"tenant,omitempty"` // 企业信息
}

type GetTenantRespTenant struct {
	Name      string                     `json:"name,omitempty"`       // 企业名称
	DisplayID string                     `json:"display_id,omitempty"` // 企业编号
	TenantTag int64                      `json:"tenant_tag,omitempty"` // 个人版/团队版标志, 可选值有: `0`：团队版, `2`：个人版
	TenantKey string                     `json:"tenant_key,omitempty"` // 企业标识
	Avatar    *GetTenantRespTenantAvatar `json:"avatar,omitempty"`     // 企业头像
}

type GetTenantRespTenantAvatar struct {
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 企业头像
	Avatar72     string `json:"avatar_72,omitempty"`     // 企业头像 72x72
	Avatar240    string `json:"avatar_240,omitempty"`    // 企业头像 240x240
	Avatar640    string `json:"avatar_640,omitempty"`    // 企业头像 640x640
}
