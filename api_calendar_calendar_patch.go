// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateCalendar 调用该接口以当前身份（应用或用户）修改指定日历的标题、描述、公开范围等信息。
//
// - 当前身份由 Header Authorization 的 Token 类型决定。tenant_access_token 指应用身份, user_access_token 指用户身份。
// - 如果使用应用身份调用该接口, 则需要确保应用开启了[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。
// - 如果当前身份具有日历的 owner 访问权限, 则可以更新日历的所有属性（包括全局生效的 summary、description、permission 和仅对当前身份生效的 color、summary_alias）。
// - 如果当前身份不具有日历的 owner 访问权限, 则只能更新对当前身份生效的 color、summary_alias。你可以调用[查询日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口, 查看当前身份对日历的访问权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/patch
// new doc: https://open.feishu.cn/document/server-docs/calendar-v4/calendar/patch
func (r *CalendarService) UpdateCalendar(ctx context.Context, request *UpdateCalendarReq, options ...MethodOptionFunc) (*UpdateCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarUpdateCalendar != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Calendar#UpdateCalendar mock enable")
		return r.cli.mock.mockCalendarUpdateCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "UpdateCalendar",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarUpdateCalendar mock CalendarUpdateCalendar method
func (r *Mock) MockCalendarUpdateCalendar(f func(ctx context.Context, request *UpdateCalendarReq, options ...MethodOptionFunc) (*UpdateCalendarResp, *Response, error)) {
	r.mockCalendarUpdateCalendar = f
}

// UnMockCalendarUpdateCalendar un-mock CalendarUpdateCalendar method
func (r *Mock) UnMockCalendarUpdateCalendar() {
	r.mockCalendarUpdateCalendar = nil
}

// UpdateCalendarReq ...
type UpdateCalendarReq struct {
	CalendarID   string              `path:"calendar_id" json:"-"`    // 日历 ID, 创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID, [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary), [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list), [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search), 示例值: "feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	Summary      *string             `json:"summary,omitempty"`       // 日历标题, 默认值: 空, 表示不更新该字段, 示例值: "测试日历", 长度范围: `1` ～ `255` 字符
	Description  *string             `json:"description,omitempty"`   // 日历描述, 默认值: 空, 表示不更新该字段, 示例值: "使用开放接口创建日历", 最大长度: `255` 字符
	Permissions  *CalendarPermission `json:"permissions,omitempty"`   // 日历公开范围, 默认值: 空, 表示不更新该字段, 示例值: "private", 可选值有: private: 私密, show_only_free_busy: 仅展示忙闲信息, public: 公开, 他人可查看日程详情
	Color        *int64              `json:"color,omitempty"`         // 日历颜色, 取值通过颜色 RGB 值的 int32 表示, 其中, 24 ~ 31 位为透明度, 16 ~ 23 位为红, 8 ~ 15 位为绿, 0 ~ 7 位为蓝。例如, 11034625 表示 RGB 值 (87, 159, 255), 注意: 日历颜色会映射到飞书客户端色板上最接近的一种颜色进行展示, 该颜色仅对当前身份生效, 默认值: 空, 表示不更新该字段, 示例值:1
	SummaryAlias *string             `json:"summary_alias,omitempty"` // 日历备注名, 设置该字段后（包括后续修改该字段）仅对当前身份生效, 默认值: 空, 表示不更新该字段, 示例值: "日历备注名", 最大长度: `255` 字符
}

// UpdateCalendarResp ...
type UpdateCalendarResp struct {
	Calendar *UpdateCalendarRespCalendar `json:"calendar,omitempty"` // 更新后的日历实体信息。
}

// UpdateCalendarRespCalendar ...
type UpdateCalendarRespCalendar struct {
	CalendarID   string             `json:"calendar_id,omitempty"`    // 日历 ID。后续可以通过该 ID 查询、更新或删除日历信息。更多信息参见[日历 ID 字段说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。
	Summary      string             `json:"summary,omitempty"`        // 日历标题。
	Description  string             `json:"description,omitempty"`    // 日历描述。
	Permissions  CalendarPermission `json:"permissions,omitempty"`    // 日历公开范围, 可选值有: private: 私密, show_only_free_busy: 仅展示忙闲信息, public: 公开, 他人可查看日程详情
	Color        int64              `json:"color,omitempty"`          // 日历颜色, 由颜色 RGB 值的 int32 表示。实际在客户端展示时会映射到色板上最接近的一种颜色, 且该字段仅对当前身份生效。
	Type         CalendarType       `json:"type,omitempty"`           // 日历类型, 可选值有: unknown: 未知类型, primary: 用户或应用的主日历, shared: 由用户或应用创建的共享日历, google: 用户绑定的谷歌日历, resource: 会议室日历, exchange: 用户绑定的 Exchange 日历
	SummaryAlias string             `json:"summary_alias,omitempty"`  // 日历备注名, 仅对当前身份生效。
	IsDeleted    bool               `json:"is_deleted,omitempty"`     // 对于当前身份, 日历是否已经被标记为删除。
	IsThirdParty bool               `json:"is_third_party,omitempty"` // 当前日历是否是第三方数据。三方日历及日程只支持读, 不支持写入。
	Role         CalendarRole       `json:"role,omitempty"`           // 当前身份对于该日历的访问权限, 可选值有: unknown: 未知权限, free_busy_reader: 游客, 只能看到忙碌、空闲信息, reader: 订阅者, 可查看所有日程详情, writer: 编辑者, 可创建及修改日程, owner: 管理员, 可管理日历及共享设置
}

// updateCalendarResp ...
type updateCalendarResp struct {
	Code  int64               `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string              `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateCalendarResp `json:"data,omitempty"`
	Error *ErrorDetail        `json:"error,omitempty"`
}
