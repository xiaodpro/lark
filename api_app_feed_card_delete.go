// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteAppFeedCard 该接口用于删除应用消息流卡片
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/group/im-v2/app_feed_card-batch/delete
func (r *MessageService) DeleteAppFeedCard(ctx context.Context, request *DeleteAppFeedCardReq, options ...MethodOptionFunc) (*DeleteAppFeedCardResp, *Response, error) {
	if r.cli.mock.mockMessageDeleteAppFeedCard != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Message#DeleteAppFeedCard mock enable")
		return r.cli.mock.mockMessageDeleteAppFeedCard(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "DeleteAppFeedCard",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v2/app_feed_card/batch",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteAppFeedCardResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageDeleteAppFeedCard mock MessageDeleteAppFeedCard method
func (r *Mock) MockMessageDeleteAppFeedCard(f func(ctx context.Context, request *DeleteAppFeedCardReq, options ...MethodOptionFunc) (*DeleteAppFeedCardResp, *Response, error)) {
	r.mockMessageDeleteAppFeedCard = f
}

// UnMockMessageDeleteAppFeedCard un-mock MessageDeleteAppFeedCard method
func (r *Mock) UnMockMessageDeleteAppFeedCard() {
	r.mockMessageDeleteAppFeedCard = nil
}

// DeleteAppFeedCardReq ...
type DeleteAppFeedCardReq struct {
	UserIDType *IDType                         `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	FeedCards  []*DeleteAppFeedCardReqFeedCard `json:"feed_cards,omitempty"`   // 应用消息卡片, 长度范围: `1` ～ `20`
}

// DeleteAppFeedCardReqFeedCard ...
type DeleteAppFeedCardReqFeedCard struct {
	BizID  string `json:"biz_id,omitempty"`  // 业务 ID, 示例值: "ed381d34-49ac-4876-8d9e-23447acb587e"
	UserID string `json:"user_id,omitempty"` // 用户 ID, 示例值: "ou_88553eda9014c201e6969b478895c223"
}

// DeleteAppFeedCardResp ...
type DeleteAppFeedCardResp struct {
	FailedCards []*DeleteAppFeedCardRespFailedCard `json:"failed_cards,omitempty"` // 失败的卡片
}

// DeleteAppFeedCardRespFailedCard ...
type DeleteAppFeedCardRespFailedCard struct {
	BizID  string `json:"biz_id,omitempty"`  // 业务 ID
	UserID string `json:"user_id,omitempty"` // 用户 ID
	Reason string `json:"reason,omitempty"`  // 原因, 可选值有: 0: 未知, 1: 无权限, 2: 未创建, 3: 频率限制, 4: 重复
}

// deleteAppFeedCardResp ...
type deleteAppFeedCardResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *DeleteAppFeedCardResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
