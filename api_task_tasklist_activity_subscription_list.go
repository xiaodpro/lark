// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetTaskTasklistActivitySubscriptionList 给定一个清单的GUID, 获取其所有的订阅信息。结果按照订阅的创建时间排序。
//
// 列取动态订阅需要清单的读取权限。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/list
func (r *TaskService) GetTaskTasklistActivitySubscriptionList(ctx context.Context, request *GetTaskTasklistActivitySubscriptionListReq, options ...MethodOptionFunc) (*GetTaskTasklistActivitySubscriptionListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskTasklistActivitySubscriptionList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#GetTaskTasklistActivitySubscriptionList mock enable")
		return r.cli.mock.mockTaskGetTaskTasklistActivitySubscriptionList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskTasklistActivitySubscriptionList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/tasklists/:tasklist_guid/activity_subscriptions",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskTasklistActivitySubscriptionListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskTasklistActivitySubscriptionList mock TaskGetTaskTasklistActivitySubscriptionList method
func (r *Mock) MockTaskGetTaskTasklistActivitySubscriptionList(f func(ctx context.Context, request *GetTaskTasklistActivitySubscriptionListReq, options ...MethodOptionFunc) (*GetTaskTasklistActivitySubscriptionListResp, *Response, error)) {
	r.mockTaskGetTaskTasklistActivitySubscriptionList = f
}

// UnMockTaskGetTaskTasklistActivitySubscriptionList un-mock TaskGetTaskTasklistActivitySubscriptionList method
func (r *Mock) UnMockTaskGetTaskTasklistActivitySubscriptionList() {
	r.mockTaskGetTaskTasklistActivitySubscriptionList = nil
}

// GetTaskTasklistActivitySubscriptionListReq ...
type GetTaskTasklistActivitySubscriptionListReq struct {
	TasklistGuid string  `path:"tasklist_guid" json:"-"` // 清单GUID。可以通过[创建清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/create), 或者通过[获取清单列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/list)接口查询得到, 示例值: "d19e3a2a-edc0-4e4e-b7cc-950e162b53ae"
	Limit        *int64  `query:"limit" json:"-"`        // 返回结果的最大数量, 示例值: 50, 默认值: `50`, 取值范围: `1` ～ `50`
	UserIDType   *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetTaskTasklistActivitySubscriptionListResp ...
type GetTaskTasklistActivitySubscriptionListResp struct {
	Items []*GetTaskTasklistActivitySubscriptionListRespItem `json:"items,omitempty"` // 清单的动态订阅数据
}

// GetTaskTasklistActivitySubscriptionListRespItem ...
type GetTaskTasklistActivitySubscriptionListRespItem struct {
	Guid        string                                                       `json:"guid,omitempty"`         // 订阅guid
	Name        string                                                       `json:"name,omitempty"`         // 订阅名称
	Subscribers []*GetTaskTasklistActivitySubscriptionListRespItemSubscriber `json:"subscribers,omitempty"`  // 订阅者
	IncludeKeys []int64                                                      `json:"include_keys,omitempty"` // 要订阅的清单动态类型
	Disabled    bool                                                         `json:"disabled,omitempty"`     // 该订阅是否为停用
}

// GetTaskTasklistActivitySubscriptionListRespItemSubscriber ...
type GetTaskTasklistActivitySubscriptionListRespItemSubscriber struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// getTaskTasklistActivitySubscriptionListResp ...
type getTaskTasklistActivitySubscriptionListResp struct {
	Code  int64                                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                                       `json:"msg,omitempty"`  // 错误描述
	Data  *GetTaskTasklistActivitySubscriptionListResp `json:"data,omitempty"`
	Error *ErrorDetail                                 `json:"error,omitempty"`
}
