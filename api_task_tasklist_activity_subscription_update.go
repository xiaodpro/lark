// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateTaskTasklistActivitySubscription 提供一个清单的GUID和一个动态订阅的GUID, 对其进行更新。更新时, 将`update_fields`字段中填写所有要修改的字段名, 同时在`activity_subscription`字段中填写要修改的字段的新值即可。
//
// `update_fields`支持更新的字段包括:
// * name: 订阅的名称
// * subscribers: 订阅者列表。如更新, 会将旧的订阅者列表完全替换为新的订阅者列表。支持最大50个订阅者。并且订阅者必须是chat类型。
// * include_keys : 订阅需要发送通知的key。如更新, 会将旧的列表完全替换为新的include_keys列表。只能设置支持的event key (见字段描述）。
// * disabled: 修改订阅的开启/禁用状态。
// 如要更新订阅, 需要调用身份拥有该清单的编辑权限。
// 如更新了订阅者列表, 调用身份（用户或应用机器人）必须是被添加为订阅群的群成员。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/patch
func (r *TaskService) UpdateTaskTasklistActivitySubscription(ctx context.Context, request *UpdateTaskTasklistActivitySubscriptionReq, options ...MethodOptionFunc) (*UpdateTaskTasklistActivitySubscriptionResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTaskTasklistActivitySubscription != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#UpdateTaskTasklistActivitySubscription mock enable")
		return r.cli.mock.mockTaskUpdateTaskTasklistActivitySubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTaskTasklistActivitySubscription",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/tasklists/:tasklist_guid/activity_subscriptions/:activity_subscription_guid",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateTaskTasklistActivitySubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskUpdateTaskTasklistActivitySubscription mock TaskUpdateTaskTasklistActivitySubscription method
func (r *Mock) MockTaskUpdateTaskTasklistActivitySubscription(f func(ctx context.Context, request *UpdateTaskTasklistActivitySubscriptionReq, options ...MethodOptionFunc) (*UpdateTaskTasklistActivitySubscriptionResp, *Response, error)) {
	r.mockTaskUpdateTaskTasklistActivitySubscription = f
}

// UnMockTaskUpdateTaskTasklistActivitySubscription un-mock TaskUpdateTaskTasklistActivitySubscription method
func (r *Mock) UnMockTaskUpdateTaskTasklistActivitySubscription() {
	r.mockTaskUpdateTaskTasklistActivitySubscription = nil
}

// UpdateTaskTasklistActivitySubscriptionReq ...
type UpdateTaskTasklistActivitySubscriptionReq struct {
	TasklistGuid             string                                                         `path:"tasklist_guid" json:"-"`              // 清单GUID。可以通过[创建清单](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/create), 或者通过[获取清单列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/list)接口查询得到, 示例值: "33991879-704f-444f-81d7-55a6aa7be80c"
	ActivitySubscriptionGuid string                                                         `path:"activity_subscription_guid" json:"-"` // 要更新的动态订阅GUID。可以通过[创建动态订阅](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/create)接口创建, 或者通过[列取动态订阅](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist-activity_subscription/list)查询得到, 示例值: "f5ca6747-5ac3-422e-a97e-972c1b2c24f3"
	UserIDType               *IDType                                                        `query:"user_id_type" json:"-"`              // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ActivitySubscription     *UpdateTaskTasklistActivitySubscriptionReqActivitySubscription `json:"activity_subscription,omitempty"`     // 要更新的订阅数据
	UpdateFields             []string                                                       `json:"update_fields,omitempty"`             // 要更新的字段列表, 示例值: ["name"], 可选值有: name: 订阅名称, include_keys: 订阅的事件类型列表, subscribers: 订阅成员列表, disabled: 是否禁用该订阅, 长度范围: `1` ～ `20`
}

// UpdateTaskTasklistActivitySubscriptionReqActivitySubscription ...
type UpdateTaskTasklistActivitySubscriptionReqActivitySubscription struct {
	Name        *string                                                                    `json:"name,omitempty"`         // 订阅名称, 如更新, 不能为空, 最大支持50个字符, 示例值: "Roadmap订阅"
	Subscribers []*UpdateTaskTasklistActivitySubscriptionReqActivitySubscriptionSubscriber `json:"subscribers,omitempty"`  // 订阅者列表。如更新, 最大支持50个订阅者, 最大长度: `50`
	IncludeKeys []int64                                                                    `json:"include_keys,omitempty"` // 要订阅的清单动态event key列表。每个event key用一个数字表示。目前支持下列event key: 100: 任务添加入清单, 101: 任务从清单被移除, 103: 任务被完成, 104: 任务恢复为未完成, 109: 任务添加了负责人, 110: 任务更新了负责人, 111: 任务移除了负责人, 119: 任务添加了附件, 121: 任务中添加了新评论, 122: 任务中对评论进行回复, 129: 任务设置了新的开始时间, 130: 任务设置了新的截止时间, 131: 任务同时设置了新的开始/截止时间, 132: 任务同时移除了开始/截止时间, 该字段可以设置为空数组（即不对任何event进行通知）；输入的`include_keys`的元素不能重复, 示例值: [101]
	Disabled    *bool                                                                      `json:"disabled,omitempty"`     // 该订阅是否为停用, 示例值: false
}

// UpdateTaskTasklistActivitySubscriptionReqActivitySubscriptionSubscriber ...
type UpdateTaskTasklistActivitySubscriptionReqActivitySubscriptionSubscriber struct {
	ID   *string `json:"id,omitempty"`   // 表示member的id, 示例值: "oc_2cefb2f014f8d0c6c2d2eb7bafb0e54f", 最大长度: `100` 字符
	Type *string `json:"type,omitempty"` // 成员的类型。目前只支持群组, 示例值: "chat", 默认值: `user`
}

// UpdateTaskTasklistActivitySubscriptionResp ...
type UpdateTaskTasklistActivitySubscriptionResp struct {
	ActivitySubscription *UpdateTaskTasklistActivitySubscriptionRespActivitySubscription `json:"activity_subscription,omitempty"` // 更新后的订阅
}

// UpdateTaskTasklistActivitySubscriptionRespActivitySubscription ...
type UpdateTaskTasklistActivitySubscriptionRespActivitySubscription struct {
	Guid        string                                                                      `json:"guid,omitempty"`         // 订阅guid
	Name        string                                                                      `json:"name,omitempty"`         // 订阅名称
	Subscribers []*UpdateTaskTasklistActivitySubscriptionRespActivitySubscriptionSubscriber `json:"subscribers,omitempty"`  // 订阅者
	IncludeKeys []int64                                                                     `json:"include_keys,omitempty"` // 要订阅的清单动态类型
	Disabled    bool                                                                        `json:"disabled,omitempty"`     // 该订阅是否为停用
}

// UpdateTaskTasklistActivitySubscriptionRespActivitySubscriptionSubscriber ...
type UpdateTaskTasklistActivitySubscriptionRespActivitySubscriptionSubscriber struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// updateTaskTasklistActivitySubscriptionResp ...
type updateTaskTasklistActivitySubscriptionResp struct {
	Code  int64                                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                                      `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateTaskTasklistActivitySubscriptionResp `json:"data,omitempty"`
	Error *ErrorDetail                                `json:"error,omitempty"`
}
