// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// QueryCoreHRCompensationArchive 批量查询员工薪资档案
//
// 该接口会按照应用拥有的「薪资档案资源」的权限范围返回数据, 请确定在「开发者后台 - 权限管理 - 数据权限」中已申请「薪资档案资源」权限范围
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/archive/query
func (r *CoreHRService) QueryCoreHRCompensationArchive(ctx context.Context, request *QueryCoreHRCompensationArchiveReq, options ...MethodOptionFunc) (*QueryCoreHRCompensationArchiveResp, *Response, error) {
	if r.cli.mock.mockCoreHRQueryCoreHRCompensationArchive != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] CoreHR#QueryCoreHRCompensationArchive mock enable")
		return r.cli.mock.mockCoreHRQueryCoreHRCompensationArchive(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHR",
		API:                   "QueryCoreHRCompensationArchive",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/compensation/v1/archives/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(queryCoreHRCompensationArchiveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHRQueryCoreHRCompensationArchive mock CoreHRQueryCoreHRCompensationArchive method
func (r *Mock) MockCoreHRQueryCoreHRCompensationArchive(f func(ctx context.Context, request *QueryCoreHRCompensationArchiveReq, options ...MethodOptionFunc) (*QueryCoreHRCompensationArchiveResp, *Response, error)) {
	r.mockCoreHRQueryCoreHRCompensationArchive = f
}

// UnMockCoreHRQueryCoreHRCompensationArchive un-mock CoreHRQueryCoreHRCompensationArchive method
func (r *Mock) UnMockCoreHRQueryCoreHRCompensationArchive() {
	r.mockCoreHRQueryCoreHRCompensationArchive = nil
}

// QueryCoreHRCompensationArchiveReq ...
type QueryCoreHRCompensationArchiveReq struct {
	PageSize           int64    `query:"page_size" json:"-"`            // 分页大小, 示例值: 100, 默认值: `100`, 取值范围: `1` ～ `500`
	PageToken          *string  `query:"page_token" json:"-"`           // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: 231432433
	UserIDType         IDType   `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserIDList         []string `json:"user_id_list,omitempty"`         // 用户ID列表, 示例值: ["7117649868058789407"], 长度范围: `1` ～ `100`
	EffectiveStartDate *string  `json:"effective_start_date,omitempty"` // 生效开始时间, 示例值: "2022-05-10"
	EffectiveEndDate   *string  `json:"effective_end_date,omitempty"`   // 生效结束时间, 示例值: "2023-05-15"
}

// QueryCoreHRCompensationArchiveResp ...
type QueryCoreHRCompensationArchiveResp struct {
	Items     []*QueryCoreHRCompensationArchiveRespItem `json:"items,omitempty"`      // 档案信息列表
	PageToken string                                    `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                                      `json:"has_more,omitempty"`   // 是否还有更多项
}

// QueryCoreHRCompensationArchiveRespItem ...
type QueryCoreHRCompensationArchiveRespItem struct {
	UserID            string                                                    `json:"user_id,omitempty"`            // 员工ID
	ID                string                                                    `json:"id,omitempty"`                 // 员工薪资档案ID
	Tid               string                                                    `json:"tid,omitempty"`                // 员工薪资档案版本ID, 薪资档案唯一标识
	PlanID            string                                                    `json:"plan_id,omitempty"`            // 关联薪资方案ID, 详细信息可以通过[批量查询薪资方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)接口查询获得, 字段权限要求: 获取薪资档案的关联方案
	PlanTid           string                                                    `json:"plan_tid,omitempty"`           // 关联薪资方案版本ID, 薪资方案唯一标识, 详细信息可以通过[批量查询薪资方案](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/plan/list)接口查询获得, 字段权限要求: 获取薪资档案的关联方案
	CurrencyID        string                                                    `json:"currency_id,omitempty"`        // 档案币种ID, 详细信息可以通过[查询货币信息v2](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-currency/search)接口查询获得
	ChangeReasonID    string                                                    `json:"change_reason_id,omitempty"`   // 调薪原因ID, 详细信息可以通过[批量查询定调薪原因](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/change_reason/list)接口查询获得
	ChangeDescription string                                                    `json:"change_description,omitempty"` // 调薪说明, 字段权限要求: 获取薪资档案的调薪说明
	EffectiveDate     string                                                    `json:"effective_date,omitempty"`     // 生效时间
	SalaryLevelID     string                                                    `json:"salary_level_id,omitempty"`    // 薪级薪等ID, 字段权限要求: 获取薪资档案的关联薪级薪等
	ArchiveItems      []*QueryCoreHRCompensationArchiveRespItemArchiveItem      `json:"archive_items,omitempty"`      // 档案关联的薪资项, 字段权限要求: 获取薪资档案的关联薪资项
	ArchiveIndicators []*QueryCoreHRCompensationArchiveRespItemArchiveIndicator `json:"archive_indicators,omitempty"` // 档案关联的薪资指标, 字段权限要求: 获取薪资档案的关联薪资指标
}

// QueryCoreHRCompensationArchiveRespItemArchiveIndicator ...
type QueryCoreHRCompensationArchiveRespItemArchiveIndicator struct {
	IndicatorID            string `json:"indicator_id,omitempty"`             // 薪资统计指标ID, 详细信息可以通过[批量查询薪资统计指标](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/indicator/list)接口查询获得
	IndicatorResult        string `json:"indicator_result,omitempty"`         // 档案关联薪资统计指标数值
	IndicatorResultRegular string `json:"indicator_result_regular,omitempty"` // 档案关联薪资统计指标转正后数值
}

// QueryCoreHRCompensationArchiveRespItemArchiveItem ...
type QueryCoreHRCompensationArchiveRespItemArchiveItem struct {
	ItemID            string `json:"item_id,omitempty"`             // 薪资项ID, 详细信息可以通过[批量查询薪资项](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item/list)接口查询获得
	ItemResult        string `json:"item_result,omitempty"`         // 档案关联薪资项数值
	ItemResultRegular string `json:"item_result_regular,omitempty"` // 档案关联薪资项转正后数值
}

// queryCoreHRCompensationArchiveResp ...
type queryCoreHRCompensationArchiveResp struct {
	Code  int64                               `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                              `json:"msg,omitempty"`  // 错误描述
	Data  *QueryCoreHRCompensationArchiveResp `json:"data,omitempty"`
	Error *ErrorDetail                        `json:"error,omitempty"`
}
