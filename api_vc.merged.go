// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"

	"github.com/chyroc/lark/internal"
)

// EndVCMeeting 结束一个进行中的会议
//
// 会议正在进行中，且操作者须具有相应的权限（如果操作者为用户，必须是会中当前主持人）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/end
func (r *VCService) EndVCMeeting(ctx context.Context, request *EndVCMeetingReq, options ...MethodOptionFunc) (*EndVCMeetingResp, *Response, error) {
	if r.cli.mock.mockVCEndVCMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#EndVCMeeting mock enable")
		return r.cli.mock.mockVCEndVCMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "EndVCMeeting",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/end",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(endVCMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCEndVCMeeting(f func(ctx context.Context, request *EndVCMeetingReq, options ...MethodOptionFunc) (*EndVCMeetingResp, *Response, error)) {
	r.mockVCEndVCMeeting = f
}

func (r *Mock) UnMockVCEndVCMeeting() {
	r.mockVCEndVCMeeting = nil
}

type EndVCMeetingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
}

type endVCMeetingResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *EndVCMeetingResp `json:"data,omitempty"`
}

type EndVCMeetingResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCMeeting 获取一个会议的详细数据
//
// 只能获取归属于自己的会议，支持查询最近90天内的会议
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/get
func (r *VCService) GetVCMeeting(ctx context.Context, request *GetVCMeetingReq, options ...MethodOptionFunc) (*GetVCMeetingResp, *Response, error) {
	if r.cli.mock.mockVCGetVCMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCMeeting mock enable")
		return r.cli.mock.mockVCGetVCMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCMeeting",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getVCMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCGetVCMeeting(f func(ctx context.Context, request *GetVCMeetingReq, options ...MethodOptionFunc) (*GetVCMeetingResp, *Response, error)) {
	r.mockVCGetVCMeeting = f
}

func (r *Mock) UnMockVCGetVCMeeting() {
	r.mockVCGetVCMeeting = nil
}

type GetVCMeetingReq struct {
	WithParticipants   *bool   `query:"with_participants" json:"-"`    // 是否需要参会人列表, 示例值：false
	WithMeetingAbility *bool   `query:"with_meeting_ability" json:"-"` // 是否需要会中使用能力统计（仅限tenant_access_token）, 示例值：false
	UserIDType         *IDType `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	MeetingID          string  `path:"meeting_id" json:"-"`            // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
}

type getVCMeetingResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetVCMeetingResp `json:"data,omitempty"`
}

type GetVCMeetingResp struct {
	Meeting *GetVCMeetingRespMeeting `json:"meeting,omitempty"` // 会议数据
}

type GetVCMeetingRespMeeting struct {
	ID               string                                `json:"id,omitempty"`                // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）
	Topic            string                                `json:"topic,omitempty"`             // 会议主题
	URL              string                                `json:"url,omitempty"`               // 会议链接（飞书用户可通过点击会议链接快捷入会）
	CreateTime       string                                `json:"create_time,omitempty"`       // 会议创建时间（unix时间，单位sec）
	StartTime        string                                `json:"start_time,omitempty"`        // 会议开始时间（unix时间，单位sec）
	EndTime          string                                `json:"end_time,omitempty"`          // 会议结束时间（unix时间，单位sec）
	HostUser         *GetVCMeetingRespMeetingHostUser      `json:"host_user,omitempty"`         // 主持人
	Status           int64                                 `json:"status,omitempty"`            // 会议状态, 可选值有: `1`：会议呼叫中, `2`：会议进行中, `3`：会议已结束
	ParticipantCount string                                `json:"participant_count,omitempty"` // 参会人数
	Participants     []*GetVCMeetingRespMeetingParticipant `json:"participants,omitempty"`      // 参会人列表
	Ability          *GetVCMeetingRespMeetingAbility       `json:"ability,omitempty"`           // 会中使用的能力
}

type GetVCMeetingRespMeetingHostUser struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

type GetVCMeetingRespMeetingParticipant struct {
	ID         string `json:"id,omitempty"`          // 用户ID
	UserType   int64  `json:"user_type,omitempty"`   // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	IsHost     bool   `json:"is_host,omitempty"`     // 是否为主持人
	IsCohost   bool   `json:"is_cohost,omitempty"`   // 是否为联席主持人
	IsExternal bool   `json:"is_external,omitempty"` // 是否为外部参会人
	Status     int64  `json:"status,omitempty"`      // 参会人状态, 可选值有: `1`：呼叫中, `2`：在会中, `3`：正在响铃, `4`：不在会中或已经离开会议
}

type GetVCMeetingRespMeetingAbility struct {
	UseVideo        bool `json:"use_video,omitempty"`         // 是否使用视频
	UseAudio        bool `json:"use_audio,omitempty"`         // 是否使用音频
	UseShareScreen  bool `json:"use_share_screen,omitempty"`  // 是否使用共享屏幕
	UseFollowScreen bool `json:"use_follow_screen,omitempty"` // 是否使用妙享（magic share）
	UseRecording    bool `json:"use_recording,omitempty"`     // 是否使用录制
	UsePstn         bool `json:"use_pstn,omitempty"`          // 是否使用PSTN
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// InviteVCMeeting 邀请参会人进入会议
//
// 发起邀请的操作者必须具有相应的权限（如果操作者为用户，则必须在会中），如果会议被锁定、或参会人数如果达到上限，则会邀请失败
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/invite
func (r *VCService) InviteVCMeeting(ctx context.Context, request *InviteVCMeetingReq, options ...MethodOptionFunc) (*InviteVCMeetingResp, *Response, error) {
	if r.cli.mock.mockVCInviteVCMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#InviteVCMeeting mock enable")
		return r.cli.mock.mockVCInviteVCMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "InviteVCMeeting",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/invite",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(inviteVCMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCInviteVCMeeting(f func(ctx context.Context, request *InviteVCMeetingReq, options ...MethodOptionFunc) (*InviteVCMeetingResp, *Response, error)) {
	r.mockVCInviteVCMeeting = f
}

func (r *Mock) UnMockVCInviteVCMeeting() {
	r.mockVCInviteVCMeeting = nil
}

type InviteVCMeetingReq struct {
	UserIDType *IDType                      `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	MeetingID  string                       `path:"meeting_id" json:"-"`    // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	Invitees   []*InviteVCMeetingReqInvitee `json:"invitees,omitempty"`     // 被邀请的用户列表
}

type InviteVCMeetingReqInvitee struct {
	ID       *string `json:"id,omitempty"`        // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType *int64  `json:"user_type,omitempty"` // 用户类型, 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

type inviteVCMeetingResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *InviteVCMeetingResp `json:"data,omitempty"`
}

type InviteVCMeetingResp struct {
	InviteResults []*InviteVCMeetingRespInviteResult `json:"invite_results,omitempty"` // 邀请结果
}

type InviteVCMeetingRespInviteResult struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	Status   int64  `json:"status,omitempty"`    // 邀请结果, 可选值有: `1`：邀请成功, `2`：邀请失败
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// KickoutVCMeeting 将参会人从会议中移除
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/kickout
func (r *VCService) KickoutVCMeeting(ctx context.Context, request *KickoutVCMeetingReq, options ...MethodOptionFunc) (*KickoutVCMeetingResp, *Response, error) {
	if r.cli.mock.mockVCKickoutVCMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#KickoutVCMeeting mock enable")
		return r.cli.mock.mockVCKickoutVCMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "KickoutVCMeeting",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/kickout",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(kickoutVCMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCKickoutVCMeeting(f func(ctx context.Context, request *KickoutVCMeetingReq, options ...MethodOptionFunc) (*KickoutVCMeetingResp, *Response, error)) {
	r.mockVCKickoutVCMeeting = f
}

func (r *Mock) UnMockVCKickoutVCMeeting() {
	r.mockVCKickoutVCMeeting = nil
}

type KickoutVCMeetingReq struct {
	UserIDType   *IDType                           `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	MeetingID    string                            `path:"meeting_id" json:"-"`     // 会议ID, 示例值："6911188411932033028"
	KickoutUsers []*KickoutVCMeetingReqKickoutUser `json:"kickout_users,omitempty"` // 需踢出的用户列表
}

type KickoutVCMeetingReqKickoutUser struct {
	ID       *string `json:"id,omitempty"`        // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType *int64  `json:"user_type,omitempty"` // 用户类型, 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

type kickoutVCMeetingResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *KickoutVCMeetingResp `json:"data,omitempty"`
}

type KickoutVCMeetingResp struct {
	KickoutResults []*KickoutVCMeetingRespKickoutResult `json:"kickout_results,omitempty"` // 踢出结果
}

type KickoutVCMeetingRespKickoutResult struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	Result   int64  `json:"result,omitempty"`    // 邀请结果, 可选值有: `1`：邀请成功, `2`：邀请失败
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCMeetingRecording 获取一个会议的录制文件。
//
// 会议结束后并且收到了"录制完成"的事件方可获取录制文件；只有会议owner（通过开放平台预约的会议即为预约人）有权限获取；录制时间太短(&lt;5s)有可能无法生成录制文件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/get
func (r *VCService) GetVCMeetingRecording(ctx context.Context, request *GetVCMeetingRecordingReq, options ...MethodOptionFunc) (*GetVCMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCGetVCMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCMeetingRecording mock enable")
		return r.cli.mock.mockVCGetVCMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "GetVCMeetingRecording",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getVCMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCGetVCMeetingRecording(f func(ctx context.Context, request *GetVCMeetingRecordingReq, options ...MethodOptionFunc) (*GetVCMeetingRecordingResp, *Response, error)) {
	r.mockVCGetVCMeetingRecording = f
}

func (r *Mock) UnMockVCGetVCMeetingRecording() {
	r.mockVCGetVCMeetingRecording = nil
}

type GetVCMeetingRecordingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
}

type getVCMeetingRecordingResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetVCMeetingRecordingResp `json:"data,omitempty"`
}

type GetVCMeetingRecordingResp struct {
	Recording *GetVCMeetingRecordingRespRecording `json:"recording,omitempty"` // 录制文件数据
}

type GetVCMeetingRecordingRespRecording struct {
	URL      string `json:"url,omitempty"`      // 录制文件URL
	Duration string `json:"duration,omitempty"` // 录制总时长（单位msec）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetVCPermissionMeetingRecording 将一个会议的录制文件授权给组织、用户或公开到公网
//
// 会议结束后并且收到了"录制完成"的事件方可进行授权；会议owner（通过开放平台预约的会议即为预约人）才有权限操作
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/set_permission
func (r *VCService) SetVCPermissionMeetingRecording(ctx context.Context, request *SetVCPermissionMeetingRecordingReq, options ...MethodOptionFunc) (*SetVCPermissionMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCSetVCPermissionMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#SetVCPermissionMeetingRecording mock enable")
		return r.cli.mock.mockVCSetVCPermissionMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "SetVCPermissionMeetingRecording",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording/set_permission",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(setVCPermissionMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCSetVCPermissionMeetingRecording(f func(ctx context.Context, request *SetVCPermissionMeetingRecordingReq, options ...MethodOptionFunc) (*SetVCPermissionMeetingRecordingResp, *Response, error)) {
	r.mockVCSetVCPermissionMeetingRecording = f
}

func (r *Mock) UnMockVCSetVCPermissionMeetingRecording() {
	r.mockVCSetVCPermissionMeetingRecording = nil
}

type SetVCPermissionMeetingRecordingReq struct {
	UserIDType        *IDType                                               `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MeetingID         string                                                `path:"meeting_id" json:"-"`          // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	PermissionObjects []*SetVCPermissionMeetingRecordingReqPermissionObject `json:"permission_objects,omitempty"` // 授权对象列表
}

type SetVCPermissionMeetingRecordingReqPermissionObject struct {
	ID         *string `json:"id,omitempty"`         // 授权对象ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	Type       int64   `json:"type,omitempty"`       // 授权对象类型, 示例值：1, 可选值有: `1`：用户授权, `2`：群组授权, `3`：租户内授权（id字段不填）, `4`：公网授权（id字段不填）
	Permission int64   `json:"permission,omitempty"` // 权限, 示例值：1, 可选值有: `1`：查看
}

type setVCPermissionMeetingRecordingResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *SetVCPermissionMeetingRecordingResp `json:"data,omitempty"`
}

type SetVCPermissionMeetingRecordingResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// StartVCMeetingRecording 在会议中开始录制。
//
// 会议正在进行中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/start
func (r *VCService) StartVCMeetingRecording(ctx context.Context, request *StartVCMeetingRecordingReq, options ...MethodOptionFunc) (*StartVCMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCStartVCMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#StartVCMeetingRecording mock enable")
		return r.cli.mock.mockVCStartVCMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "StartVCMeetingRecording",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording/start",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(startVCMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCStartVCMeetingRecording(f func(ctx context.Context, request *StartVCMeetingRecordingReq, options ...MethodOptionFunc) (*StartVCMeetingRecordingResp, *Response, error)) {
	r.mockVCStartVCMeetingRecording = f
}

func (r *Mock) UnMockVCStartVCMeetingRecording() {
	r.mockVCStartVCMeetingRecording = nil
}

type StartVCMeetingRecordingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	Timezone  *int64 `json:"timezone,omitempty"`  // 录制文件时间显示使用的时区[-12,12], 示例值：8
}

type startVCMeetingRecordingResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *StartVCMeetingRecordingResp `json:"data,omitempty"`
}

type StartVCMeetingRecordingResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// StopVCMeetingRecording 在会议中停止录制。
//
// 会议正在录制中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/stop
func (r *VCService) StopVCMeetingRecording(ctx context.Context, request *StopVCMeetingRecordingReq, options ...MethodOptionFunc) (*StopVCMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCStopVCMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#StopVCMeetingRecording mock enable")
		return r.cli.mock.mockVCStopVCMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "StopVCMeetingRecording",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording/stop",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(stopVCMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCStopVCMeetingRecording(f func(ctx context.Context, request *StopVCMeetingRecordingReq, options ...MethodOptionFunc) (*StopVCMeetingRecordingResp, *Response, error)) {
	r.mockVCStopVCMeetingRecording = f
}

func (r *Mock) UnMockVCStopVCMeetingRecording() {
	r.mockVCStopVCMeetingRecording = nil
}

type StopVCMeetingRecordingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
}

type stopVCMeetingRecordingResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *StopVCMeetingRecordingResp `json:"data,omitempty"`
}

type StopVCMeetingRecordingResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetVCHostMeeting 设置会议的主持人
//
// 发起设置主持人的操作者必须具有相应的权限（如果操作者为用户，必须是会中当前主持人）；该操作使用CAS并发安全机制，需传入会中当前主持人，如果操作失败可使用返回的最新数据重试
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/set_host
func (r *VCService) SetVCHostMeeting(ctx context.Context, request *SetVCHostMeetingReq, options ...MethodOptionFunc) (*SetVCHostMeetingResp, *Response, error) {
	if r.cli.mock.mockVCSetVCHostMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#SetVCHostMeeting mock enable")
		return r.cli.mock.mockVCSetVCHostMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "SetVCHostMeeting",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/set_host",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(setVCHostMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCSetVCHostMeeting(f func(ctx context.Context, request *SetVCHostMeetingReq, options ...MethodOptionFunc) (*SetVCHostMeetingResp, *Response, error)) {
	r.mockVCSetVCHostMeeting = f
}

func (r *Mock) UnMockVCSetVCHostMeeting() {
	r.mockVCSetVCHostMeeting = nil
}

type SetVCHostMeetingReq struct {
	UserIDType  *IDType                         `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	MeetingID   string                          `path:"meeting_id" json:"-"`     // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	HostUser    *SetVCHostMeetingReqHostUser    `json:"host_user,omitempty"`     // 将要设置的主持人
	OldHostUser *SetVCHostMeetingReqOldHostUser `json:"old_host_user,omitempty"` // 当前主持人（CAS并发安全：如果和会中当前主持人不符则会设置失败，可使用返回的最新数据重新设置）
}

type SetVCHostMeetingReqHostUser struct {
	ID       *string `json:"id,omitempty"`        // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType *int64  `json:"user_type,omitempty"` // 用户类型, 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

type SetVCHostMeetingReqOldHostUser struct {
	ID       *string `json:"id,omitempty"`        // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType *int64  `json:"user_type,omitempty"` // 用户类型, 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

type setVCHostMeetingResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *SetVCHostMeetingResp `json:"data,omitempty"`
}

type SetVCHostMeetingResp struct {
	HostUser *SetVCHostMeetingRespHostUser `json:"host_user,omitempty"` // 会中当前主持人
}

type SetVCHostMeetingRespHostUser struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCDailyReport 获取一段时间内组织的每日会议使用报告。
//
// 支持最近90天内的数据查询
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/report/get_daily
func (r *VCService) GetVCDailyReport(ctx context.Context, request *GetVCDailyReportReq, options ...MethodOptionFunc) (*GetVCDailyReportResp, *Response, error) {
	if r.cli.mock.mockVCGetVCDailyReport != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCDailyReport mock enable")
		return r.cli.mock.mockVCGetVCDailyReport(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCDailyReport",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/reports/get_daily",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getVCDailyReportResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCGetVCDailyReport(f func(ctx context.Context, request *GetVCDailyReportReq, options ...MethodOptionFunc) (*GetVCDailyReportResp, *Response, error)) {
	r.mockVCGetVCDailyReport = f
}

func (r *Mock) UnMockVCGetVCDailyReport() {
	r.mockVCGetVCDailyReport = nil
}

type GetVCDailyReportReq struct {
	StartTime string `query:"start_time" json:"-"` // 开始时间（unix时间，单位sec）, 示例值："1608888867"
	EndTime   string `query:"end_time" json:"-"`   // 结束时间（unix时间，单位sec）, 示例值："1608888966"
}

type getVCDailyReportResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetVCDailyReportResp `json:"data,omitempty"`
}

type GetVCDailyReportResp struct {
	MeetingReport *GetVCDailyReportRespMeetingReport `json:"meeting_report,omitempty"` // 会议报告
}

type GetVCDailyReportRespMeetingReport struct {
	TotalMeetingCount     string                                        `json:"total_meeting_count,omitempty"`     // 总会议数量
	TotalMeetingDuration  string                                        `json:"total_meeting_duration,omitempty"`  // 总会议时长（单位sec）
	TotalParticipantCount string                                        `json:"total_participant_count,omitempty"` // 总参会人数
	DailyReport           *GetVCDailyReportRespMeetingReportDailyReport `json:"daily_report,omitempty"`            // 每日会议报告列表
}

type GetVCDailyReportRespMeetingReportDailyReport struct {
	Date             string `json:"date,omitempty"`              // 日期（unix时间，单位sec）
	MeetingCount     string `json:"meeting_count,omitempty"`     // 会议数量
	MeetingDuration  string `json:"meeting_duration,omitempty"`  // 会议时长（单位sec）
	ParticipantCount string `json:"participant_count,omitempty"` // 参会人数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCTopUserReport 获取一段时间内组织内会议使用的top用户列表。
//
// 支持最近90天内的数据查询；默认返回前10位，最多可查询前100位
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/report/get_top_user
func (r *VCService) GetVCTopUserReport(ctx context.Context, request *GetVCTopUserReportReq, options ...MethodOptionFunc) (*GetVCTopUserReportResp, *Response, error) {
	if r.cli.mock.mockVCGetVCTopUserReport != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCTopUserReport mock enable")
		return r.cli.mock.mockVCGetVCTopUserReport(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCTopUserReport",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/reports/get_top_user",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getVCTopUserReportResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCGetVCTopUserReport(f func(ctx context.Context, request *GetVCTopUserReportReq, options ...MethodOptionFunc) (*GetVCTopUserReportResp, *Response, error)) {
	r.mockVCGetVCTopUserReport = f
}

func (r *Mock) UnMockVCGetVCTopUserReport() {
	r.mockVCGetVCTopUserReport = nil
}

type GetVCTopUserReportReq struct {
	StartTime string `query:"start_time" json:"-"` // 开始时间（unix时间，单位sec）, 示例值："1608888867"
	EndTime   string `query:"end_time" json:"-"`   // 结束时间（unix时间，单位sec）, 示例值："1608889966"
	Limit     int64  `query:"limit" json:"-"`      // 取前多少位, 示例值：10
	OrderBy   int64  `query:"order_by" json:"-"`   // 排序依据（降序）, 示例值：1, 可选值有: `1`：会议数量, `2`：会议时长
}

type getVCTopUserReportResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetVCTopUserReportResp `json:"data,omitempty"`
}

type GetVCTopUserReportResp struct {
	TopUserReport *GetVCTopUserReportRespTopUserReport `json:"top_user_report,omitempty"` // top用户列表
}

type GetVCTopUserReportRespTopUserReport struct {
	ID              string `json:"id,omitempty"`               // 用户ID
	Name            string `json:"name,omitempty"`             // 用户名
	UserType        int64  `json:"user_type,omitempty"`        // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	MeetingCount    string `json:"meeting_count,omitempty"`    // 会议数量
	MeetingDuration string `json:"meeting_duration,omitempty"` // 会议时长（单位sec）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ApplyVCReserve 创建一个会议预约。
//
// 支持预约最近30天内的会议（到期时间距离当前时间不超过30天），预约到期后会议号将被释放，如需继续使用可通过"更新预约"接口进行续期；预约会议时可配置参会人在会中的权限，以达到控制会议的目的
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/apply
func (r *VCService) ApplyVCReserve(ctx context.Context, request *ApplyVCReserveReq, options ...MethodOptionFunc) (*ApplyVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCApplyVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#ApplyVCReserve mock enable")
		return r.cli.mock.mockVCApplyVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "ApplyVCReserve",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/apply",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(applyVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCApplyVCReserve(f func(ctx context.Context, request *ApplyVCReserveReq, options ...MethodOptionFunc) (*ApplyVCReserveResp, *Response, error)) {
	r.mockVCApplyVCReserve = f
}

func (r *Mock) UnMockVCApplyVCReserve() {
	r.mockVCApplyVCReserve = nil
}

type ApplyVCReserveReq struct {
	UserIDType      *IDType                           `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 userid
	EndTime         *string                           `json:"end_time,omitempty"`         // 预约到期时间（unix时间，单位sec），多人会议必填, 示例值："1608888867"
	MeetingSettings *ApplyVCReserveReqMeetingSettings `json:"meeting_settings,omitempty"` // 会议设置
}

type ApplyVCReserveReqMeetingSettings struct {
	Topic              *string                                             `json:"topic,omitempty"`                // 会议主题, 示例值："my meeting"
	ActionPermissions  []*ApplyVCReserveReqMeetingSettingsActionPermission `json:"action_permissions,omitempty"`   // 会议权限配置列表，如果存在相同的权限配置项则它们之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
	MeetingInitialType *int64                                              `json:"meeting_initial_type,omitempty"` // 会议初始类型, 示例值：1, 可选值有: `1`：多人会议, `2`：1v1呼叫
	CallSetting        *ApplyVCReserveReqMeetingSettingsCallSetting        `json:"call_setting,omitempty"`         // 1v1呼叫相关参数
}

type ApplyVCReserveReqMeetingSettingsActionPermission struct {
	Permission         int64                                                                `json:"permission,omitempty"`          // 权限项, 示例值：1, 可选值有: `1`：是否能成为主持人, `2`：是否能邀请参会人, `3`：是否能加入会议
	PermissionCheckers []*ApplyVCReserveReqMeetingSettingsActionPermissionPermissionChecker `json:"permission_checkers,omitempty"` // 权限检查器列表，权限检查器之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
}

type ApplyVCReserveReqMeetingSettingsActionPermissionPermissionChecker struct {
	CheckField int64    `json:"check_field,omitempty"` // 检查字段类型, 示例值：1, 可选值有: `1`：用户ID, `2`：用户类型, `3`：租户ID
	CheckMode  int64    `json:"check_mode,omitempty"`  // 检查方式, 示例值：1, 可选值有: `1`：在check_list中为有权限（白名单）, `2`：不在check_list中为有权限（黑名单）
	CheckList  []string `json:"check_list,omitempty"`  // 检查字段列表, 示例值：123
}

type ApplyVCReserveReqMeetingSettingsCallSetting struct {
	Callee *ApplyVCReserveReqMeetingSettingsCallSettingCallee `json:"callee,omitempty"` // 被呼叫的用户
}

type ApplyVCReserveReqMeetingSettingsCallSettingCallee struct {
	ID          *string                                                       `json:"id,omitempty"`            // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType    int64                                                         `json:"user_type,omitempty"`     // 用户类型，当前仅支持用户类型6(pstn用户), 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	PstnSipInfo *ApplyVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo `json:"pstn_sip_info,omitempty"` // pstn/sip信息
}

type ApplyVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo struct {
	Nickname    *string `json:"nickname,omitempty"`     // 给pstn/sip用户设置的临时昵称, 示例值："dodo"
	MainAddress string  `json:"main_address,omitempty"` // pstn/sip主机号，格式为：[国际冠字]-[电话区号][电话号码]，当前仅支持国内手机及固定电话号码, 示例值："+86-02187654321"
}

type applyVCReserveResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *ApplyVCReserveResp `json:"data,omitempty"`
}

type ApplyVCReserveResp struct {
	Reserve *ApplyVCReserveRespReserve `json:"reserve,omitempty"` // 预约数据
}

type ApplyVCReserveRespReserve struct {
	ID        string `json:"id,omitempty"`         // 预约ID（预约的唯一标识）
	MeetingNo string `json:"meeting_no,omitempty"` // 9位会议号（飞书用户可通过输入9位会议号快捷入会）
	URL       string `json:"url,omitempty"`        // 会议链接（飞书用户可通过点击会议链接快捷入会）
	AppLink   string `json:"app_link,omitempty"`   // APPLink用于唤起飞书APP入会。"{?}"为占位符，用于配置入会参数，使用时需替换具体值：0表示关闭，1表示打开。preview为入会前的设置页，mic为麦克风，speaker为扬声器，camera为摄像头
	LiveLink  string `json:"live_link,omitempty"`  // 直播链接
	EndTime   string `json:"end_time,omitempty"`   // 预约到期时间（unix时间，单位sec）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteVCReserve 删除一个预约
//
// 只能删除归属于自己的预约；删除后数据不可恢复
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/delete
func (r *VCService) DeleteVCReserve(ctx context.Context, request *DeleteVCReserveReq, options ...MethodOptionFunc) (*DeleteVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCDeleteVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#DeleteVCReserve mock enable")
		return r.cli.mock.mockVCDeleteVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "DeleteVCReserve",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/:reserve_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(deleteVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCDeleteVCReserve(f func(ctx context.Context, request *DeleteVCReserveReq, options ...MethodOptionFunc) (*DeleteVCReserveResp, *Response, error)) {
	r.mockVCDeleteVCReserve = f
}

func (r *Mock) UnMockVCDeleteVCReserve() {
	r.mockVCDeleteVCReserve = nil
}

type DeleteVCReserveReq struct {
	ReserveID string `path:"reserve_id" json:"-"` // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
}

type deleteVCReserveResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteVCReserveResp `json:"data,omitempty"`
}

type DeleteVCReserveResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCReserve 获取一个预约的详情
//
// 只能获取归属于自己的预约
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get
func (r *VCService) GetVCReserve(ctx context.Context, request *GetVCReserveReq, options ...MethodOptionFunc) (*GetVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCGetVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCReserve mock enable")
		return r.cli.mock.mockVCGetVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "GetVCReserve",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/:reserve_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCGetVCReserve(f func(ctx context.Context, request *GetVCReserveReq, options ...MethodOptionFunc) (*GetVCReserveResp, *Response, error)) {
	r.mockVCGetVCReserve = f
}

func (r *Mock) UnMockVCGetVCReserve() {
	r.mockVCGetVCReserve = nil
}

type GetVCReserveReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ReserveID  string  `path:"reserve_id" json:"-"`    // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
}

type getVCReserveResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetVCReserveResp `json:"data,omitempty"`
}

type GetVCReserveResp struct {
	Reserve *GetVCReserveRespReserve `json:"reserve,omitempty"` // 预约数据
}

type GetVCReserveRespReserve struct {
	ID              string                                  `json:"id,omitempty"`               // 预约ID（预约的唯一标识）
	MeetingNo       string                                  `json:"meeting_no,omitempty"`       // 9位会议号（飞书用户可通过输入9位会议号快捷入会）
	URL             string                                  `json:"url,omitempty"`              // 会议链接（飞书用户可通过点击会议链接快捷入会）
	AppLink         string                                  `json:"app_link,omitempty"`         // APPLink用于唤起飞书APP入会。"{?}"为占位符，用于配置入会参数，使用时需替换具体值：0表示关闭，1表示打开。preview为入会前的设置页，mic为麦克风，speaker为扬声器，camera为摄像头
	LiveLink        string                                  `json:"live_link,omitempty"`        // 直播链接
	EndTime         string                                  `json:"end_time,omitempty"`         // 预约到期时间（unix时间，单位sec）
	ExpireStatus    int64                                   `json:"expire_status,omitempty"`    // 过期状态, 可选值有: `1`：未过期, `2`：已过期
	ReserveUserID   string                                  `json:"reserve_user_id,omitempty"`  // 预约人ID
	MeetingSettings *GetVCReserveRespReserveMeetingSettings `json:"meeting_settings,omitempty"` // 会议设置
}

type GetVCReserveRespReserveMeetingSettings struct {
	Topic              string                                                    `json:"topic,omitempty"`                // 会议主题
	ActionPermissions  []*GetVCReserveRespReserveMeetingSettingsActionPermission `json:"action_permissions,omitempty"`   // 会议权限配置列表，如果存在相同的权限配置项则它们之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
	MeetingInitialType int64                                                     `json:"meeting_initial_type,omitempty"` // 会议初始类型, 可选值有: `1`：多人会议, `2`：1v1呼叫
	CallSetting        *GetVCReserveRespReserveMeetingSettingsCallSetting        `json:"call_setting,omitempty"`         // 1v1呼叫相关参数
}

type GetVCReserveRespReserveMeetingSettingsActionPermission struct {
	Permission         int64                                                                      `json:"permission,omitempty"`          // 权限项, 可选值有: `1`：是否能成为主持人, `2`：是否能邀请参会人, `3`：是否能加入会议
	PermissionCheckers []*GetVCReserveRespReserveMeetingSettingsActionPermissionPermissionChecker `json:"permission_checkers,omitempty"` // 权限检查器列表，权限检查器之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
}

type GetVCReserveRespReserveMeetingSettingsActionPermissionPermissionChecker struct {
	CheckField int64    `json:"check_field,omitempty"` // 检查字段类型, 可选值有: `1`：用户ID, `2`：用户类型, `3`：租户ID
	CheckMode  int64    `json:"check_mode,omitempty"`  // 检查方式, 可选值有: `1`：在check_list中为有权限（白名单）, `2`：不在check_list中为有权限（黑名单）
	CheckList  []string `json:"check_list,omitempty"`  // 检查字段列表
}

type GetVCReserveRespReserveMeetingSettingsCallSetting struct {
	Callee *GetVCReserveRespReserveMeetingSettingsCallSettingCallee `json:"callee,omitempty"` // 被呼叫的用户
}

type GetVCReserveRespReserveMeetingSettingsCallSettingCallee struct {
	ID          string                                                              `json:"id,omitempty"`            // 用户ID
	UserType    int64                                                               `json:"user_type,omitempty"`     // 用户类型，当前仅支持用户类型6(pstn用户), 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	PstnSipInfo *GetVCReserveRespReserveMeetingSettingsCallSettingCalleePstnSipInfo `json:"pstn_sip_info,omitempty"` // pstn/sip信息
}

type GetVCReserveRespReserveMeetingSettingsCallSettingCalleePstnSipInfo struct {
	Nickname    string `json:"nickname,omitempty"`     // 给pstn/sip用户设置的临时昵称
	MainAddress string `json:"main_address,omitempty"` // pstn/sip主机号，格式为：[国际冠字]-[电话区号][电话号码]，当前仅支持国内手机及固定电话号码
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCReserveActiveMeeting 获取一个预约的当前活跃会议
//
// 只能获取归属于自己的预约的活跃会议（一个预约最多有一个正在进行中的会议）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get_active_meeting
func (r *VCService) GetVCReserveActiveMeeting(ctx context.Context, request *GetVCReserveActiveMeetingReq, options ...MethodOptionFunc) (*GetVCReserveActiveMeetingResp, *Response, error) {
	if r.cli.mock.mockVCGetVCReserveActiveMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCReserveActiveMeeting mock enable")
		return r.cli.mock.mockVCGetVCReserveActiveMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "GetVCReserveActiveMeeting",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/:reserve_id/get_active_meeting",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getVCReserveActiveMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCGetVCReserveActiveMeeting(f func(ctx context.Context, request *GetVCReserveActiveMeetingReq, options ...MethodOptionFunc) (*GetVCReserveActiveMeetingResp, *Response, error)) {
	r.mockVCGetVCReserveActiveMeeting = f
}

func (r *Mock) UnMockVCGetVCReserveActiveMeeting() {
	r.mockVCGetVCReserveActiveMeeting = nil
}

type GetVCReserveActiveMeetingReq struct {
	WithParticipants *bool   `query:"with_participants" json:"-"` // 是否需要参会人列表，默认为false, 示例值：false
	UserIDType       *IDType `query:"user_id_type" json:"-"`      // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ReserveID        string  `path:"reserve_id" json:"-"`         // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
}

type getVCReserveActiveMeetingResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetVCReserveActiveMeetingResp `json:"data,omitempty"`
}

type GetVCReserveActiveMeetingResp struct {
	Meeting *GetVCReserveActiveMeetingRespMeeting `json:"meeting,omitempty"` // 会议数据
}

type GetVCReserveActiveMeetingRespMeeting struct {
	ID               string                                             `json:"id,omitempty"`                // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）
	Topic            string                                             `json:"topic,omitempty"`             // 会议主题
	URL              string                                             `json:"url,omitempty"`               // 会议链接（飞书用户可通过点击会议链接快捷入会）
	CreateTime       string                                             `json:"create_time,omitempty"`       // 会议创建时间（unix时间，单位sec）
	StartTime        string                                             `json:"start_time,omitempty"`        // 会议开始时间（unix时间，单位sec）
	EndTime          string                                             `json:"end_time,omitempty"`          // 会议结束时间（unix时间，单位sec）
	HostUser         *GetVCReserveActiveMeetingRespMeetingHostUser      `json:"host_user,omitempty"`         // 主持人
	Status           int64                                              `json:"status,omitempty"`            // 会议状态, 可选值有: `1`：会议呼叫中, `2`：会议进行中, `3`：会议已结束
	ParticipantCount string                                             `json:"participant_count,omitempty"` // 参会人数
	Participants     []*GetVCReserveActiveMeetingRespMeetingParticipant `json:"participants,omitempty"`      // 参会人列表
	Ability          *GetVCReserveActiveMeetingRespMeetingAbility       `json:"ability,omitempty"`           // 会中使用的能力
}

type GetVCReserveActiveMeetingRespMeetingHostUser struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

type GetVCReserveActiveMeetingRespMeetingParticipant struct {
	ID         string `json:"id,omitempty"`          // 用户ID
	UserType   int64  `json:"user_type,omitempty"`   // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	IsHost     bool   `json:"is_host,omitempty"`     // 是否为主持人
	IsCohost   bool   `json:"is_cohost,omitempty"`   // 是否为联席主持人
	IsExternal bool   `json:"is_external,omitempty"` // 是否为外部参会人
	Status     int64  `json:"status,omitempty"`      // 参会人状态, 可选值有: `1`：呼叫中, `2`：在会中, `3`：正在响铃, `4`：不在会中或已经离开会议
}

type GetVCReserveActiveMeetingRespMeetingAbility struct {
	UseVideo        bool `json:"use_video,omitempty"`         // 是否使用视频
	UseAudio        bool `json:"use_audio,omitempty"`         // 是否使用音频
	UseShareScreen  bool `json:"use_share_screen,omitempty"`  // 是否使用共享屏幕
	UseFollowScreen bool `json:"use_follow_screen,omitempty"` // 是否使用妙享（magic share）
	UseRecording    bool `json:"use_recording,omitempty"`     // 是否使用录制
	UsePstn         bool `json:"use_pstn,omitempty"`          // 是否使用PSTN
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateVCReserve 更新一个预约
//
// 只能更新归属于自己的预约，不需要更新的字段不传（如果传空则会被更新为空）；可用于续期操作，到期时间距离当前时间不超过30天
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/update
func (r *VCService) UpdateVCReserve(ctx context.Context, request *UpdateVCReserveReq, options ...MethodOptionFunc) (*UpdateVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCUpdateVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#UpdateVCReserve mock enable")
		return r.cli.mock.mockVCUpdateVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "UpdateVCReserve",
		Method:              "PUT",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/:reserve_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(updateVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCUpdateVCReserve(f func(ctx context.Context, request *UpdateVCReserveReq, options ...MethodOptionFunc) (*UpdateVCReserveResp, *Response, error)) {
	r.mockVCUpdateVCReserve = f
}

func (r *Mock) UnMockVCUpdateVCReserve() {
	r.mockVCUpdateVCReserve = nil
}

type UpdateVCReserveReq struct {
	UserIDType      *IDType                            `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ReserveID       string                             `path:"reserve_id" json:"-"`        // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
	EndTime         *string                            `json:"end_time,omitempty"`         // 预约到期时间（unix时间，单位sec）, 示例值："1608888867"
	MeetingSettings *UpdateVCReserveReqMeetingSettings `json:"meeting_settings,omitempty"` // 会议设置
}

type UpdateVCReserveReqMeetingSettings struct {
	Topic              *string                                              `json:"topic,omitempty"`                // 会议主题, 示例值："my meeting"
	ActionPermissions  []*UpdateVCReserveReqMeetingSettingsActionPermission `json:"action_permissions,omitempty"`   // 会议权限配置列表，如果存在相同的权限配置项则它们之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
	MeetingInitialType *int64                                               `json:"meeting_initial_type,omitempty"` // 会议初始类型, 示例值：1, 可选值有: `1`：多人会议, `2`：1v1呼叫
	CallSetting        *UpdateVCReserveReqMeetingSettingsCallSetting        `json:"call_setting,omitempty"`         // 1v1呼叫相关参数
}

type UpdateVCReserveReqMeetingSettingsActionPermission struct {
	Permission         int64                                                                 `json:"permission,omitempty"`          // 权限项, 示例值：1, 可选值有: `1`：是否能成为主持人, `2`：是否能邀请参会人, `3`：是否能加入会议
	PermissionCheckers []*UpdateVCReserveReqMeetingSettingsActionPermissionPermissionChecker `json:"permission_checkers,omitempty"` // 权限检查器列表，权限检查器之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
}

type UpdateVCReserveReqMeetingSettingsActionPermissionPermissionChecker struct {
	CheckField int64    `json:"check_field,omitempty"` // 检查字段类型, 示例值：1, 可选值有: `1`：用户ID, `2`：用户类型, `3`：租户ID
	CheckMode  int64    `json:"check_mode,omitempty"`  // 检查方式, 示例值：1, 可选值有: `1`：在check_list中为有权限（白名单）, `2`：不在check_list中为有权限（黑名单）
	CheckList  []string `json:"check_list,omitempty"`  // 检查字段列表
}

type UpdateVCReserveReqMeetingSettingsCallSetting struct {
	Callee *UpdateVCReserveReqMeetingSettingsCallSettingCallee `json:"callee,omitempty"` // 被呼叫的用户
}

type UpdateVCReserveReqMeetingSettingsCallSettingCallee struct {
	ID          *string                                                        `json:"id,omitempty"`            // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType    int64                                                          `json:"user_type,omitempty"`     // 用户类型，当前仅支持用户类型6(pstn用户), 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	PstnSipInfo *UpdateVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo `json:"pstn_sip_info,omitempty"` // pstn/sip信息
}

type UpdateVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo struct {
	Nickname    *string `json:"nickname,omitempty"`     // 给pstn/sip用户设置的临时昵称, 示例值："dodo"
	MainAddress string  `json:"main_address,omitempty"` // pstn/sip主机号，格式为：[国际冠字]-[电话区号][电话号码]，当前仅支持国内手机及固定电话号码, 示例值："+86-02187654321"
}

type updateVCReserveResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UpdateVCReserveResp `json:"data,omitempty"`
}

type UpdateVCReserveResp struct {
	Reserve *UpdateVCReserveRespReserve `json:"reserve,omitempty"` // 预约数据
}

type UpdateVCReserveRespReserve struct {
	ID           string `json:"id,omitempty"`            // 预约ID（预约的唯一标识）
	MeetingNo    string `json:"meeting_no,omitempty"`    // 9位会议号（飞书用户可通过输入9位会议号快捷入会）
	URL          string `json:"url,omitempty"`           // 会议链接（飞书用户可通过点击会议链接快捷入会）
	EndTime      string `json:"end_time,omitempty"`      // 预约到期时间（unix时间，单位sec）
	ExpireStatus int64  `json:"expire_status,omitempty"` // 过期状态, 可选值有: `1`：未过期, `2`：已过期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCRoomConfig 查询一个范围内的会议室配置。
//
// 根据查询范围传入对应的参数
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_config/query
func (r *VCService) GetVCRoomConfig(ctx context.Context, request *GetVCRoomConfigReq, options ...MethodOptionFunc) (*GetVCRoomConfigResp, *Response, error) {
	if r.cli.mock.mockVCGetVCRoomConfig != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCRoomConfig mock enable")
		return r.cli.mock.mockVCGetVCRoomConfig(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCRoomConfig",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/room_configs/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getVCRoomConfigResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCGetVCRoomConfig(f func(ctx context.Context, request *GetVCRoomConfigReq, options ...MethodOptionFunc) (*GetVCRoomConfigResp, *Response, error)) {
	r.mockVCGetVCRoomConfig = f
}

func (r *Mock) UnMockVCGetVCRoomConfig() {
	r.mockVCGetVCRoomConfig = nil
}

type GetVCRoomConfigReq struct {
	Scope      int64   `query:"scope" json:"-"`       // 查询节点范围, 示例值：5, 可选值有: `1`：租户, `2`：国家/地区, `3`：城市, `4`：建筑, `5`：楼层, `6`：会议室
	CountryID  *string `query:"country_id" json:"-"`  // 国家/地区ID scope为2，3时需要此参数, 示例值："086"
	DistrictID *string `query:"district_id" json:"-"` // 城市ID scope为3时需要此参数, 示例值："001"
	BuildingID *string `query:"building_id" json:"-"` // 建筑ID scope为4，5时需要此参数, 示例值："22"
	FloorName  *string `query:"floor_name" json:"-"`  // 楼层 scope为5时需要此参数, 示例值："4"
	RoomID     *string `query:"room_id" json:"-"`     // 会议室ID scope为6时需要此参数, 示例值："6383786266263"
}

type getVCRoomConfigResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetVCRoomConfigResp `json:"data,omitempty"`
}

type GetVCRoomConfigResp struct {
	RoomBackground    string                             `json:"room_background,omitempty"`    // 飞书会议室背景图
	DisplayBackground string                             `json:"display_background,omitempty"` // 飞书签到板背景图
	DigitalSignage    *GetVCRoomConfigRespDigitalSignage `json:"digital_signage,omitempty"`    // 飞书会议室数字标牌
}

type GetVCRoomConfigRespDigitalSignage struct {
	Enable       bool                                         `json:"enable,omitempty"`        // 是否开启数字标牌功能
	Mute         bool                                         `json:"mute,omitempty"`          // 是否静音播放
	StartDisplay int64                                        `json:"start_display,omitempty"` // 日程会议开始前n分钟结束播放
	StopDisplay  int64                                        `json:"stop_display,omitempty"`  // 会议结束后n分钟开始播放
	Materials    []*GetVCRoomConfigRespDigitalSignageMaterial `json:"materials,omitempty"`     // 素材列表
}

type GetVCRoomConfigRespDigitalSignageMaterial struct {
	ID           string `json:"id,omitempty"`            // 素材ID
	Name         string `json:"name,omitempty"`          // 素材名称
	MaterialType int64  `json:"material_type,omitempty"` // 素材类型, 可选值有: `1`：图片, `2`：视频, `3`：GIF
	URL          string `json:"url,omitempty"`           // 素材url
	Duration     int64  `json:"duration,omitempty"`      // 播放时长（单位sec）
	Cover        string `json:"cover,omitempty"`         // 素材封面url
	Md5          string `json:"md5,omitempty"`           // 素材文件md5
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetVCRoomConfig 设置一个范围内的会议室配置。
//
// 根据设置范围传入对应的参数
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_config/set
func (r *VCService) SetVCRoomConfig(ctx context.Context, request *SetVCRoomConfigReq, options ...MethodOptionFunc) (*SetVCRoomConfigResp, *Response, error) {
	if r.cli.mock.mockVCSetVCRoomConfig != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#SetVCRoomConfig mock enable")
		return r.cli.mock.mockVCSetVCRoomConfig(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "SetVCRoomConfig",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/room_configs/set",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(setVCRoomConfigResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockVCSetVCRoomConfig(f func(ctx context.Context, request *SetVCRoomConfigReq, options ...MethodOptionFunc) (*SetVCRoomConfigResp, *Response, error)) {
	r.mockVCSetVCRoomConfig = f
}

func (r *Mock) UnMockVCSetVCRoomConfig() {
	r.mockVCSetVCRoomConfig = nil
}

type SetVCRoomConfigReq struct {
	Scope      int64                         `json:"scope,omitempty"`       // 设置节点范围, 示例值：5, 可选值有: `1`：租户, `2`：国家/地区, `3`：城市, `4`：建筑, `5`：楼层, `6`：会议室
	CountryID  *string                       `json:"country_id,omitempty"`  // 国家/地区ID scope为2，3时需要此参数, 示例值："086"
	DistrictID *string                       `json:"district_id,omitempty"` // 城市ID scope为3时需要此参数, 示例值："223"
	BuildingID *string                       `json:"building_id,omitempty"` // 建筑ID scope为4，5时需要此参数, 示例值："66"
	FloorName  *string                       `json:"floor_name,omitempty"`  // 楼层 scope为5时需要此参数, 示例值："3"
	RoomID     *string                       `json:"room_id,omitempty"`     // 会议室ID scope为6时需要此参数, 示例值："67687262867363"
	RoomConfig *SetVCRoomConfigReqRoomConfig `json:"room_config,omitempty"` // 会议室设置
}

type SetVCRoomConfigReqRoomConfig struct {
	RoomBackground    *string                                     `json:"room_background,omitempty"`    // 飞书会议室背景图, 示例值："https://lf1-ttcdn-tos.pstatp.com/obj/xxx"
	DisplayBackground *string                                     `json:"display_background,omitempty"` // 飞书签到板背景图, 示例值："https://lf1-ttcdn-tos.pstatp.com/obj/xxx"
	DigitalSignage    *SetVCRoomConfigReqRoomConfigDigitalSignage `json:"digital_signage,omitempty"`    // 飞书会议室数字标牌
}

type SetVCRoomConfigReqRoomConfigDigitalSignage struct {
	Enable       *bool                                                 `json:"enable,omitempty"`        // 是否开启数字标牌功能, 示例值：true
	Mute         *bool                                                 `json:"mute,omitempty"`          // 是否静音播放, 示例值：true
	StartDisplay *int64                                                `json:"start_display,omitempty"` // 日程会议开始前n分钟结束播放, 示例值：3
	StopDisplay  *int64                                                `json:"stop_display,omitempty"`  // 会议结束后n分钟开始播放, 示例值：3
	Materials    []*SetVCRoomConfigReqRoomConfigDigitalSignageMaterial `json:"materials,omitempty"`     // 素材列表
}

type SetVCRoomConfigReqRoomConfigDigitalSignageMaterial struct {
	ID           *string `json:"id,omitempty"`            // 素材ID, 示例值："7847784676276"
	Name         *string `json:"name,omitempty"`          // 素材名称, 示例值："name"
	MaterialType *int64  `json:"material_type,omitempty"` // 素材类型, 示例值：0, 可选值有: `1`：图片, `2`：视频, `3`：GIF
	URL          *string `json:"url,omitempty"`           // 素材url, 示例值："url"
	Duration     *int64  `json:"duration,omitempty"`      // 播放时长（单位sec）, 示例值：15
	Cover        *string `json:"cover,omitempty"`         // 素材封面url, 示例值："url"
	Md5          *string `json:"md5,omitempty"`           // 素材文件md5, 示例值："md5"
}

type setVCRoomConfigResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *SetVCRoomConfigResp `json:"data,omitempty"`
}

type SetVCRoomConfigResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// OpenBot 打开一个机器人的聊天窗。,如果访问用户没有机器人的可用性，将看到相关的引导提示。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/uYjL24iN/applink-protocol/supported-protocol/open-a-bot
func (r *AppLinkService) OpenBot(req *OpenBotReq) string {
	return internal.JoinAppLinkURL("https://applink.feishu.cn/client/bot/open", req)
}

type OpenBotReq struct {
	AppID string `json:"appId,omitempty"` // 机器人的appId
}
