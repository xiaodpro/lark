// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
	"io"
)

// UploadAttendanceFile
//
// 上传文件并获取文件 ID，可用于“修改用户设置”接口的 face_key 参数。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//rule/file_upload
func (r *AttendanceService) UploadAttendanceFile(ctx context.Context, request *UploadAttendanceFileReq, options ...MethodOptionFunc) (*UploadAttendanceFileResp, *Response, error) {
	if r.cli.mock.mockAttendanceUploadAttendanceFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UploadAttendanceFile mock enable")
		return r.cli.mock.mockAttendanceUploadAttendanceFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UploadAttendanceFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/files/upload",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadAttendanceFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceUploadAttendanceFile(f func(ctx context.Context, request *UploadAttendanceFileReq, options ...MethodOptionFunc) (*UploadAttendanceFileResp, *Response, error)) {
	r.mockAttendanceUploadAttendanceFile = f
}

func (r *Mock) UnMockAttendanceUploadAttendanceFile() {
	r.mockAttendanceUploadAttendanceFile = nil
}

type UploadAttendanceFileReq struct {
	FileName string    `query:"file_name" json:"-"` // 文件名
	File     io.Reader `json:"file,omitempty"`      // 文件
}

type uploadAttendanceFileResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UploadAttendanceFileResp `json:"data,omitempty"`
}

type UploadAttendanceFileResp struct {
	File *UploadAttendanceFileRespFile `json:"file,omitempty"` // 文件
}

type UploadAttendanceFileRespFile struct {
	FileID string `json:"file_id,omitempty"` // 文件 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateUpdateAttendanceGroup
//
// 考勤组，是对部门或者员工在某个特定场所及特定时间段内的出勤情况（包括上下班、迟到、早退、病假、婚假、丧假、公休、工作时间、加班情况等）的一种规则设定。
// 通过设置考勤组，可以从部门、员工两个维度，来设定考勤方式、考勤时间、考勤地点等考勤规则。
// 出于安全考虑，目前通过该接口只允许修改自己创建的考勤组。
// ### 考勤组负责人
// 考勤组负责人可修改该考勤组的排班，并查看该考勤组的考勤数据。
// 如果考勤组负责人同时被企业管理员赋予了考勤管理员的角色，则该考勤组负责人还拥有考勤管理员的权限，可以编辑及删除考勤规则。
// ### 考勤组人员
// 可按部门、员工两个维度，设置需要参加考勤或无需参加考勤的人员。
// - 若是按部门维度添加的考勤人员，当有新员工加入该部门时，其会自动加入该考勤组。
// - 若是按员工维度添加的考勤人员，当其上级部门被添加到其他考勤组时，该员工不会更换考勤组。
// ### 考勤组类型
// 提供 3 种不同的考勤类型：固定班制、排班制、自由班制。
// - 固定班制：指考勤组内每位人员的上下班时间一致，适用于上下班时间固定或无需安排多个班次的考勤组。
// - 排班制：指考勤组人员的上下班时间不完全一致，可自定义安排每位人员的上下班时间，适用于存在多个班次如早晚班的考勤组。
// - 自由班制：指没有具体的班次，考勤组人员可以在打卡时段内自由打卡，按照打卡时段统计上班时长。
// ### 考勤班次
// - 固定班制下，需设置周一到周日每天安排哪个班次，以及可针对特殊日期进行打卡设置。
// - 排班制下，需对考勤组内每一位人员的每一天进行班次指定。
// - 自由班制下，需设置一天中最早打卡时间和最晚打卡时间，以及一周中哪几天需要打卡。
// ### 考勤方式
// 支持 3 种考勤方式：GPS 打卡、Wi-Fi 打卡、考勤机打卡。
// - GPS 打卡：需设置经纬度信息及考勤地点名称。
// - Wi-Fi 打卡：需设置 Wi-Fi 名称及 Wi-Fi 的 MAC 地址。
// - 考勤机打卡：需设置考勤机名称及考勤机序号。
// ### 考勤其他设置
// - 规则设置：支持设置是否允许外勤打卡，是否允许补卡以及一个月补卡的次数，是否允许 PC 端打卡。
// - 安全设置：支持设置是否开启人脸识别打卡，以及什么情况下开启人脸识别。
// - 统计设置：支持设置考勤组人员是否可以查看到某些维度的统计数据。
// - 加班设置：支持配置加班时间的计算规则。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//group_create_update
func (r *AttendanceService) CreateUpdateAttendanceGroup(ctx context.Context, request *CreateUpdateAttendanceGroupReq, options ...MethodOptionFunc) (*CreateUpdateAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateUpdateAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateUpdateAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceCreateUpdateAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateUpdateAttendanceGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createUpdateAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceCreateUpdateAttendanceGroup(f func(ctx context.Context, request *CreateUpdateAttendanceGroupReq, options ...MethodOptionFunc) (*CreateUpdateAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceCreateUpdateAttendanceGroup = f
}

func (r *Mock) UnMockAttendanceCreateUpdateAttendanceGroup() {
	r.mockAttendanceCreateUpdateAttendanceGroup = nil
}

type CreateUpdateAttendanceGroupReq struct {
	EmployeeType EmployeeType                         `query:"employee_type" json:"-"` // 用户 ID 的类型，必选字段，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】
	DeptType     string                               `query:"dept_type" json:"-"`     // 部门 ID 的类型，必选字段，可用值：【open_id（暂时只支持部门的 openid）】，示例值：“od-fcb45c28a45311afd441b8869541ece8”
	Group        *CreateUpdateAttendanceGroupReqGroup `json:"group,omitempty"`         // 考勤组
}

type CreateUpdateAttendanceGroupReqGroup struct {
	GroupID                *string                                                     `json:"group_id,omitempty"`                   // 考勤组的 ID, 需要从获取用户打卡结果的接口中获取 groupId
	GroupName              string                                                      `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                                      `json:"time_zone,omitempty"`                  // 时区，可参考时区列表 https://www.zeitverschiebung.net/cn/all-time-zones.html
	BindDeptIDs            []string                                                    `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                                    `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                                    `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                                    `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                                    `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，需至少存在一名考勤负责人
	PunchType              *int64                                                      `json:"punch_type,omitempty"`                 // 考勤方式，0：考勤组人员可在任意地点、任意网络环境下打卡，1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡。位运算，累加可支持多种考勤方式，比如，3：支持 GPS 打卡和 Wi-Fi 打卡，7：支持 GPS 打卡、Wi-Fi 打卡和考勤机打卡
	AllowOutPunch          *bool                                                       `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           *bool                                                       `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            *bool                                                       `json:"allow_remedy,omitempty"`               // 是否允许补卡
	RemedyLimit            *bool                                                       `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       *int64                                                      `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyPeriodType       *int64                                                      `json:"remedy_period_type,omitempty"`         // 补卡次数周期类型，0：自然月，1：自定义周期
	RemedyPeriodCustomDate *int64                                                      `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期每月起始日
	RemedyDateLimit        *bool                                                       `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          *int64                                                      `json:"remedy_date_num,omitempty"`            // 补卡时间
	ShowCumulativeTime     *bool                                                       `json:"show_cumulative_time,omitempty"`       // 是否展示上班累计时长
	ShowOverTime           *bool                                                       `json:"show_over_time,omitempty"`             // 是否展示加班累计时长
	HideStaffPunchTime     *bool                                                       `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡具体时间
	FacePunch              *bool                                                       `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           *int64                                                      `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          *bool                                                       `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        *bool                                                       `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*CreateUpdateAttendanceGroupReqGroupMachine               `json:"machines,omitempty"`                   // 考勤机列表
	Locations              []*CreateUpdateAttendanceGroupReqGroupLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                                       `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制，3：自由班制
	PunchDayShiftIDs       []string                                                    `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填，长度必须等于7
	FreePunchCfg           *CreateUpdateAttendanceGroupReqGroupFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                                       `json:"calendar_id,omitempty"`                // 国家法定节假日历 ID，0：不根据国家法定节假日历排休，1：中国，2：美国，3：日本，4：印度，5：新加坡，默认为 1，必选字段
	NeedPunchSpecialDays   []*CreateUpdateAttendanceGroupReqGroupNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*CreateUpdateAttendanceGroupReqGroupNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	EffectNow              *bool                                                       `json:"effect_now,omitempty"`                 // 是否立即生效，默认为 false
}

type CreateUpdateAttendanceGroupReqGroupMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

type CreateUpdateAttendanceGroupReqGroupLocation struct {
	LocationID   *string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string   `json:"location_name,omitempty"` // 地址名称，必选字段
	LocationType *int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wifi，8：IP
	Latitude     *float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    *float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         *string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        *string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      *int64   `json:"map_type,omitempty"`      // 地图类型，1：高德, 2：谷歌
	Address      *string  `json:"address,omitempty"`       // 地址名称
	Ip           *string  `json:"ip,omitempty"`            // IP 地址
	Feature      *string  `json:"feature,omitempty"`       // 额外信息，例如运营商信息
	GpsRange     *int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围（默认300m）
}

type CreateUpdateAttendanceGroupReqGroupFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制的打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制的打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡时间：7 位数字，从左到右依次代表周一到周日，0 为不上班，1 为上班。例如：周一到周五上班 1111100
	WorkDayNoPunchAsLack *bool  `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

type CreateUpdateAttendanceGroupReqGroupNeedPunchSpecialDay struct {
	PunchDay *int64 `json:"punch_day,omitempty"` // 打卡日期，格式 20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

type CreateUpdateAttendanceGroupReqGroupNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期，格式 20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

type createUpdateAttendanceGroupResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateUpdateAttendanceGroupResp `json:"data,omitempty"` // -
}

type CreateUpdateAttendanceGroupResp struct {
	Group *CreateUpdateAttendanceGroupRespGroup `json:"group,omitempty"` // 考勤组
}

type CreateUpdateAttendanceGroupRespGroup struct {
	GroupID                string                                                       `json:"group_id,omitempty"`                   // 考勤组的 ID, 需要从获取用户打卡结果的接口中获取 groupId
	GroupName              string                                                       `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                                       `json:"time_zone,omitempty"`                  // 时区
	BindDeptIDs            []string                                                     `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                                     `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                                     `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                                     `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                                     `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段
	PunchType              int64                                                        `json:"punch_type,omitempty"`                 // 考勤方式，0：考勤组人员可在任意地点、任意网络环境下打卡，1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡。位运算，累加可支持多种考勤方式，比如，3：支持 GPS 打卡和 Wi-Fi 打卡，7：支持 GPS 打卡、Wi-Fi 打卡和考勤机打卡
	AllowOutPunch          bool                                                         `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           bool                                                         `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            bool                                                         `json:"allow_remedy,omitempty"`               // 是否允许补卡
	RemedyLimit            bool                                                         `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       int64                                                        `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyPeriodType       int64                                                        `json:"remedy_period_type,omitempty"`         // 补卡次数周期类型，0：自然月，1：自定义周期
	RemedyPeriodCustomDate int64                                                        `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期每月起始日
	RemedyDateLimit        bool                                                         `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          int64                                                        `json:"remedy_date_num,omitempty"`            // 补卡时间
	ShowCumulativeTime     bool                                                         `json:"show_cumulative_time,omitempty"`       // 是否展示上班累计时长
	ShowOverTime           bool                                                         `json:"show_over_time,omitempty"`             // 是否展示加班累计时长
	HideStaffPunchTime     bool                                                         `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡具体时间
	FacePunch              bool                                                         `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           int64                                                        `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          bool                                                         `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        bool                                                         `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*CreateUpdateAttendanceGroupRespGroupMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               int64                                                        `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）
	Locations              []*CreateUpdateAttendanceGroupRespGroupLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                                        `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制，3：自由班制
	PunchDayShiftIDs       []string                                                     `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填
	FreePunchCfg           *CreateUpdateAttendanceGroupRespGroupFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                                        `json:"calendar_id,omitempty"`                // 国家法定节假日历 ID，0：不根据国家法定节假日历排休，1：中国，2：美国，3：日本，4：印度，5：新加坡，默认为 1
	NeedPunchSpecialDays   []*CreateUpdateAttendanceGroupRespGroupNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*CreateUpdateAttendanceGroupRespGroupNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   bool                                                         `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下工作日不打卡是否记为缺卡
}

type CreateUpdateAttendanceGroupRespGroupMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

type CreateUpdateAttendanceGroupRespGroupLocation struct {
	LocationID   string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string  `json:"location_name,omitempty"` // 地址名称
	LocationType int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wifi，8：IP
	Latitude     float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      int64   `json:"map_type,omitempty"`      // 地图类型，1：高德，2：谷歌
	Address      string  `json:"address,omitempty"`       // 地址名称
	Ip           string  `json:"ip,omitempty"`            // IP 地址
	Feature      string  `json:"feature,omitempty"`       // 额外信息，例如运营商信息
	GpsRange     int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围（默认300m）
}

type CreateUpdateAttendanceGroupRespGroupFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制的打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制的打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡时间：7 位数字，从左到右依次代表周一到周日，0 为不上班，1 为上班。例如：周一到周五上班 1111100
	WorkDayNoPunchAsLack bool   `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

type CreateUpdateAttendanceGroupRespGroupNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期，格式 20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

type CreateUpdateAttendanceGroupRespGroupNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期，格式 20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteAttendanceGroup
//
// 通过考勤组 ID 删除考勤组。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//group_delete
func (r *AttendanceService) DeleteAttendanceGroup(ctx context.Context, request *DeleteAttendanceGroupReq, options ...MethodOptionFunc) (*DeleteAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceDeleteAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceDeleteAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DeleteAttendanceGroup",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceDeleteAttendanceGroup(f func(ctx context.Context, request *DeleteAttendanceGroupReq, options ...MethodOptionFunc) (*DeleteAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceDeleteAttendanceGroup = f
}

func (r *Mock) UnMockAttendanceDeleteAttendanceGroup() {
	r.mockAttendanceDeleteAttendanceGroup = nil
}

type DeleteAttendanceGroupReq struct {
	GroupID string `path:"group_id" json:"-"` // 考勤组的 ID，需要从获取打卡结果的接口中获取 group_id，示例值："6919358128597097404"
}

type deleteAttendanceGroupResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteAttendanceGroupResp `json:"data,omitempty"`
}

type DeleteAttendanceGroupResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceGroup
//
// 通过考勤组 ID 获取考勤组详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//group
func (r *AttendanceService) GetAttendanceGroup(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceGroup",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceGroup(f func(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceGetAttendanceGroup = f
}

func (r *Mock) UnMockAttendanceGetAttendanceGroup() {
	r.mockAttendanceGetAttendanceGroup = nil
}

type GetAttendanceGroupReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 用户 ID 的类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】
	DeptType     string       `query:"dept_type" json:"-"`     // 部门 ID 的类型，可用值：【open_id（暂时只支持部门的 openid）】，示例值：“od-fcb45c28a45311afd441b8869541ece8”
	GroupID      string       `path:"group_id" json:"-"`       // 考勤组的 ID，需要从获取打卡结果的接口中获取 group_id，示例值："6919358128597097404"
}

type getAttendanceGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceGroupResp `json:"data,omitempty"` // -
}

type GetAttendanceGroupResp struct {
	GroupID *GetAttendanceGroupRespGroupID `json:"group_id,omitempty"` // 考勤组的 ID，需要从获取用户打卡结果的接口中获取 groupId
}

type GetAttendanceGroupRespGroupID struct {
	GroupName              string                                                `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                                `json:"time_zone,omitempty"`                  // 时区
	BindDeptIDs            []string                                              `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                              `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                              `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                              `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                              `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段
	PunchType              int64                                                 `json:"punch_type,omitempty"`                 // 考勤方式，0：考勤组人员可在任意地点、任意网络环境下打卡，1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡。位运算，累加可支持多种考勤方式，比如，3：支持 GPS 打卡和 Wi-Fi 打卡，7：支持 GPS 打卡、Wi-Fi 打卡和考勤机打卡
	AllowOutPunch          bool                                                  `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           bool                                                  `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            bool                                                  `json:"allow_remedy,omitempty"`               // 是否允许补卡
	RemedyLimit            bool                                                  `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       int64                                                 `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyPeriodType       int64                                                 `json:"remedy_period_type,omitempty"`         // 补卡次数周期类型，0：自然月，1：自定义周期
	RemedyPeriodCustomDate int64                                                 `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期每月起始日
	RemedyDateLimit        bool                                                  `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          int64                                                 `json:"remedy_date_num,omitempty"`            // 补卡时间
	ShowCumulativeTime     bool                                                  `json:"show_cumulative_time,omitempty"`       // 是否展示上班累计时长
	ShowOverTime           bool                                                  `json:"show_over_time,omitempty"`             // 是否展示加班累计时长
	HideStaffPunchTime     bool                                                  `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡具体时间
	FacePunch              bool                                                  `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           int64                                                 `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          bool                                                  `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        bool                                                  `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*GetAttendanceGroupRespGroupIDMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               int64                                                 `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）
	Locations              []*GetAttendanceGroupRespGroupIDLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                                 `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制，3：自由班制
	PunchDayShiftIDs       []string                                              `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填
	FreePunchCfg           *GetAttendanceGroupRespGroupIDFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                                 `json:"calendar_id,omitempty"`                // 国家法定节假日历 ID，0：不根据国家法定节假日历排休，1：中国，2：美国，3：日本，4：印度，5：新加坡，默认为 1
	NeedPunchSpecialDays   []*GetAttendanceGroupRespGroupIDNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*GetAttendanceGroupRespGroupIDNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   bool                                                  `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下，工作日不打卡是否记为缺卡
}

type GetAttendanceGroupRespGroupIDMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

type GetAttendanceGroupRespGroupIDLocation struct {
	LocationID   string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string  `json:"location_name,omitempty"` // 地址名称
	LocationType int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wifi，8：IP
	Latitude     float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      int64   `json:"map_type,omitempty"`      // 地图类型，1：高德，2：谷歌
	Address      string  `json:"address,omitempty"`       // 地址名称
	Ip           string  `json:"ip,omitempty"`            // IP 地址
	Feature      string  `json:"feature,omitempty"`       // 额外信息，例如运营商信息
	GpsRange     int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围
}

type GetAttendanceGroupRespGroupIDFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制的打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制的打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡时间：7 位数字，从左到右依次代表周一到周日，0 为不上班，1 为上班。例如：周一到周五上班 1111100
	WorkDayNoPunchAsLack bool   `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

type GetAttendanceGroupRespGroupIDNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期，格式 20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

type GetAttendanceGroupRespGroupIDNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期，格式 20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// InitAttendanceRemedyApproval
//
// 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书的考勤系统中。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/notify-remedy-approval-initiation
func (r *AttendanceService) InitAttendanceRemedyApproval(ctx context.Context, request *InitAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*InitAttendanceRemedyApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceInitAttendanceRemedyApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#InitAttendanceRemedyApproval mock enable")
		return r.cli.mock.mockAttendanceInitAttendanceRemedyApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "InitAttendanceRemedyApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(initAttendanceRemedyApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceInitAttendanceRemedyApproval(f func(ctx context.Context, request *InitAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*InitAttendanceRemedyApprovalResp, *Response, error)) {
	r.mockAttendanceInitAttendanceRemedyApproval = f
}

func (r *Mock) UnMockAttendanceInitAttendanceRemedyApproval() {
	r.mockAttendanceInitAttendanceRemedyApproval = nil
}

type InitAttendanceRemedyApprovalReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_id 的员工工号类型，必选字段，可用值：【employee_id（员工employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 补卡日期
	PunchNo      int64        `json:"punch_no,omitempty"`      // 第几次上下班，可用值【0（第 1 次上下班），1（第 2 次上下班），2（第 3 次上下班）】，自由班次时填 0
	WorkType     int64        `json:"work_type,omitempty"`     // 上班/下班，1：上班，2：下班，自由班次时填 0
	RemedyTime   string       `json:"remedy_time,omitempty"`   // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Reason       string       `json:"reason,omitempty"`        // 补卡原因
}

type initAttendanceRemedyApprovalResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *InitAttendanceRemedyApprovalResp `json:"data,omitempty"` // -
}

type InitAttendanceRemedyApprovalResp struct {
	UserRemedy *InitAttendanceRemedyApprovalRespUserRemedy `json:"user_remedy,omitempty"`
}

type InitAttendanceRemedyApprovalRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 用户 ID
	ApprovalID string `json:"approval_id,omitempty"` // 审批实例 ID，可用于通知审批状态更新
	RemedyDate int64  `json:"remedy_date,omitempty"` // 补卡日期
	PunchNo    int64  `json:"punch_no,omitempty"`    // 第几次上下班，可用值【0（第 1 次上下班），1（第2次上下班），2（第3次上下班）】，自由班次时填 0
	WorkType   int64  `json:"work_type,omitempty"`   // 上班/下班，1：上班，2：下班
	RemedyTime string `json:"remedy_time,omitempty"` // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Reason     string `json:"reason,omitempty"`      // 补卡原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceRemedyApproval
//
// 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口更新写入飞书考勤系统中的三方系统审批状态，例如请假、加班、外出、出差、补卡等审批，状态包括通过、不通过、撤销等。
// 发起状态的审批才可以被更新为通过、不通过，已经通过的审批才可以被更新为撤销。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/notify-approval-status-update
func (r *AttendanceService) UpdateAttendanceRemedyApproval(ctx context.Context, request *UpdateAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*UpdateAttendanceRemedyApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceRemedyApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceRemedyApproval mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceRemedyApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceRemedyApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/approval_infos/process",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceRemedyApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceUpdateAttendanceRemedyApproval(f func(ctx context.Context, request *UpdateAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*UpdateAttendanceRemedyApprovalResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceRemedyApproval = f
}

func (r *Mock) UnMockAttendanceUpdateAttendanceRemedyApproval() {
	r.mockAttendanceUpdateAttendanceRemedyApproval = nil
}

type UpdateAttendanceRemedyApprovalReq struct {
	ApprovalID   string `json:"approval_id,omitempty"`   // 审批实例 ID
	ApprovalType string `json:"approval_type,omitempty"` // 审批类型，leave：请假，out：外出，overtime：加班，trip：出差，remedy：补卡
	Status       int64  `json:"status,omitempty"`        // 审批状态，1：不通过，2：通过，4：撤销
}

type updateAttendanceRemedyApprovalResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceRemedyApprovalResp `json:"data,omitempty"` // -
}

type UpdateAttendanceRemedyApprovalResp struct {
	ApprovalInfo *UpdateAttendanceRemedyApprovalRespApprovalInfo `json:"approval_info,omitempty"`
}

type UpdateAttendanceRemedyApprovalRespApprovalInfo struct {
	ApprovalID   string `json:"approval_id,omitempty"`   // 审批实例 ID
	ApprovalType string `json:"approval_type,omitempty"` // 审批类型，leave：请假，out：外出，overtime：加班，trip：出差，remedy：补卡
	Status       int64  `json:"status,omitempty"`        // 审批状态，1：不通过，2：通过，4：已撤销
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceShift
//
// 班次是描述一次考勤任务时间规则的统称，比如一天打多少次卡，每次卡的上下班时间，晚到多长时间算迟到，晚到多长时间算缺卡等。
// - 创建一个考勤组前，必须先创建一个或者多个班次。
// - 一个公司内的班次是共享的，你可以直接引用他人创建的班次，但是需要注意的是，若他人修改了班次，会影响到你的考勤组及其考勤结果。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//shift_create
func (r *AttendanceService) CreateAttendanceShift(ctx context.Context, request *CreateAttendanceShiftReq, options ...MethodOptionFunc) (*CreateAttendanceShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceShift mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceCreateAttendanceShift(f func(ctx context.Context, request *CreateAttendanceShiftReq, options ...MethodOptionFunc) (*CreateAttendanceShiftResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceShift = f
}

func (r *Mock) UnMockAttendanceCreateAttendanceShift() {
	r.mockAttendanceCreateAttendanceShift = nil
}

type CreateAttendanceShiftReq struct {
	ShiftName         string                                     `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                      `json:"punch_times,omitempty"`           // 打卡次数、，需小于等于 3 次
	IsFlexible        *bool                                      `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   *int64                                     `json:"flexible_minutes,omitempty"`      // 弹性打卡时间
	NoNeedOff         *bool                                      `json:"no_need_off,omitempty"`           // 是否下班免打卡
	PunchTimeRule     *CreateAttendanceShiftReqPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *CreateAttendanceShiftReqLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *CreateAttendanceShiftReqRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息时间规则
}

type CreateAttendanceShiftReqPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间，示例参数：“09:00”
	OffTime             string `json:"off_time,omitempty"`               // 下班时间，示例参数：“18:00”，说明：第二天凌晨 2 点表示为 26:00
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多长时间记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多长时间记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早可提前多长时间打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早走多长时间记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早走多长时间记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚可延后多长时间打下班卡
}

type CreateAttendanceShiftReqLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多长时间
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多长时间
}

type CreateAttendanceShiftReqRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始时间，示例参数：“13:00”
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束时间，示例参数：“14:00”
}

type createAttendanceShiftResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceShiftResp `json:"data,omitempty"` // -
}

type CreateAttendanceShiftResp struct {
	Shift *CreateAttendanceShiftRespShift `json:"shift,omitempty"` // 班次
}

type CreateAttendanceShiftRespShift struct {
	ShiftID           string                                           `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                           `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                            `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                             `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                            `json:"flexible_minutes,omitempty"`      // 弹性打卡时间
	NoNeedOff         bool                                             `json:"no_need_off,omitempty"`           // 是否下班免打卡
	PunchTimeRule     *CreateAttendanceShiftRespShiftPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *CreateAttendanceShiftRespShiftLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *CreateAttendanceShiftRespShiftRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息时间规则
}

type CreateAttendanceShiftRespShiftPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多长时间记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多长时间记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早可提前多长时间打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早走多长时间记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早走多长时间记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚可延后多长时间打下班卡
}

type CreateAttendanceShiftRespShiftLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多长时间
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多长时间
}

type CreateAttendanceShiftRespShiftRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始时间
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteAttendanceShift
//
// 通过班次 ID 删除班次。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//shift_delete
func (r *AttendanceService) DeleteAttendanceShift(ctx context.Context, request *DeleteAttendanceShiftReq, options ...MethodOptionFunc) (*DeleteAttendanceShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceDeleteAttendanceShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteAttendanceShift mock enable")
		return r.cli.mock.mockAttendanceDeleteAttendanceShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DeleteAttendanceShift",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/:shift_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteAttendanceShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceDeleteAttendanceShift(f func(ctx context.Context, request *DeleteAttendanceShiftReq, options ...MethodOptionFunc) (*DeleteAttendanceShiftResp, *Response, error)) {
	r.mockAttendanceDeleteAttendanceShift = f
}

func (r *Mock) UnMockAttendanceDeleteAttendanceShift() {
	r.mockAttendanceDeleteAttendanceShift = nil
}

type DeleteAttendanceShiftReq struct {
	ShiftID string `path:"shift_id" json:"-"` // 班次 ID，示例值："6919358778597097404"
}

type deleteAttendanceShiftResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteAttendanceShiftResp `json:"data,omitempty"`
}

type DeleteAttendanceShiftResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceShiftByID
//
// 通过班次 ID 获取班次详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//shift_by_id
func (r *AttendanceService) GetAttendanceShiftByID(ctx context.Context, request *GetAttendanceShiftByIDReq, options ...MethodOptionFunc) (*GetAttendanceShiftByIDResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceShiftByID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceShiftByID mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceShiftByID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceShiftByID",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/:shift_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceShiftByIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceShiftByID(f func(ctx context.Context, request *GetAttendanceShiftByIDReq, options ...MethodOptionFunc) (*GetAttendanceShiftByIDResp, *Response, error)) {
	r.mockAttendanceGetAttendanceShiftByID = f
}

func (r *Mock) UnMockAttendanceGetAttendanceShiftByID() {
	r.mockAttendanceGetAttendanceShiftByID = nil
}

type GetAttendanceShiftByIDReq struct {
	ShiftID string `path:"shift_id" json:"-"` // 班次 ID，示例值："6919358778597097404"
}

type getAttendanceShiftByIDResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceShiftByIDResp `json:"data,omitempty"` // -
}

type GetAttendanceShiftByIDResp struct {
	ShiftID           string                                       `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                       `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                        `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                         `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                        `json:"flexible_minutes,omitempty"`      // 弹性打卡时间
	NoNeedOff         bool                                         `json:"no_need_off,omitempty"`           // 是否下班免打卡
	PunchTimeRule     *GetAttendanceShiftByIDRespPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *GetAttendanceShiftByIDRespLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *GetAttendanceShiftByIDRespRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息时间规则
}

type GetAttendanceShiftByIDRespPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多长时间记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多长时间记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早可提前多长时间打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早走多长时间记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早走多长时间记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚可延后多长时间打下班卡
}

type GetAttendanceShiftByIDRespLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多长时间
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多长时间
}

type GetAttendanceShiftByIDRespRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始时间
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceShiftByName
//
// 通过班次的名称获取班次信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//shift_by_name
func (r *AttendanceService) GetAttendanceShiftByName(ctx context.Context, request *GetAttendanceShiftByNameReq, options ...MethodOptionFunc) (*GetAttendanceShiftByNameResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceShiftByName != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceShiftByName mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceShiftByName(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceShiftByName",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceShiftByNameResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceShiftByName(f func(ctx context.Context, request *GetAttendanceShiftByNameReq, options ...MethodOptionFunc) (*GetAttendanceShiftByNameResp, *Response, error)) {
	r.mockAttendanceGetAttendanceShiftByName = f
}

func (r *Mock) UnMockAttendanceGetAttendanceShiftByName() {
	r.mockAttendanceGetAttendanceShiftByName = nil
}

type GetAttendanceShiftByNameReq struct {
	ShiftName string `query:"shift_name" json:"-"` // 班次名称，示例值："早班"
}

type getAttendanceShiftByNameResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceShiftByNameResp `json:"data,omitempty"` // -
}

type GetAttendanceShiftByNameResp struct {
	ShiftID           string                                         `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                         `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                          `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                           `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                          `json:"flexible_minutes,omitempty"`      // 弹性打卡时间
	NoNeedOff         bool                                           `json:"no_need_off,omitempty"`           // 是否下班免打卡
	PunchTimeRule     *GetAttendanceShiftByNameRespPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *GetAttendanceShiftByNameRespLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *GetAttendanceShiftByNameRespRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息时间规则
}

type GetAttendanceShiftByNameRespPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多长时间记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多长时间记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早可提前多长时间打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早走多长时间记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早走多长时间记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚可延后多长时间打下班卡
}

type GetAttendanceShiftByNameRespLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多长时间
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多长时间
}

type GetAttendanceShiftByNameRespRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始时间
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceStatisticsData
//
// 查询日度统计或月度统计的统计数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/query-statistics-data
func (r *AttendanceService) GetAttendanceStatisticsData(ctx context.Context, request *GetAttendanceStatisticsDataReq, options ...MethodOptionFunc) (*GetAttendanceStatisticsDataResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceStatisticsData != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceStatisticsData mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceStatisticsData(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceStatisticsData",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_datas/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceStatisticsDataResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceStatisticsData(f func(ctx context.Context, request *GetAttendanceStatisticsDataReq, options ...MethodOptionFunc) (*GetAttendanceStatisticsDataResp, *Response, error)) {
	r.mockAttendanceGetAttendanceStatisticsData = f
}

func (r *Mock) UnMockAttendanceGetAttendanceStatisticsData() {
	r.mockAttendanceGetAttendanceStatisticsData = nil
}

type GetAttendanceStatisticsDataReq struct {
	EmployeeType     EmployeeType `query:"employee_type" json:"-"`      // 用户 ID 类型, 可选值有: `employee_id`, `employee_no`
	Locale           string       `json:"locale,omitempty"`             // 语言类型, 可选值有: `en`：英文, `ja`：日文, `zh`：中文
	StatsType        string       `json:"stats_type,omitempty"`         // 统计类型,      , 可选值有: `daily`：日度统计, `month`：月度统计
	StartDate        int64        `json:"start_date,omitempty"`         // 开始时间, 示例值：20210316
	EndDate          int64        `json:"end_date,omitempty"`           // 结束时间, 示例值：20210323,      ,      （时间间隔不超过 40 天）
	UserIDs          []string     `json:"user_ids,omitempty"`           // 查询的用户 ID 列表,      ,      （用户数量不超过 20）
	NeedHistory      *bool        `json:"need_history,omitempty"`       // 是否包含历史数据, 示例值：true
	CurrentGroupOnly *bool        `json:"current_group_only,omitempty"` // 是否只包含当前考勤组, 示例值：true
}

type getAttendanceStatisticsDataResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceStatisticsDataResp `json:"data,omitempty"`
}

type GetAttendanceStatisticsDataResp struct {
	UserDatas []*GetAttendanceStatisticsDataRespUserData `json:"user_datas,omitempty"` // 用户统计数据
}

type GetAttendanceStatisticsDataRespUserData struct {
	Name   string                                         `json:"name,omitempty"`    // 姓名
	UserID string                                         `json:"user_id,omitempty"` // 用户 ID
	Datas  []*GetAttendanceStatisticsDataRespUserDataData `json:"datas,omitempty"`   // 数据
}

type GetAttendanceStatisticsDataRespUserDataData struct {
	Code     string                                                `json:"code,omitempty"`     // 字段编号
	Value    string                                                `json:"value,omitempty"`    // 数据值
	Features []*GetAttendanceStatisticsDataRespUserDataDataFeature `json:"features,omitempty"` // 数据属性
}

type GetAttendanceStatisticsDataRespUserDataDataFeature struct {
	Key   string `json:"key,omitempty"`   // 属性名
	Value string `json:"value,omitempty"` // 属性值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceStatisticsHeader
//
// 查询日度统计或月度统计的统计表头。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/query-statistics-header
func (r *AttendanceService) GetAttendanceStatisticsHeader(ctx context.Context, request *GetAttendanceStatisticsHeaderReq, options ...MethodOptionFunc) (*GetAttendanceStatisticsHeaderResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceStatisticsHeader != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceStatisticsHeader mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceStatisticsHeader(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceStatisticsHeader",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_fields/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceStatisticsHeaderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceStatisticsHeader(f func(ctx context.Context, request *GetAttendanceStatisticsHeaderReq, options ...MethodOptionFunc) (*GetAttendanceStatisticsHeaderResp, *Response, error)) {
	r.mockAttendanceGetAttendanceStatisticsHeader = f
}

func (r *Mock) UnMockAttendanceGetAttendanceStatisticsHeader() {
	r.mockAttendanceGetAttendanceStatisticsHeader = nil
}

type GetAttendanceStatisticsHeaderReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 用户 ID 类型, 可选值有: `employee_id`, `employee_no`
	Locale       string       `json:"locale,omitempty"`        // 语言类型, 可选值有: `en`：英文, `ja`：日文, `zh`：中文
	StatsType    string       `json:"stats_type,omitempty"`    // 统计类型,      , **可选值有**：     , `daily`：日度统计, `month`：月度统计
	StartDate    int64        `json:"start_date,omitempty"`    // 开始时间, 示例值：20210316,      ,      （时间间隔不超过 40 天）
	EndDate      int64        `json:"end_date,omitempty"`      // 结束时间, 示例值：20210323
}

type getAttendanceStatisticsHeaderResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceStatisticsHeaderResp `json:"data,omitempty"`
}

type GetAttendanceStatisticsHeaderResp struct {
	UserStatsField *GetAttendanceStatisticsHeaderRespUserStatsField `json:"user_stats_field,omitempty"` // 统计数据表头
}

type GetAttendanceStatisticsHeaderRespUserStatsField struct {
	StatsType string                                                  `json:"stats_type,omitempty"` // 统计类型,    , 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                                  `json:"user_id,omitempty"`    // 用户 ID
	Fields    []*GetAttendanceStatisticsHeaderRespUserStatsFieldField `json:"fields,omitempty"`     // 字段列表
}

type GetAttendanceStatisticsHeaderRespUserStatsFieldField struct {
	Code        string                                                            `json:"code,omitempty"`         // 字段编号
	Title       string                                                            `json:"title,omitempty"`        // 字段标题
	ChildFields []*GetAttendanceStatisticsHeaderRespUserStatsFieldFieldChildField `json:"child_fields,omitempty"` // 子字段列表
}

type GetAttendanceStatisticsHeaderRespUserStatsFieldFieldChildField struct {
	Code     string `json:"code,omitempty"`      // 字段编号
	Title    string `json:"title,omitempty"`     // 字段名称
	TimeUnit string `json:"time_unit,omitempty"` // 时间类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserAllowedRemedy
//
// 获取用户某天可以补第几次上/下班卡的时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/query-user-allowed-remedys
func (r *AttendanceService) GetAttendanceUserAllowedRemedy(ctx context.Context, request *GetAttendanceUserAllowedRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserAllowedRemedyResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserAllowedRemedy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserAllowedRemedy mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserAllowedRemedy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserAllowedRemedy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserAllowedRemedyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceUserAllowedRemedy(f func(ctx context.Context, request *GetAttendanceUserAllowedRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserAllowedRemedyResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserAllowedRemedy = f
}

func (r *Mock) UnMockAttendanceGetAttendanceUserAllowedRemedy() {
	r.mockAttendanceGetAttendanceUserAllowedRemedy = nil
}

type GetAttendanceUserAllowedRemedyReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_id 的员工工号类型，必选字段，可用值：【employee_id（员工employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 查询补卡的日期
}

type getAttendanceUserAllowedRemedyResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserAllowedRemedyResp `json:"data,omitempty"` // -
}

type GetAttendanceUserAllowedRemedyResp struct {
	UserAllowedRemedys *GetAttendanceUserAllowedRemedyRespUserAllowedRemedys `json:"user_allowed_remedys,omitempty"`
}

type GetAttendanceUserAllowedRemedyRespUserAllowedRemedys struct {
	UserID          string `json:"user_id,omitempty"`           // 用户 ID
	RemedyDate      int64  `json:"remedy_date,omitempty"`       // 补卡日期
	IsFreePunch     bool   `json:"is_free_punch,omitempty"`     // 是否为自由班次，若为自由班次，则不用选择考虑第几次上下班，直接选择补卡时间即可
	PunchNo         int64  `json:"punch_no,omitempty"`          // 第几次上下班，可用值：【0（第 1 次上下班），1（第 2 次上下班），2（第 3 次上下班）】
	WorkType        int64  `json:"work_type,omitempty"`         // 上班/下班，1：上班，2：下班
	PunchStatus     string `json:"punch_status,omitempty"`      // 打卡状态，可用值【Early（早退），Late（迟到），Lack（缺卡）】
	NormalPunchTime string `json:"normal_punch_time,omitempty"` // 正常的应打卡时间，时间格式为 yyyy-MM-dd HH:mm
	RemedyStartTime string `json:"remedy_start_time,omitempty"` // 可选的补卡时间的最小值，时间格式为 yyyy-MM-dd HH:mm
	RemedyEndTime   string `json:"remedy_end_time,omitempty"`   // 可选的补卡时间的最大值，时间格式为 yyyy-MM-dd HH:mm
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceUserApproval
//
// 由于部分企业使用的是自己的审批系统，而不是飞书审批系统，因此员工的请假、加班等数据无法流入到飞书考勤系统中，导致员工在请假时间段内依然收到打卡提醒，并且被记为缺卡。
// 对于这些只使用飞书考勤系统，而未使用飞书审批系统的企业，可以通过考勤开放接口的形式，将三方审批结果数据回写到飞书的考勤系统中。
// 目前支持加班、请假、出差和外出这四种审批结果的写入。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//AddApprovalsInLarkAttendance
func (r *AttendanceService) CreateAttendanceUserApproval(ctx context.Context, request *CreateAttendanceUserApprovalReq, options ...MethodOptionFunc) (*CreateAttendanceUserApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceUserApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceUserApproval mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceUserApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceUserApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_approvals",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceUserApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceCreateAttendanceUserApproval(f func(ctx context.Context, request *CreateAttendanceUserApprovalReq, options ...MethodOptionFunc) (*CreateAttendanceUserApprovalResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceUserApproval = f
}

func (r *Mock) UnMockAttendanceCreateAttendanceUserApproval() {
	r.mockAttendanceCreateAttendanceUserApproval = nil
}

type CreateAttendanceUserApprovalReq struct {
	EmployeeType EmployeeType                                 `query:"employee_type" json:"-"` // 请求体中的 user_id 的员工工号类型，必选字段，可用值：【employee_id（员工employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserApproval *CreateAttendanceUserApprovalReqUserApproval `json:"user_approval,omitempty"` // 审批信息
}

type CreateAttendanceUserApprovalReqUserApproval struct {
	UserID        string                                                     `json:"user_id,omitempty"`        // 审批用户
	Date          string                                                     `json:"date,omitempty"`           // 审批作用时间
	Outs          []*CreateAttendanceUserApprovalReqUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*CreateAttendanceUserApprovalReqUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*CreateAttendanceUserApprovalReqUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*CreateAttendanceUserApprovalReqUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

type CreateAttendanceUserApprovalReqUserApprovalOut struct {
	UniqID        string     `json:"uniq_id,omitempty"`        // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit          int64      `json:"unit,omitempty"`           // 外出时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval      int64      `json:"interval,omitempty"`       // 假期时长（单位秒）
	StartTime     string     `json:"start_time,omitempty"`     // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime       string     `json:"end_time,omitempty"`       // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames     *I18nNames `json:"i18n_names,omitempty"`     // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale string     `json:"default_locale,omitempty"` // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason        string     `json:"reason,omitempty"`         // 外出理由
}

type CreateAttendanceUserApprovalReqUserApprovalLeave struct {
	UniqID        string     `json:"uniq_id,omitempty"`        // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit          int64      `json:"unit,omitempty"`           // 假期时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval      int64      `json:"interval,omitempty"`       // 假期时长（单位秒）
	StartTime     string     `json:"start_time,omitempty"`     // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime       string     `json:"end_time,omitempty"`       // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames     *I18nNames `json:"i18n_names,omitempty"`     // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale string     `json:"default_locale,omitempty"` // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason        string     `json:"reason,omitempty"`         // 请假理由，必选字段
}

type CreateAttendanceUserApprovalReqUserApprovalOvertimeWork struct {
	Duration  float64 `json:"duration,omitempty"`   // 加班时长
	Unit      int64   `json:"unit,omitempty"`       // 加班时长单位，可用值：【1（天），2（小时）】
	Category  int64   `json:"category,omitempty"`   // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type      int64   `json:"type,omitempty"`       // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费）】
	StartTime string  `json:"start_time,omitempty"` // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime   string  `json:"end_time,omitempty"`   // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

type CreateAttendanceUserApprovalReqUserApprovalTrip struct {
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

type createAttendanceUserApprovalResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceUserApprovalResp `json:"data,omitempty"` // -
}

type CreateAttendanceUserApprovalResp struct {
	UserApprovals []*CreateAttendanceUserApprovalRespUserApproval `json:"user_approvals,omitempty"` // 审批结果列表
}

type CreateAttendanceUserApprovalRespUserApproval struct {
	UserID        string                                                      `json:"user_id,omitempty"`        // 审批用户 ID
	Date          string                                                      `json:"date,omitempty"`           // 审批作用时间
	Outs          []*CreateAttendanceUserApprovalRespUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*CreateAttendanceUserApprovalRespUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*CreateAttendanceUserApprovalRespUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*CreateAttendanceUserApprovalRespUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

type CreateAttendanceUserApprovalRespUserApprovalOut struct {
	ApprovalID       string     `json:"approval_id,omitempty"`        // 审批实例ID
	UniqID           string     `json:"uniq_id,omitempty"`            // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 外出时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval         int64      `json:"interval,omitempty"`           // 假期时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason           string     `json:"reason,omitempty"`             // 外出理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间
}

type CreateAttendanceUserApprovalRespUserApprovalLeave struct {
	ApprovalID       string     `json:"approval_id,omitempty"`        // 审批实例ID
	UniqID           string     `json:"uniq_id,omitempty"`            // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 假期时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval         int64      `json:"interval,omitempty"`           // 假期时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason           string     `json:"reason,omitempty"`             // 请假理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

type CreateAttendanceUserApprovalRespUserApprovalOvertimeWork struct {
	ApprovalID string  `json:"approval_id,omitempty"` // 审批实例ID
	Duration   float64 `json:"duration,omitempty"`    // 加班时长
	Unit       int64   `json:"unit,omitempty"`        // 加班时长单位，可用值：【1（天），2（小时）】
	Category   int64   `json:"category,omitempty"`    // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type       int64   `json:"type,omitempty"`        // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费），3（关联加班规则，没有调休或加班费）】
	StartTime  string  `json:"start_time,omitempty"`  // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime    string  `json:"end_time,omitempty"`    // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

type CreateAttendanceUserApprovalRespUserApprovalTrip struct {
	ApprovalID       string `json:"approval_id,omitempty"`        // 审批实例ID
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserApproval
//
// 获取员工在某段时间内的请假、加班、外出和出差四种审批的通过数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//RetrieveUserApprovals
func (r *AttendanceService) GetAttendanceUserApproval(ctx context.Context, request *GetAttendanceUserApprovalReq, options ...MethodOptionFunc) (*GetAttendanceUserApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserApproval mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_approvals/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceUserApproval(f func(ctx context.Context, request *GetAttendanceUserApprovalReq, options ...MethodOptionFunc) (*GetAttendanceUserApprovalResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserApproval = f
}

func (r *Mock) UnMockAttendanceGetAttendanceUserApproval() {
	r.mockAttendanceGetAttendanceUserApproval = nil
}

type GetAttendanceUserApprovalReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 的员工工号类型，必选字段，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表
	CheckDateFrom int64        `json:"check_date_from,omitempty"` // 查询的起始工作日
	CheckDateTo   int64        `json:"check_date_to,omitempty"`   // 查询的结束工作日，与 check_date_from 的时间间隔不超过30天
}

type getAttendanceUserApprovalResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserApprovalResp `json:"data,omitempty"` // -
}

type GetAttendanceUserApprovalResp struct {
	UserApprovals []*GetAttendanceUserApprovalRespUserApproval `json:"user_approvals,omitempty"` // 审批结果列表
}

type GetAttendanceUserApprovalRespUserApproval struct {
	UserID        string                                                   `json:"user_id,omitempty"`        // 审批用户 ID
	Date          string                                                   `json:"date,omitempty"`           // 审批作用时间
	Outs          []*GetAttendanceUserApprovalRespUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*GetAttendanceUserApprovalRespUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*GetAttendanceUserApprovalRespUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*GetAttendanceUserApprovalRespUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

type GetAttendanceUserApprovalRespUserApprovalOut struct {
	UniqID           string     `json:"uniq_id,omitempty"`            // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 外出时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval         int64      `json:"interval,omitempty"`           // 外出时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason           string     `json:"reason,omitempty"`             // 外出理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间
}

type GetAttendanceUserApprovalRespUserApprovalLeave struct {
	UniqID           string     `json:"uniq_id,omitempty"`            // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 假期时长单位，可用值：【1（天），0（小时），4（分钟）】
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason           string     `json:"reason,omitempty"`             // 请假理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

type GetAttendanceUserApprovalRespUserApprovalOvertimeWork struct {
	Duration  float64 `json:"duration,omitempty"`   // 加班时长
	Unit      int64   `json:"unit,omitempty"`       // 加班时长单位，可用值：【1（天），2（小时）】
	Category  int64   `json:"category,omitempty"`   // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type      int64   `json:"type,omitempty"`       // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费）】
	StartTime string  `json:"start_time,omitempty"` // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime   string  `json:"end_time,omitempty"`   // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

type GetAttendanceUserApprovalRespUserApprovalTrip struct {
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateUpdateAttendanceUserDailyShift
//
// 班表是用来描述考勤组内人员每天按哪个班次进行上班。目前班表支持按一个整月对一位或多位人员进行排班。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//CreateandEditShifts
func (r *AttendanceService) CreateUpdateAttendanceUserDailyShift(ctx context.Context, request *CreateUpdateAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*CreateUpdateAttendanceUserDailyShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateUpdateAttendanceUserDailyShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateUpdateAttendanceUserDailyShift mock enable")
		return r.cli.mock.mockAttendanceCreateUpdateAttendanceUserDailyShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateUpdateAttendanceUserDailyShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_daily_shifts/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createUpdateAttendanceUserDailyShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceCreateUpdateAttendanceUserDailyShift(f func(ctx context.Context, request *CreateUpdateAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*CreateUpdateAttendanceUserDailyShiftResp, *Response, error)) {
	r.mockAttendanceCreateUpdateAttendanceUserDailyShift = f
}

func (r *Mock) UnMockAttendanceCreateUpdateAttendanceUserDailyShift() {
	r.mockAttendanceCreateUpdateAttendanceUserDailyShift = nil
}

type CreateUpdateAttendanceUserDailyShiftReq struct {
	EmployeeType    EmployeeType                                             `query:"employee_type" json:"-"`     // 请求体中的 user_id 的员工工号类型可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserDailyShifts []*CreateUpdateAttendanceUserDailyShiftReqUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

type CreateUpdateAttendanceUserDailyShiftReqUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID，休息为 0
	Month   int64  `json:"month,omitempty"`    // 月份
	UserID  string `json:"user_id,omitempty"`  // 用户
	DayNo   int64  `json:"day_no,omitempty"`   // 日期
}

type createUpdateAttendanceUserDailyShiftResp struct {
	Code int64                                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                    `json:"msg,omitempty"`  // 错误描述
	Data *CreateUpdateAttendanceUserDailyShiftResp `json:"data,omitempty"` // -
}

type CreateUpdateAttendanceUserDailyShiftResp struct {
	UserDailyShifts []*CreateUpdateAttendanceUserDailyShiftRespUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

type CreateUpdateAttendanceUserDailyShiftRespUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID
	Month   int64  `json:"month,omitempty"`    // 月份
	UserID  string `json:"user_id,omitempty"`  // 用户
	DayNo   int64  `json:"day_no,omitempty"`   // 日期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserDailyShift
//
// 支持查询多个用户的排班情况，查询的时间跨度不能超过 30 天。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/GetScheduledShifts
func (r *AttendanceService) GetAttendanceUserDailyShift(ctx context.Context, request *GetAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*GetAttendanceUserDailyShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserDailyShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserDailyShift mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserDailyShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserDailyShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_daily_shifts/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserDailyShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceUserDailyShift(f func(ctx context.Context, request *GetAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*GetAttendanceUserDailyShiftResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserDailyShift = f
}

func (r *Mock) UnMockAttendanceGetAttendanceUserDailyShift() {
	r.mockAttendanceGetAttendanceUserDailyShift = nil
}

type GetAttendanceUserDailyShiftReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表
	CheckDateFrom int64        `json:"check_date_from,omitempty"` // 查询的起始工作日
	CheckDateTo   int64        `json:"check_date_to,omitempty"`   // 查询的结束工作日
}

type getAttendanceUserDailyShiftResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserDailyShiftResp `json:"data,omitempty"` // -
}

type GetAttendanceUserDailyShiftResp struct {
	UserDailyShifts []*GetAttendanceUserDailyShiftRespUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

type GetAttendanceUserDailyShiftRespUserDailyShift struct {
	GroupID    string `json:"group_id,omitempty"`    // 考勤组 ID
	ShiftID    string `json:"shift_id,omitempty"`    // 班次 ID，休息为 0
	Month      int64  `json:"month,omitempty"`       // 月份
	EmployeeNo string `json:"employee_no,omitempty"` // 用户
	DayNo      int64  `json:"day_no,omitempty"`      // 日期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchCreateAttendanceUserFlow
//
// 导入授权内员工的打卡流水记录。导入后，会根据员工所在的考勤组班次规则，计算最终的打卡状态与结果。
// 适用于考勤机数据导入等场景。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//ImportAttendanceFlowRecords
func (r *AttendanceService) BatchCreateAttendanceUserFlow(ctx context.Context, request *BatchCreateAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchCreateAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchCreateAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceBatchCreateAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchCreateAttendanceUserFlow",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchCreateAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceBatchCreateAttendanceUserFlow(f func(ctx context.Context, request *BatchCreateAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceBatchCreateAttendanceUserFlow = f
}

func (r *Mock) UnMockAttendanceBatchCreateAttendanceUserFlow() {
	r.mockAttendanceBatchCreateAttendanceUserFlow = nil
}

type BatchCreateAttendanceUserFlowReq struct {
	EmployeeType EmployeeType                                  `query:"employee_type" json:"-"` // 请求体中的 user_id 和 creator_id 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值："employee_id"
	FlowRecords  []*BatchCreateAttendanceUserFlowReqFlowRecord `json:"flow_records,omitempty"`  // 打卡流水记录列表
}

type BatchCreateAttendanceUserFlowReqFlowRecord struct {
	UserID       string `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string `json:"creator_id,omitempty"`    // 打卡记录创建者的工号
	LocationName string `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string `json:"comment,omitempty"`       // 打卡备注
}

type batchCreateAttendanceUserFlowResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateAttendanceUserFlowResp `json:"data,omitempty"` // -
}

type BatchCreateAttendanceUserFlowResp struct {
	FlowRecords []*BatchCreateAttendanceUserFlowRespFlowRecord `json:"flow_records,omitempty"` // 打卡流水记录列表
}

type BatchCreateAttendanceUserFlowRespFlowRecord struct {
	UserID       string `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string `json:"creator_id,omitempty"`    // 打卡记录创建者的 employee_no
	LocationName string `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string `json:"comment,omitempty"`       // 打卡备注
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetAttendanceUserFlow
//
// 批量查询授权内员工的实际打卡记录。例如，企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，但是员工在这期间打了多次卡，该接口会把所有的打卡记录都返回。
// 如果只需获取打卡结果，而不需要打卡的详细数据，可使用“获取打卡结果”的接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//BatchQueryCheckinFlowHistory
func (r *AttendanceService) BatchGetAttendanceUserFlow(ctx context.Context, request *BatchGetAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchGetAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchGetAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchGetAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceBatchGetAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchGetAttendanceUserFlow",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceBatchGetAttendanceUserFlow(f func(ctx context.Context, request *BatchGetAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchGetAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceBatchGetAttendanceUserFlow = f
}

func (r *Mock) UnMockAttendanceBatchGetAttendanceUserFlow() {
	r.mockAttendanceBatchGetAttendanceUserFlow = nil
}

type BatchGetAttendanceUserFlowReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表，长度不超过50
	CheckTimeFrom string       `json:"check_time_from,omitempty"` // 查询的起始时间，时间戳
	CheckTimeTo   string       `json:"check_time_to,omitempty"`   // 查询的结束时间，时间戳
}

type batchGetAttendanceUserFlowResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *BatchGetAttendanceUserFlowResp `json:"data,omitempty"` // -
}

type BatchGetAttendanceUserFlowResp struct {
	UserFlowResults []*BatchGetAttendanceUserFlowRespUserFlowResult `json:"user_flow_results,omitempty"` // 打卡记录列表
}

type BatchGetAttendanceUserFlowRespUserFlowResult struct {
	UserID       string   `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string   `json:"creator_id,omitempty"`    // 打卡记录创建者的 employee_no
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式，可用值：【0（用户自己打卡），1（管理员修改），2（用户补卡），3（系统自动生成），4（下班免打卡），5（考勤机打卡），6（极速打卡），7（考勤开放平台导入），8（飞书自研考勤机），9（飞书门禁考勤机）】
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 手机打卡设备ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserFlow
//
// 通过打卡记录 ID 获取用户的打卡流水记录。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//GetCardSwipeHistory
func (r *AttendanceService) GetAttendanceUserFlow(ctx context.Context, request *GetAttendanceUserFlowReq, options ...MethodOptionFunc) (*GetAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserFlow",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/:user_flow_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceUserFlow(f func(ctx context.Context, request *GetAttendanceUserFlowReq, options ...MethodOptionFunc) (*GetAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserFlow = f
}

func (r *Mock) UnMockAttendanceGetAttendanceUserFlow() {
	r.mockAttendanceGetAttendanceUserFlow = nil
}

type GetAttendanceUserFlowReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_id 和 creator_id 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	UserFlowID   string       `path:"user_flow_id" json:"-"`   // 打卡流水记录 ID，示例值："6708236686834352397"
}

type getAttendanceUserFlowResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserFlowResp `json:"data,omitempty"` // -
}

type GetAttendanceUserFlowResp struct {
	UserID       string   `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string   `json:"creator_id,omitempty"`    // 打卡记录创建者的 employee_no
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式，可用值：【0（用户自己打卡），1（管理员修改），2（用户补卡），3（系统自动生成），4（下班免打卡），5（考勤机打卡），6（极速打卡），7（考勤开放平台导入），8（飞书自研考勤机），9（飞书门禁考勤机）】
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 手机打卡设备ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// QueryAttendanceUserSettings
//
// 批量查询授权内员工的用户设置信息，包括人脸照片文件 ID、人脸照片更新时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//rule/batch-query-user-settings
func (r *AttendanceService) QueryAttendanceUserSettings(ctx context.Context, request *QueryAttendanceUserSettingsReq, options ...MethodOptionFunc) (*QueryAttendanceUserSettingsResp, *Response, error) {
	if r.cli.mock.mockAttendanceQueryAttendanceUserSettings != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#QueryAttendanceUserSettings mock enable")
		return r.cli.mock.mockAttendanceQueryAttendanceUserSettings(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "QueryAttendanceUserSettings",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_settings/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(queryAttendanceUserSettingsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceQueryAttendanceUserSettings(f func(ctx context.Context, request *QueryAttendanceUserSettingsReq, options ...MethodOptionFunc) (*QueryAttendanceUserSettingsResp, *Response, error)) {
	r.mockAttendanceQueryAttendanceUserSettings = f
}

func (r *Mock) UnMockAttendanceQueryAttendanceUserSettings() {
	r.mockAttendanceQueryAttendanceUserSettings = nil
}

type QueryAttendanceUserSettingsReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_ids 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	UserIDs      []string     `json:"user_ids,omitempty"`      // employee_no 或 employee_id 列表，长度不超过 100
}

type queryAttendanceUserSettingsResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *QueryAttendanceUserSettingsResp `json:"data,omitempty"` // -
}

type QueryAttendanceUserSettingsResp struct {
	UserSettings []*QueryAttendanceUserSettingsRespUserSetting `json:"user_settings,omitempty"` // 用户设置信息列表
}

type QueryAttendanceUserSettingsRespUserSetting struct {
	UserID            string `json:"user_id,omitempty"`              // 员工工号
	FaceKey           string `json:"face_key,omitempty"`             // 人脸照片文件 ID
	FaceKeyUpdateTime string `json:"face_key_update_time,omitempty"` // 人脸照片更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceUserSettings
//
// 修改授权内员工的用户设置信息，包括人脸照片文件 ID。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//rule/user-setting-modify
func (r *AttendanceService) UpdateAttendanceUserSettings(ctx context.Context, request *UpdateAttendanceUserSettingsReq, options ...MethodOptionFunc) (*UpdateAttendanceUserSettingsResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceUserSettings != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceUserSettings mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceUserSettings(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceUserSettings",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_settings/modify",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceUserSettingsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceUpdateAttendanceUserSettings(f func(ctx context.Context, request *UpdateAttendanceUserSettingsReq, options ...MethodOptionFunc) (*UpdateAttendanceUserSettingsResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceUserSettings = f
}

func (r *Mock) UnMockAttendanceUpdateAttendanceUserSettings() {
	r.mockAttendanceUpdateAttendanceUserSettings = nil
}

type UpdateAttendanceUserSettingsReq struct {
	EmployeeType EmployeeType                                `query:"employee_type" json:"-"` // 用户类型,      , 可选值有: `employee_id`： 员工 ID, `employee_no`： 员工工号
	UserSetting  *UpdateAttendanceUserSettingsReqUserSetting `json:"user_setting,omitempty"`  // 用户信息
}

type UpdateAttendanceUserSettingsReqUserSetting struct {
	UserID  string `json:"user_id,omitempty"`  // 用户 ID
	FaceKey string `json:"face_key,omitempty"` // 人脸照片 key（通过文件上传接口得到）
}

type updateAttendanceUserSettingsResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceUserSettingsResp `json:"data,omitempty"`
}

type UpdateAttendanceUserSettingsResp struct {
	UserSetting *UpdateAttendanceUserSettingsRespUserSetting `json:"user_setting,omitempty"` // 用户设置
}

type UpdateAttendanceUserSettingsRespUserSetting struct {
	UserID  string `json:"user_id,omitempty"`  // 用户 ID
	FaceKey string `json:"face_key,omitempty"` // 人脸照片 key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserStatisticsSettings
//
// 查询日度统计或月度统计的统计设置信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/query-user-statistics-settings
func (r *AttendanceService) GetAttendanceUserStatisticsSettings(ctx context.Context, request *GetAttendanceUserStatisticsSettingsReq, options ...MethodOptionFunc) (*GetAttendanceUserStatisticsSettingsResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserStatisticsSettings != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserStatisticsSettings mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserStatisticsSettings(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserStatisticsSettings",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_views/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserStatisticsSettingsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceUserStatisticsSettings(f func(ctx context.Context, request *GetAttendanceUserStatisticsSettingsReq, options ...MethodOptionFunc) (*GetAttendanceUserStatisticsSettingsResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserStatisticsSettings = f
}

func (r *Mock) UnMockAttendanceGetAttendanceUserStatisticsSettings() {
	r.mockAttendanceGetAttendanceUserStatisticsSettings = nil
}

type GetAttendanceUserStatisticsSettingsReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 用户 ID 类型, 可选值有: `employee_id`, `employee_no`
	Locale       string       `json:"locale,omitempty"`        // 语言类型, 可选值有: `en`：英文, `ja`：日文, `zh`：中文
	StatsType    string       `json:"stats_type,omitempty"`    // 统计类型,      , 可选值有: `daily`：日度统计, `month`：月度统计
}

type getAttendanceUserStatisticsSettingsResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserStatisticsSettingsResp `json:"data,omitempty"`
}

type GetAttendanceUserStatisticsSettingsResp struct {
	View *GetAttendanceUserStatisticsSettingsRespView `json:"view,omitempty"` // 统计视图
}

type GetAttendanceUserStatisticsSettingsRespView struct {
	ViewID    string                                             `json:"view_id,omitempty"`    // 视图 ID
	StatsType string                                             `json:"stats_type,omitempty"` // 统计类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                             `json:"user_id,omitempty"`    // 用户 ID
	Items     []*GetAttendanceUserStatisticsSettingsRespViewItem `json:"items,omitempty"`      // 一级标题
}

type GetAttendanceUserStatisticsSettingsRespViewItem struct {
	Code       string                                                      `json:"code,omitempty"`        // 标题编号
	Title      string                                                      `json:"title,omitempty"`       // 标题名称
	ChildItems []*GetAttendanceUserStatisticsSettingsRespViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

type GetAttendanceUserStatisticsSettingsRespViewItemChildItem struct {
	Code       string `json:"code,omitempty"`        // 标题编号
	Value      string `json:"value,omitempty"`       // 是否开启,      , 可选值有: `0`：关闭, `1`：开启
	Title      string `json:"title,omitempty"`       // 标题名称
	ColumnType int64  `json:"column_type,omitempty"` // 标题类型
	ReadOnly   bool   `json:"read_only,omitempty"`   // 是否只读
	MinValue   string `json:"min_value,omitempty"`   // 最小值
	MaxValue   string `json:"max_value,omitempty"`   // 最大值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceUserStatisticsSettings
//
// 更新日度统计或月度统计的统计设置信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/update-user-stats-settings
func (r *AttendanceService) UpdateAttendanceUserStatisticsSettings(ctx context.Context, request *UpdateAttendanceUserStatisticsSettingsReq, options ...MethodOptionFunc) (*UpdateAttendanceUserStatisticsSettingsResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceUserStatisticsSettings != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceUserStatisticsSettings mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceUserStatisticsSettings(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceUserStatisticsSettings",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_views/:user_stats_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceUserStatisticsSettingsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceUpdateAttendanceUserStatisticsSettings(f func(ctx context.Context, request *UpdateAttendanceUserStatisticsSettingsReq, options ...MethodOptionFunc) (*UpdateAttendanceUserStatisticsSettingsResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceUserStatisticsSettings = f
}

func (r *Mock) UnMockAttendanceUpdateAttendanceUserStatisticsSettings() {
	r.mockAttendanceUpdateAttendanceUserStatisticsSettings = nil
}

type UpdateAttendanceUserStatisticsSettingsReq struct {
	EmployeeType    EmployeeType                                   `query:"employee_type" json:"-"`     // 用户 ID 类型, 可选值有: `employee_id`：用户员工 ID, `employee_no`：用户员工工号
	UserStatsViewID string                                         `path:"user_stats_view_id" json:"-"` // 用户视图 ID, 示例值："TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09"
	View            *UpdateAttendanceUserStatisticsSettingsReqView `json:"view,omitempty"`              // 统计视图
}

type UpdateAttendanceUserStatisticsSettingsReqView struct {
	ViewID    string                                               `json:"view_id,omitempty"`    // 视图 ID, 示例值："TmpnNU5EQXpPVGN3TmpVMU16Y3lPVEEwTXl0dGIyNTBhQT09"
	StatsType string                                               `json:"stats_type,omitempty"` // 统计类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                               `json:"user_id,omitempty"`    // 用户 ID
	Items     []*UpdateAttendanceUserStatisticsSettingsReqViewItem `json:"items,omitempty"`      // 一级标题
}

type UpdateAttendanceUserStatisticsSettingsReqViewItem struct {
	Code       string                                                        `json:"code,omitempty"`        // 编号, 示例值："501"
	Title      *string                                                       `json:"title,omitempty"`       // 标题名称, 示例值："基本信息"
	ChildItems []*UpdateAttendanceUserStatisticsSettingsReqViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

type UpdateAttendanceUserStatisticsSettingsReqViewItemChildItem struct {
	Code  string `json:"code,omitempty"`  // 标题编号, 示例值："50101"
	Value string `json:"value,omitempty"` // 开关字段,      , 可选值有: `0`：关闭, `1`：开启,非开关字段场景,  code = 51501  **可选值为1～6**
}

type updateAttendanceUserStatisticsSettingsResp struct {
	Code int64                                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceUserStatisticsSettingsResp `json:"data,omitempty"`
}

type UpdateAttendanceUserStatisticsSettingsResp struct {
	View *UpdateAttendanceUserStatisticsSettingsRespView `json:"view,omitempty"` // 用户视图
}

type UpdateAttendanceUserStatisticsSettingsRespView struct {
	ViewID    string                                                `json:"view_id,omitempty"`    // 统计视图 ID, 示例值："TmpnNU5EQXpPVGN3TmpVMU16Y3lPVEEwTXl0dGIyNTBhQT09"
	StatsType string                                                `json:"stats_type,omitempty"` // 统计类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                                `json:"user_id,omitempty"`    // 用户 ID
	Items     []*UpdateAttendanceUserStatisticsSettingsRespViewItem `json:"items,omitempty"`      // 一级标题
}

type UpdateAttendanceUserStatisticsSettingsRespViewItem struct {
	Code       string                                                         `json:"code,omitempty"`        // 标题编码
	Title      string                                                         `json:"title,omitempty"`       // 标题名称
	ChildItems []*UpdateAttendanceUserStatisticsSettingsRespViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

type UpdateAttendanceUserStatisticsSettingsRespViewItemChildItem struct {
	Code  string `json:"code,omitempty"`  // 标题编号
	Value string `json:"value,omitempty"` // 是否开启,      , 可选值有: `0`：关闭, `1`：开启
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserTask
//
// 获取企业内员工的实际打卡结果，包括上班打卡结果和下班打卡结果。
// * 如果企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，即使员工在这期间打了多次卡，该接口也只会返回 1 条记录。
// * 如果要获取打卡的详细数据，如打卡位置等信息，可使用“获取打卡流水记录”或“批量查询打卡流水记录”的接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//GetCheckinResults
func (r *AttendanceService) GetAttendanceUserTask(ctx context.Context, request *GetAttendanceUserTaskReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTask mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_tasks/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceUserTask(f func(ctx context.Context, request *GetAttendanceUserTaskReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTask = f
}

func (r *Mock) UnMockAttendanceGetAttendanceUserTask() {
	r.mockAttendanceGetAttendanceUserTask = nil
}

type GetAttendanceUserTaskReq struct {
	EmployeeType       EmployeeType `query:"employee_type" json:"-"`        // 请求体中的 user_ids 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	IgnoreInvalidUsers *bool        `query:"ignore_invalid_users" json:"-"` // 是否忽略无效和没有权限的用户。如果 true，返回有效用户的数据，并告知无效和没有权限的用户；如果 false，且 user_ids 中存在无效或没有权限的用户，返回错误
	UserIDs            []string     `json:"user_ids,omitempty"`             // employee_no 或 employee_id 列表
	CheckDateFrom      int64        `json:"check_date_from,omitempty"`      // 查询的起始工作日
	CheckDateTo        int64        `json:"check_date_to,omitempty"`        // 查询的结束工作日，与 check_date_from 的时间间隔不超过30天
}

type getAttendanceUserTaskResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskResp `json:"data,omitempty"` // -
}

type GetAttendanceUserTaskResp struct {
	UserTaskResults     []*GetAttendanceUserTaskRespUserTaskResult `json:"user_task_results,omitempty"`     // 打卡任务列表
	InvalidUserIDs      []string                                   `json:"invalid_user_ids,omitempty"`      // 无效用户工号列表
	UnauthorizedUserIDs []string                                   `json:"unauthorized_user_ids,omitempty"` // 没有权限用户工号列表
}

type GetAttendanceUserTaskRespUserTaskResult struct {
	ResultID     string                                           `json:"result_id,omitempty"`     // 打卡记录 ID
	UserID       string                                           `json:"user_id,omitempty"`       // employee ID
	EmployeeName string                                           `json:"employee_name,omitempty"` // employee 姓名
	Day          int64                                            `json:"day,omitempty"`           // 日期
	GroupID      string                                           `json:"group_id,omitempty"`      // 考勤组 ID
	ShiftID      string                                           `json:"shift_id,omitempty"`      // 班次 ID
	Records      []*GetAttendanceUserTaskRespUserTaskResultRecord `json:"records,omitempty"`       // 用户考勤记录
}

type GetAttendanceUserTaskRespUserTaskResultRecord struct {
	CheckInRecordID          string                                                       `json:"check_in_record_id,omitempty"`          // 上班打卡记录 ID
	CheckInRecord            *GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord  `json:"check_in_record,omitempty"`             // 上班打卡记录
	CheckOutRecordID         string                                                       `json:"check_out_record_id,omitempty"`         // 下班打卡记录 ID
	CheckOutRecord           *GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord `json:"check_out_record,omitempty"`            // 下班打卡记录
	CheckInResult            string                                                       `json:"check_in_result,omitempty"`             // 上班打卡结果，可用值：【NoNeedCheck（无需打卡），SystemCheck（系统打卡），Normal（正常），Early（早退），Late（迟到），Lack（缺卡）】
	CheckOutResult           string                                                       `json:"check_out_result,omitempty"`            // 下班打卡结果，可用值：【NoNeedCheck（无需打卡），SystemCheck（系统打卡），Normal（正常），Early（早退），Late（迟到），Lack（缺卡）】
	CheckInResultSupplement  string                                                       `json:"check_in_result_supplement,omitempty"`  // 上班打卡结果补充，可用值：【None（无），ManagerModification（管理员修改），CardReplacement（补卡通过），ShiftChange（换班），Travel（出差），Leave（请假），GoOut（外出），CardReplacementApplication（补卡申请中），FieldPunch（外勤打卡）】
	CheckOutResultSupplement string                                                       `json:"check_out_result_supplement,omitempty"` // 下班打卡结果补充，可用值：【None（无），ManagerModification（管理员修改），CardReplacement（补卡通过），ShiftChange（换班），Travel（出差），Leave（请假），GoOut（外出），CardReplacementApplication（补卡申请中），FieldPunch（外勤打卡）】
	CheckInShiftTime         string                                                       `json:"check_in_shift_time,omitempty"`         // 正常默认上班时间，精确到秒的时间戳
	CheckOutShiftTime        string                                                       `json:"check_out_shift_time,omitempty"`        // 正常默认下班时间，精确到秒的时间戳
}

type GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string   `json:"creator_id,omitempty"`    // 打卡记录创建者的 employee_no
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式，可用值：【0（用户自己打卡），1（管理员修改），2（用户补卡），3（系统自动生成），4（下班免打卡），5（考勤机打卡），6（极速打卡），7（考勤开放平台导入），8（飞书自研考勤机），9（飞书门禁考勤机）】
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 手机打卡设备ID
}

type GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 员工工号
	CreatorID    string   `json:"creator_id,omitempty"`    // 打卡记录创建者的 employee_no
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式，可用值：【0（用户自己打卡），1（管理员修改），2（用户补卡），3（系统自动生成），4（下班免打卡），5（考勤机打卡），6（极速打卡），7（考勤开放平台导入），8（飞书自研考勤机），9（飞书门禁考勤机）】
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 手机打卡设备ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserTaskRemedy
//
// 获取授权内员工的补卡记录。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//GetUsersRemedyRecords
func (r *AttendanceService) GetAttendanceUserTaskRemedy(ctx context.Context, request *GetAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTaskRemedy mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTaskRemedy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskRemedyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAttendanceGetAttendanceUserTaskRemedy(f func(ctx context.Context, request *GetAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTaskRemedy = f
}

func (r *Mock) UnMockAttendanceGetAttendanceUserTaskRemedy() {
	r.mockAttendanceGetAttendanceUserTaskRemedy = nil
}

type GetAttendanceUserTaskRemedyReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_id 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表
	CheckTimeFrom string       `json:"check_time_from,omitempty"` // 查询的起始时间，精确到秒的时间戳
	CheckTimeTo   string       `json:"check_time_to,omitempty"`   // 查询的结束时间，精确到秒的时间戳
}

type getAttendanceUserTaskRemedyResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskRemedyResp `json:"data,omitempty"` // -
}

type GetAttendanceUserTaskRemedyResp struct {
	UserRemedys []*GetAttendanceUserTaskRemedyRespUserRemedy `json:"user_remedys,omitempty"` // 补卡记录列表
}

type GetAttendanceUserTaskRemedyRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 员工工号
	Status     int64  `json:"status,omitempty"`      // 补卡状态，可用值：【0（pending），2（已通过），3（已取消），4（通过后撤销）】
	Reason     string `json:"reason,omitempty"`      // 补卡原因
	Time       string `json:"time,omitempty"`        // 补卡时间，精确到秒的时间戳
	TimeZone   string `json:"time_zone,omitempty"`   // 补卡时的考勤组时区
	CreateTime string `json:"create_time,omitempty"` // 补卡发起时间，精确到秒的时间戳
	UpdateTime string `json:"update_time,omitempty"` // 补卡状态更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAccessToken 获取登录预授权码 code 对应的登录用户身份。
//
// 该接口仅适用于通过网页应用登录方式获取的预授权码，小程序登录中用户身份的获取，请使用[小程序 code2session 接口](https://open.feishu.cn/document/uYjL24iN/ukjM04SOyQjL5IDN)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token
func (r *AuthService) GetAccessToken(ctx context.Context, request *GetAccessTokenReq, options ...MethodOptionFunc) (*GetAccessTokenResp, *Response, error) {
	if r.cli.mock.mockAuthGetAccessToken != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#GetAccessToken mock enable")
		return r.cli.mock.mockAuthGetAccessToken(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "GetAccessToken",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/access_token",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedAppAccessToken:  true,
		NeedUserAccessToken: true,
	}
	resp := new(getAccessTokenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockAuthGetAccessToken(f func(ctx context.Context, request *GetAccessTokenReq, options ...MethodOptionFunc) (*GetAccessTokenResp, *Response, error)) {
	r.mockAuthGetAccessToken = f
}

func (r *Mock) UnMockAuthGetAccessToken() {
	r.mockAuthGetAccessToken = nil
}

type GetAccessTokenReq struct {
	GrantType string `json:"grant_type,omitempty"` // 授权类型，本流程中，此值为："authorization_code", 示例值："authorization_code"
	Code      string `json:"code,omitempty"`       // 来自[请求身份验证](https://open.feishu.cn/document/ukTMukTMukTM/ukzN4UjL5cDO14SO3gTN)流程，用户扫码登录后会自动302到redirect_uri并带上此参数, 示例值："xMSldislSkdK"
}

type getAccessTokenResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetAccessTokenResp `json:"data,omitempty"`
}

type GetAccessTokenResp struct {
	AccessToken      string `json:"access_token,omitempty"`       // user_access_token，用于获取用户资源
	TokenType        string `json:"token_type,omitempty"`         // token 类型
	ExpiresIn        int64  `json:"expires_in,omitempty"`         // access_token 的有效期，单位: 秒
	Name             string `json:"name,omitempty"`               // 用户姓名
	EnName           string `json:"en_name,omitempty"`            // 用户英文名称
	AvatarURL        string `json:"avatar_url,omitempty"`         // 用户头像
	AvatarThumb      string `json:"avatar_thumb,omitempty"`       // 用户头像 72x72
	AvatarMiddle     string `json:"avatar_middle,omitempty"`      // 用户头像 240x240
	AvatarBig        string `json:"avatar_big,omitempty"`         // 用户头像 640x640
	OpenID           string `json:"open_id,omitempty"`            // 用户在应用内的唯一标识
	UnionID          string `json:"union_id,omitempty"`           // 用户统一ID
	Email            string `json:"email,omitempty"`              // 用户邮箱, 字段权限要求:  获取用户邮箱信息
	UserID           string `json:"user_id,omitempty"`            // 用户 user_id, 字段权限要求:  获取用户 user ID
	Mobile           string `json:"mobile,omitempty"`             // 用户手机号, 字段权限要求:  获取用户手机号
	TenantKey        string `json:"tenant_key,omitempty"`         // 当前企业标识
	RefreshExpiresIn int64  `json:"refresh_expires_in,omitempty"` // refresh_token 的有效期，单位: 秒
	RefreshToken     string `json:"refresh_token,omitempty"`      // 刷新用户 access_token 时使用的 token
}
