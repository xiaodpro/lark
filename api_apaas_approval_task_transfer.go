// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// TransferAPaaSApprovalTask 对于人工任务进行转交操作
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/apaas-v1/approval_task/transfer
func (r *APaaSService) TransferAPaaSApprovalTask(ctx context.Context, request *TransferAPaaSApprovalTaskReq, options ...MethodOptionFunc) (*TransferAPaaSApprovalTaskResp, *Response, error) {
	if r.cli.mock.mockAPaaSTransferAPaaSApprovalTask != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] APaaS#TransferAPaaSApprovalTask mock enable")
		return r.cli.mock.mockAPaaSTransferAPaaSApprovalTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "APaaS",
		API:                   "TransferAPaaSApprovalTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/apaas/v1/approval_tasks/:approval_task_id/transfer",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(transferAPaaSApprovalTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAPaaSTransferAPaaSApprovalTask mock APaaSTransferAPaaSApprovalTask method
func (r *Mock) MockAPaaSTransferAPaaSApprovalTask(f func(ctx context.Context, request *TransferAPaaSApprovalTaskReq, options ...MethodOptionFunc) (*TransferAPaaSApprovalTaskResp, *Response, error)) {
	r.mockAPaaSTransferAPaaSApprovalTask = f
}

// UnMockAPaaSTransferAPaaSApprovalTask un-mock APaaSTransferAPaaSApprovalTask method
func (r *Mock) UnMockAPaaSTransferAPaaSApprovalTask() {
	r.mockAPaaSTransferAPaaSApprovalTask = nil
}

// TransferAPaaSApprovalTaskReq ...
type TransferAPaaSApprovalTaskReq struct {
	ApprovalTaskID string   `path:"approval_task_id" json:"-"` // 人工任务 ID, 示例值: "1785996265147395"
	UserID         string   `json:"user_id,omitempty"`         // 操作人 ID, 示例值: "1783981209205788"
	FromUserIDs    []string `json:"from_user_ids,omitempty"`   // 原审批人id, 示例值: ["1783981209205788"], 长度范围: `0` ～ `20`
	ToUserIDs      []string `json:"to_user_ids,omitempty"`     // 新审批人id, 示例值: ["1783981209205789"], 长度范围: `0` ～ `20`
	Opinion        *string  `json:"opinion,omitempty"`         // 转交原因, 示例值: "转交"
}

// TransferAPaaSApprovalTaskResp ...
type TransferAPaaSApprovalTaskResp struct {
}

// transferAPaaSApprovalTaskResp ...
type transferAPaaSApprovalTaskResp struct {
	Code  int64                          `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                         `json:"msg,omitempty"`  // 错误描述
	Data  *TransferAPaaSApprovalTaskResp `json:"data,omitempty"`
	Error *ErrorDetail                   `json:"error,omitempty"`
}
