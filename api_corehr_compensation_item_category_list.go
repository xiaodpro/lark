// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetCoreHRCompensationItemCategoryList 批量获取薪资项分类信息
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/compensation-v1/item_category/list
func (r *CoreHRService) GetCoreHRCompensationItemCategoryList(ctx context.Context, request *GetCoreHRCompensationItemCategoryListReq, options ...MethodOptionFunc) (*GetCoreHRCompensationItemCategoryListResp, *Response, error) {
	if r.cli.mock.mockCoreHRGetCoreHRCompensationItemCategoryList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] CoreHR#GetCoreHRCompensationItemCategoryList mock enable")
		return r.cli.mock.mockCoreHRGetCoreHRCompensationItemCategoryList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "CoreHR",
		API:                   "GetCoreHRCompensationItemCategoryList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/compensation/v1/item_categories",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getCoreHRCompensationItemCategoryListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCoreHRGetCoreHRCompensationItemCategoryList mock CoreHRGetCoreHRCompensationItemCategoryList method
func (r *Mock) MockCoreHRGetCoreHRCompensationItemCategoryList(f func(ctx context.Context, request *GetCoreHRCompensationItemCategoryListReq, options ...MethodOptionFunc) (*GetCoreHRCompensationItemCategoryListResp, *Response, error)) {
	r.mockCoreHRGetCoreHRCompensationItemCategoryList = f
}

// UnMockCoreHRGetCoreHRCompensationItemCategoryList un-mock CoreHRGetCoreHRCompensationItemCategoryList method
func (r *Mock) UnMockCoreHRGetCoreHRCompensationItemCategoryList() {
	r.mockCoreHRGetCoreHRCompensationItemCategoryList = nil
}

// GetCoreHRCompensationItemCategoryListReq ...
type GetCoreHRCompensationItemCategoryListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值: 100, 默认值: `100`, 取值范围: `1` ～ `500`
	PageToken *string `query:"page_token" json:"-"` // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: 231412341234
}

// GetCoreHRCompensationItemCategoryListResp ...
type GetCoreHRCompensationItemCategoryListResp struct {
	Items     []*GetCoreHRCompensationItemCategoryListRespItem `json:"items,omitempty"`      // 薪资项分类信息列表
	PageToken string                                           `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                                             `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetCoreHRCompensationItemCategoryListRespItem ...
type GetCoreHRCompensationItemCategoryListRespItem struct {
	ID        string                                                   `json:"id,omitempty"`         // 薪资项分类ID
	Name      string                                                   `json:"name,omitempty"`       // 薪资项分类名称
	I18nNames []*GetCoreHRCompensationItemCategoryListRespItemI18nName `json:"i18n_names,omitempty"` // 薪资项多语言分类
}

// GetCoreHRCompensationItemCategoryListRespItemI18nName ...
type GetCoreHRCompensationItemCategoryListRespItemI18nName struct {
	Locale string `json:"locale,omitempty"` // 语言版本, 例如: “zh-CN”、“en-US”
	Value  string `json:"value,omitempty"`  // 语言名称
}

// getCoreHRCompensationItemCategoryListResp ...
type getCoreHRCompensationItemCategoryListResp struct {
	Code  int64                                      `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                                     `json:"msg,omitempty"`  // 错误描述
	Data  *GetCoreHRCompensationItemCategoryListResp `json:"data,omitempty"`
	Error *ErrorDetail                               `json:"error,omitempty"`
}
