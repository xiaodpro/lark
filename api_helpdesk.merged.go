// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
	"io"
)

// UpdateHelpdeskAgent 更新客服状态等信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/patch
func (r *HelpdeskService) UpdateHelpdeskAgent(ctx context.Context, request *UpdateHelpdeskAgentReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgent mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgent",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskUpdateHelpdeskAgent(f func(ctx context.Context, request *UpdateHelpdeskAgentReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgent = f
}

func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgent() {
	r.mockHelpdeskUpdateHelpdeskAgent = nil
}

type UpdateHelpdeskAgentReq struct {
	AgentID string `path:"agent_id" json:"-"` // 客服id, 示例值："ou_14777d82ffef0f707de5a8c7ff2c5ebe"
	Status  *int64 `json:"status,omitempty"`  // agent status, 示例值：1：在线；2：离线
}

type updateHelpdeskAgentResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentResp `json:"data,omitempty"`
}

type UpdateHelpdeskAgentResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskAgentSchedule 该接口用于创建客服
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/create
func (r *HelpdeskService) CreateHelpdeskAgentSchedule(ctx context.Context, request *CreateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskAgentSchedule",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskCreateHelpdeskAgentSchedule(f func(ctx context.Context, request *CreateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskAgentSchedule = f
}

func (r *Mock) UnMockHelpdeskCreateHelpdeskAgentSchedule() {
	r.mockHelpdeskCreateHelpdeskAgentSchedule = nil
}

type CreateHelpdeskAgentScheduleReq struct {
	AgentSchedules []*CreateHelpdeskAgentScheduleReqAgentSchedule `json:"agent_schedules,omitempty"` // 新客服日程
}

type CreateHelpdeskAgentScheduleReqAgentSchedule struct {
	AgentID       *string                                              `json:"agent_id,omitempty"`        // 客服id, 示例值："agent-id"
	Schedule      *CreateHelpdeskAgentScheduleReqAgentScheduleSchedule `json:"schedule,omitempty"`        // 工作日程列表
	AgentSkillIDs []string                                             `json:"agent_skill_ids,omitempty"` // 客服技能 ids
}

type CreateHelpdeskAgentScheduleReqAgentScheduleSchedule struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59, 示例值："00:00"
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59, 示例值："24:00"
	Weekday   *int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend, 示例值：9
}

type createHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

type CreateHelpdeskAgentScheduleResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskAgentSchedule 该接口用于删除客服
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/delete
func (r *HelpdeskService) DeleteHelpdeskAgentSchedule(ctx context.Context, request *DeleteHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskAgentSchedule",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskDeleteHelpdeskAgentSchedule(f func(ctx context.Context, request *DeleteHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskAgentSchedule = f
}

func (r *Mock) UnMockHelpdeskDeleteHelpdeskAgentSchedule() {
	r.mockHelpdeskDeleteHelpdeskAgentSchedule = nil
}

type DeleteHelpdeskAgentScheduleReq struct {
	AgentID string `path:"agent_id" json:"-"` // agent user id, 示例值："12345"
}

type deleteHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

type DeleteHelpdeskAgentScheduleResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSchedule 该接口用于获取客服信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/get
func (r *HelpdeskService) GetHelpdeskAgentSchedule(ctx context.Context, request *GetHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSchedule",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskAgentSchedule(f func(ctx context.Context, request *GetHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSchedule = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSchedule() {
	r.mockHelpdeskGetHelpdeskAgentSchedule = nil
}

type GetHelpdeskAgentScheduleReq struct {
	AgentID string `path:"agent_id" json:"-"` // 客服 id, 示例值："	客服 id"
}

type getHelpdeskAgentScheduleResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

type GetHelpdeskAgentScheduleResp struct {
	AgentSchedule *GetHelpdeskAgentScheduleRespAgentSchedule `json:"agent_schedule,omitempty"` // 客服日程
}

type GetHelpdeskAgentScheduleRespAgentSchedule struct {
	Status      int64                                                  `json:"status,omitempty"`       // 客服状态, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)自动处于非服务时间段
	Agent       *GetHelpdeskAgentScheduleRespAgentScheduleAgent        `json:"agent,omitempty"`        // 客服信息
	Schedule    *GetHelpdeskAgentScheduleRespAgentScheduleSchedule     `json:"schedule,omitempty"`     // 工作日程列表
	AgentSkills []*GetHelpdeskAgentScheduleRespAgentScheduleAgentSkill `json:"agent_skills,omitempty"` // 客服技能
}

type GetHelpdeskAgentScheduleRespAgentScheduleAgent struct {
	ID          string `json:"id,omitempty"`           // 客服 id
	AvatarURL   string `json:"avatar_url,omitempty"`   // avatar url
	Name        string `json:"name,omitempty"`         // 客服名字
	Email       string `json:"email,omitempty"`        // email
	Department  string `json:"department,omitempty"`   // 部门
	CompanyName string `json:"company_name,omitempty"` // 公司名
}

type GetHelpdeskAgentScheduleRespAgentScheduleSchedule struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59
	EndTime   string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59
	Weekday   int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend
}

type GetHelpdeskAgentScheduleRespAgentScheduleAgentSkill struct {
	ID        string `json:"id,omitempty"`         // 客服技能 id
	Name      string `json:"name,omitempty"`       // 客服技能名
	IsDefault bool   `json:"is_default,omitempty"` // 是默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentScheduleList 该接口用于获取所有客服信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/list
func (r *HelpdeskService) GetHelpdeskAgentScheduleList(ctx context.Context, request *GetHelpdeskAgentScheduleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentScheduleList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentScheduleList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentScheduleList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentScheduleList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_schedules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentScheduleListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskAgentScheduleList(f func(ctx context.Context, request *GetHelpdeskAgentScheduleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentScheduleList = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskAgentScheduleList() {
	r.mockHelpdeskGetHelpdeskAgentScheduleList = nil
}

type GetHelpdeskAgentScheduleListReq struct {
	Status []int64 `query:"status" json:"-"` // 筛选条件, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)客服, 4 - 移除客服
}

type getHelpdeskAgentScheduleListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentScheduleListResp `json:"data,omitempty"`
}

type GetHelpdeskAgentScheduleListResp struct {
	AgentSchedules []*GetHelpdeskAgentScheduleListRespAgentSchedule `json:"agent_schedules,omitempty"` // 客服列表
}

type GetHelpdeskAgentScheduleListRespAgentSchedule struct {
	Status      int64                                                      `json:"status,omitempty"`       // 客服状态, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)自动处于非服务时间段
	Agent       *GetHelpdeskAgentScheduleListRespAgentScheduleAgent        `json:"agent,omitempty"`        // 客服信息
	Schedule    *GetHelpdeskAgentScheduleListRespAgentScheduleSchedule     `json:"schedule,omitempty"`     // 工作日程列表
	AgentSkills []*GetHelpdeskAgentScheduleListRespAgentScheduleAgentSkill `json:"agent_skills,omitempty"` // 客服技能
}

type GetHelpdeskAgentScheduleListRespAgentScheduleAgent struct {
	ID          string `json:"id,omitempty"`           // 客服 id
	AvatarURL   string `json:"avatar_url,omitempty"`   // avatar url
	Name        string `json:"name,omitempty"`         // 客服名字
	Email       string `json:"email,omitempty"`        // email
	Department  string `json:"department,omitempty"`   // 部门
	CompanyName string `json:"company_name,omitempty"` // 公司名
}

type GetHelpdeskAgentScheduleListRespAgentScheduleSchedule struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59
	EndTime   string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59
	Weekday   int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend
}

type GetHelpdeskAgentScheduleListRespAgentScheduleAgentSkill struct {
	ID        string `json:"id,omitempty"`         // 客服技能 id
	Name      string `json:"name,omitempty"`       // 客服技能名
	IsDefault bool   `json:"is_default,omitempty"` // 是默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskAgentSchedule 该接口用于更新客服
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/patch
func (r *HelpdeskService) UpdateHelpdeskAgentSchedule(ctx context.Context, request *UpdateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgentSchedule",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskUpdateHelpdeskAgentSchedule(f func(ctx context.Context, request *UpdateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgentSchedule = f
}

func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgentSchedule() {
	r.mockHelpdeskUpdateHelpdeskAgentSchedule = nil
}

type UpdateHelpdeskAgentScheduleReq struct {
	AgentID       string                                       `path:"agent_id" json:"-"`        // 客服 id, 示例值："123456"
	AgentSchedule *UpdateHelpdeskAgentScheduleReqAgentSchedule `json:"agent_schedule,omitempty"` // 工作日程列表
}

type UpdateHelpdeskAgentScheduleReqAgentSchedule struct {
	Schedule      *UpdateHelpdeskAgentScheduleReqAgentScheduleSchedule `json:"schedule,omitempty"`        // 工作日程列表
	AgentSkillIDs []string                                             `json:"agent_skill_ids,omitempty"` // 客服技能 ids
}

type UpdateHelpdeskAgentScheduleReqAgentScheduleSchedule struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59, 示例值："00:00"
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59, 示例值："24:00"
	Weekday   *int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend, 示例值：9
}

type updateHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

type UpdateHelpdeskAgentScheduleResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskAgentSkill 该接口用于创建客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/create
func (r *HelpdeskService) CreateHelpdeskAgentSkill(ctx context.Context, request *CreateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskAgentSkill",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskCreateHelpdeskAgentSkill(f func(ctx context.Context, request *CreateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskAgentSkill = f
}

func (r *Mock) UnMockHelpdeskCreateHelpdeskAgentSkill() {
	r.mockHelpdeskCreateHelpdeskAgentSkill = nil
}

type CreateHelpdeskAgentSkillReq struct {
	Name     *string                            `json:"name,omitempty"`      // 技能名, 示例值："test-skill"
	Rules    []*CreateHelpdeskAgentSkillReqRule `json:"rules,omitempty"`     // 技能rules
	AgentIDs []string                           `json:"agent_ids,omitempty"` // 客服 ids
}

type CreateHelpdeskAgentSkillReqRule struct {
	ID               *string `json:"id,omitempty"`                // rule id, 看[获取客服技能rules](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/list-agent-skill-rules) 用于获取rules options, 示例值："test-skill-id"
	SelectedOperator *int64  `json:"selected_operator,omitempty"` // 运算符compare, 看[客服技能运算符options](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options), 示例值：3
	Operand          *string `json:"operand,omitempty"`           // rule操作数value, 示例值："    {,                    "selected": ["6883005079188668418"],,                    "options": [,                        {,                            "id": "6883005079188668418",,                            "name": {,                                "en_us": "小程序及应用",,                                "ja_jp": "小程序及应用",,                                "zh_cn": "小程序及应用",                            },                        },,                        {,                            "children": [,                                {,                                    "id": "6883005086914625538",,                                    "name": {,                                        "en_us": "消息提醒",,                                        "ja_jp": "消息提醒",,                                        "zh_cn": "消息提醒",                                    },                                },,                                {,                                    "id": "6883005092723802114",,                                    "name": {,                                        "en_us": "其他",,                                        "ja_jp": "其他",,                                        "zh_cn": "其他",                                    },                                },                            ],,                            "id": "6883005085605986306",,                            "name": {,                                "en_us": "聊天和群组",,                                "ja_jp": "聊天和群组",,                                "zh_cn": "聊天和群组",                            },                        },,                    ],,                }"
	Category         *int64  `json:"category,omitempty"`          // rule type，1-知识库，2-工单信息，3-用户飞书信息, 示例值：1
}

type createHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskAgentSkillResp `json:"data,omitempty"`
}

type CreateHelpdeskAgentSkillResp struct {
	AgentSkillID string `json:"agent_skill_id,omitempty"` // 客服技能id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskAgentSkill 该接口用于删除客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/delete
func (r *HelpdeskService) DeleteHelpdeskAgentSkill(ctx context.Context, request *DeleteHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskAgentSkill",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskDeleteHelpdeskAgentSkill(f func(ctx context.Context, request *DeleteHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskAgentSkill = f
}

func (r *Mock) UnMockHelpdeskDeleteHelpdeskAgentSkill() {
	r.mockHelpdeskDeleteHelpdeskAgentSkill = nil
}

type DeleteHelpdeskAgentSkillReq struct {
	AgentSkillID string `path:"agent_skill_id" json:"-"` // agent group id, 示例值："test-skill-id"
}

type deleteHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskAgentSkillResp `json:"data,omitempty"`
}

type DeleteHelpdeskAgentSkillResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkill 该接口用于获取客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/get
func (r *HelpdeskService) GetHelpdeskAgentSkill(ctx context.Context, request *GetHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkill",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskAgentSkill(f func(ctx context.Context, request *GetHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkill = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkill() {
	r.mockHelpdeskGetHelpdeskAgentSkill = nil
}

type GetHelpdeskAgentSkillReq struct {
	AgentSkillID string `path:"agent_skill_id" json:"-"` // agent skill id, 示例值："6941215891786825756"
}

type getHelpdeskAgentSkillResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillResp `json:"data,omitempty"`
}

type GetHelpdeskAgentSkillResp struct {
	AgentSkill *GetHelpdeskAgentSkillRespAgentSkill `json:"agent_skill,omitempty"` // 技能
}

type GetHelpdeskAgentSkillRespAgentSkill struct {
	ID        string                                      `json:"id,omitempty"`         // 技能id
	Name      string                                      `json:"name,omitempty"`       // 技能名
	Rules     []*GetHelpdeskAgentSkillRespAgentSkillRule  `json:"rules,omitempty"`      // 技能rules
	AgentIDs  []string                                    `json:"agent_ids,omitempty"`  // 具有此技能的客服ids
	IsDefault bool                                        `json:"is_default,omitempty"` // 默认技能
	Agents    []*GetHelpdeskAgentSkillRespAgentSkillAgent `json:"agents,omitempty"`     // 客服 info
}

type GetHelpdeskAgentSkillRespAgentSkillRule struct {
	ID               string  `json:"id,omitempty"`                // rule id, 看[获取客服技能rules](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/list-agent-skill-rules) 用于获取rules options
	SelectedOperator int64   `json:"selected_operator,omitempty"` // 运算符compare, 看[客服技能运算符options](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	OperatorOptions  []int64 `json:"operator_options,omitempty"`  // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand          string  `json:"operand,omitempty"`           // rule操作数value
	Category         int64   `json:"category,omitempty"`          // rule type，1-知识库，2-工单信息，3-用户飞书信息
	DisplayName      string  `json:"display_name,omitempty"`      // rule 名
}

type GetHelpdeskAgentSkillRespAgentSkillAgent struct {
	ID        string `json:"id,omitempty"`         // user id
	AvatarURL string `json:"avatar_url,omitempty"` // user avatar url
	Name      string `json:"name,omitempty"`       // user name
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkillList 获取全部客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/list
func (r *HelpdeskService) GetHelpdeskAgentSkillList(ctx context.Context, request *GetHelpdeskAgentSkillListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkillList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkillList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskAgentSkillList(f func(ctx context.Context, request *GetHelpdeskAgentSkillListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkillList = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkillList() {
	r.mockHelpdeskGetHelpdeskAgentSkillList = nil
}

type GetHelpdeskAgentSkillListReq struct{}

type getHelpdeskAgentSkillListResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillListResp `json:"data,omitempty"`
}

type GetHelpdeskAgentSkillListResp struct {
	AgentSkills []*GetHelpdeskAgentSkillListRespAgentSkill `json:"agent_skills,omitempty"` // 客服技能列表
}

type GetHelpdeskAgentSkillListRespAgentSkill struct {
	ID        string   `json:"id,omitempty"`         // 技能id
	Name      string   `json:"name,omitempty"`       // 技能名
	AgentIDs  []string `json:"agent_ids,omitempty"`  // 具有此技能的客服ids
	IsDefault bool     `json:"is_default,omitempty"` // 默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkillRuleList 该接口用于获取全部客服技能。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list
func (r *HelpdeskService) GetHelpdeskAgentSkillRuleList(ctx context.Context, request *GetHelpdeskAgentSkillRuleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillRuleListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillRuleList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkillRuleList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillRuleList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkillRuleList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skill_rules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillRuleListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskAgentSkillRuleList(f func(ctx context.Context, request *GetHelpdeskAgentSkillRuleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillRuleListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkillRuleList = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkillRuleList() {
	r.mockHelpdeskGetHelpdeskAgentSkillRuleList = nil
}

type GetHelpdeskAgentSkillRuleListReq struct{}

type getHelpdeskAgentSkillRuleListResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillRuleListResp `json:"data,omitempty"`
}

type GetHelpdeskAgentSkillRuleListResp struct {
	Rules []*GetHelpdeskAgentSkillRuleListRespRule `json:"rules,omitempty"` // rules列表
}

type GetHelpdeskAgentSkillRuleListRespRule struct {
	ID              string  `json:"id,omitempty"`               // rule id, 看[获取客服技能rules](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/list-agent-skill-rules) 用于获取rules options
	OperatorOptions []int64 `json:"operator_options,omitempty"` // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand         string  `json:"operand,omitempty"`          // rule操作数value
	Category        int64   `json:"category,omitempty"`         // rule type，1-知识库，2-工单信息，3-用户飞书信息
	DisplayName     string  `json:"display_name,omitempty"`     // rule 名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskAgentSkill 该接口用于更新客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/patch
func (r *HelpdeskService) UpdateHelpdeskAgentSkill(ctx context.Context, request *UpdateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgentSkill",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskUpdateHelpdeskAgentSkill(f func(ctx context.Context, request *UpdateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgentSkill = f
}

func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgentSkill() {
	r.mockHelpdeskUpdateHelpdeskAgentSkill = nil
}

type UpdateHelpdeskAgentSkillReq struct {
	AgentSkillID string                                 `path:"agent_skill_id" json:"-"` // agent skill id, 示例值："test-skill-id"
	AgentSkill   *UpdateHelpdeskAgentSkillReqAgentSkill `json:"agent_skill,omitempty"`   // 更新技能
}

type UpdateHelpdeskAgentSkillReqAgentSkill struct {
	Name     *string                                     `json:"name,omitempty"`      // 技能名, 示例值："skill-name"
	Rules    *UpdateHelpdeskAgentSkillReqAgentSkillRules `json:"rules,omitempty"`     // 技能rules
	AgentIDs []string                                    `json:"agent_ids,omitempty"` // 具有此技能的客服ids
}

type UpdateHelpdeskAgentSkillReqAgentSkillRules struct {
	ID               *string `json:"id,omitempty"`                // rule id, 看[获取客服技能rules](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/list-agent-skill-rules) 用于获取rules options, 示例值："test-skill-id"
	SelectedOperator *int64  `json:"selected_operator,omitempty"` // 运算符compare, 看[客服技能运算符options](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options), 示例值：3
	OperatorOptions  []int64 `json:"operator_options,omitempty"`  // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand          *string `json:"operand,omitempty"`           // rule操作数value, 示例值："    {,                    "selected": ["6883005079188668418"],,                    "options": [,                        {,                            "id": "6883005079188668418",,                            "name": {,                                "en_us": "小程序及应用",,                                "ja_jp": "小程序及应用",,                                "zh_cn": "小程序及应用",                            },                        },,                        {,                            "children": [,                                {,                                    "id": "6883005086914625538",,                                    "name": {,                                        "en_us": "消息提醒",,                                        "ja_jp": "消息提醒",,                                        "zh_cn": "消息提醒",                                    },                                },,                                {,                                    "id": "6883005092723802114",,                                    "name": {,                                        "en_us": "其他",,                                        "ja_jp": "其他",,                                        "zh_cn": "其他",                                    },                                },                            ],,                            "id": "6883005085605986306",,                            "name": {,                                "en_us": "聊天和群组",,                                "ja_jp": "聊天和群组",,                                "zh_cn": "聊天和群组",                            },                        },,                    ],,                }"
}

type updateHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentSkillResp `json:"data,omitempty"`
}

type UpdateHelpdeskAgentSkillResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskCategory 该接口用于创建知识库分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/create
func (r *HelpdeskService) CreateHelpdeskCategory(ctx context.Context, request *CreateHelpdeskCategoryReq, options ...MethodOptionFunc) (*CreateHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskCategory",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskCreateHelpdeskCategory(f func(ctx context.Context, request *CreateHelpdeskCategoryReq, options ...MethodOptionFunc) (*CreateHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskCategory = f
}

func (r *Mock) UnMockHelpdeskCreateHelpdeskCategory() {
	r.mockHelpdeskCreateHelpdeskCategory = nil
}

type CreateHelpdeskCategoryReq struct {
	Name     string  `json:"name,omitempty"`      // 名称, 示例值："创建团队和邀请成员"
	ParentID string  `json:"parent_id,omitempty"` // 父知识库分类ID, 示例值："0"
	Language *string `json:"language,omitempty"`  // 语言, 示例值："zh_cn"
}

type createHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskCategoryResp `json:"data,omitempty"`
}

type CreateHelpdeskCategoryResp struct {
	Category *HelpdeskCategory `json:"category,omitempty"` // 知识库分类
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskCategory 该接口用于删除知识库分类详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/delete
func (r *HelpdeskService) DeleteHelpdeskCategory(ctx context.Context, request *DeleteHelpdeskCategoryReq, options ...MethodOptionFunc) (*DeleteHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskCategory",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskDeleteHelpdeskCategory(f func(ctx context.Context, request *DeleteHelpdeskCategoryReq, options ...MethodOptionFunc) (*DeleteHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskCategory = f
}

func (r *Mock) UnMockHelpdeskDeleteHelpdeskCategory() {
	r.mockHelpdeskDeleteHelpdeskCategory = nil
}

type DeleteHelpdeskCategoryReq struct {
	ID string `path:"id" json:"-"` // 知识库分类ID, 示例值："6948728206392295444"
}

type deleteHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskCategoryResp `json:"data,omitempty"`
}

type DeleteHelpdeskCategoryResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskCategory 该接口用于获取知识库分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/get
func (r *HelpdeskService) GetHelpdeskCategory(ctx context.Context, request *GetHelpdeskCategoryReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskCategory",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskCategory(f func(ctx context.Context, request *GetHelpdeskCategoryReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskCategory = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskCategory() {
	r.mockHelpdeskGetHelpdeskCategory = nil
}

type GetHelpdeskCategoryReq struct {
	ID string `path:"id" json:"-"` // 知识库分类ID, 示例值："6948728206392295444"
}

type getHelpdeskCategoryResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskCategoryResp `json:"data,omitempty"`
}

type GetHelpdeskCategoryResp struct {
	CategoryID string `json:"category_id,omitempty"` // 知识库分类ID
	ID         string `json:"id,omitempty"`          // 知识库分类ID，（旧版，请使用category_id）
	Name       string `json:"name,omitempty"`        // 名称
	HelpdeskID string `json:"helpdesk_id,omitempty"` // 服务台ID
	Language   string `json:"language,omitempty"`    // 语言
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskCategoryList
//
// 该接口用于获取服务台知识库所有分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/list-categories
func (r *HelpdeskService) GetHelpdeskCategoryList(ctx context.Context, request *GetHelpdeskCategoryListReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskCategoryList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskCategoryList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskCategoryList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskCategoryList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskCategoryListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskCategoryList(f func(ctx context.Context, request *GetHelpdeskCategoryListReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskCategoryList = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskCategoryList() {
	r.mockHelpdeskGetHelpdeskCategoryList = nil
}

type GetHelpdeskCategoryListReq struct {
	Lang    *string `query:"lang" json:"-"`     // 知识库分类语言, 示例值："zh_cn"
	OrderBy *int64  `query:"order_by" json:"-"` // 排序键。1: 根据知识库分类更新时间排序, 示例值：1
	Asc     *bool   `query:"asc" json:"-"`      // 顺序。true: 正序；false：反序, 示例值：true
}

type getHelpdeskCategoryListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskCategoryListResp `json:"data,omitempty"`
}

type GetHelpdeskCategoryListResp struct {
	Categories []*HelpdeskCategory `json:"categories,omitempty"` // 知识库分类列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskCategory 该接口用于更新知识库分类详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/patch
func (r *HelpdeskService) UpdateHelpdeskCategory(ctx context.Context, request *UpdateHelpdeskCategoryReq, options ...MethodOptionFunc) (*UpdateHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskCategory",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskUpdateHelpdeskCategory(f func(ctx context.Context, request *UpdateHelpdeskCategoryReq, options ...MethodOptionFunc) (*UpdateHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskCategory = f
}

func (r *Mock) UnMockHelpdeskUpdateHelpdeskCategory() {
	r.mockHelpdeskUpdateHelpdeskCategory = nil
}

type UpdateHelpdeskCategoryReq struct {
	ID       string  `path:"id" json:"-"`         // category id, 示例值："6948728206392295444"
	Name     *string `json:"name,omitempty"`      // 名称, 示例值："创建团队和邀请成员"
	ParentID *string `json:"parent_id,omitempty"` // 父知识库分类ID, 示例值："0"
}

type updateHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskCategoryResp `json:"data,omitempty"`
}

type UpdateHelpdeskCategoryResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeHelpdeskEvent 用于订阅服务台事件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/subscribe
func (r *HelpdeskService) SubscribeHelpdeskEvent(ctx context.Context, request *SubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*SubscribeHelpdeskEventResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSubscribeHelpdeskEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SubscribeHelpdeskEvent mock enable")
		return r.cli.mock.mockHelpdeskSubscribeHelpdeskEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SubscribeHelpdeskEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/events/subscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(subscribeHelpdeskEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskSubscribeHelpdeskEvent(f func(ctx context.Context, request *SubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*SubscribeHelpdeskEventResp, *Response, error)) {
	r.mockHelpdeskSubscribeHelpdeskEvent = f
}

func (r *Mock) UnMockHelpdeskSubscribeHelpdeskEvent() {
	r.mockHelpdeskSubscribeHelpdeskEvent = nil
}

type SubscribeHelpdeskEventReq struct {
	Events []*SubscribeHelpdeskEventReqEvent `json:"events,omitempty"` // 可订阅的事件列表
}

type SubscribeHelpdeskEventReqEvent struct {
	Type    string `json:"type,omitempty"`    // 事件类型, 示例值："helpdesk.ticket_message"
	Subtype string `json:"subtype,omitempty"` // 事件子类型, 示例值："ticket_message.created_v1"
}

type subscribeHelpdeskEventResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *SubscribeHelpdeskEventResp `json:"data,omitempty"`
}

type SubscribeHelpdeskEventResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnsubscribeHelpdeskEvent 用于取消订阅服务台事件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/unsubscribe
func (r *HelpdeskService) UnsubscribeHelpdeskEvent(ctx context.Context, request *UnsubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*UnsubscribeHelpdeskEventResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUnsubscribeHelpdeskEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UnsubscribeHelpdeskEvent mock enable")
		return r.cli.mock.mockHelpdeskUnsubscribeHelpdeskEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "UnsubscribeHelpdeskEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/events/unsubscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(unsubscribeHelpdeskEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskUnsubscribeHelpdeskEvent(f func(ctx context.Context, request *UnsubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*UnsubscribeHelpdeskEventResp, *Response, error)) {
	r.mockHelpdeskUnsubscribeHelpdeskEvent = f
}

func (r *Mock) UnMockHelpdeskUnsubscribeHelpdeskEvent() {
	r.mockHelpdeskUnsubscribeHelpdeskEvent = nil
}

type UnsubscribeHelpdeskEventReq struct {
	Events []*UnsubscribeHelpdeskEventReqEvent `json:"events,omitempty"` // event list to unsubscribe
}

type UnsubscribeHelpdeskEventReqEvent struct {
	Type    string `json:"type,omitempty"`    // 事件类型, 示例值："helpdesk.ticket_message"
	Subtype string `json:"subtype,omitempty"` // 事件子类型, 示例值："ticket_message.created_v1"
}

type unsubscribeHelpdeskEventResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UnsubscribeHelpdeskEventResp `json:"data,omitempty"`
}

type UnsubscribeHelpdeskEventResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskFAQ 该接口用于创建知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/create
func (r *HelpdeskService) CreateHelpdeskFAQ(ctx context.Context, request *CreateHelpdeskFAQReq, options ...MethodOptionFunc) (*CreateHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskFAQ",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskCreateHelpdeskFAQ(f func(ctx context.Context, request *CreateHelpdeskFAQReq, options ...MethodOptionFunc) (*CreateHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskFAQ = f
}

func (r *Mock) UnMockHelpdeskCreateHelpdeskFAQ() {
	r.mockHelpdeskCreateHelpdeskFAQ = nil
}

type CreateHelpdeskFAQReq struct {
	FAQ *CreateHelpdeskFAQReqFAQ `json:"faq,omitempty"` // 知识库详情
}

type CreateHelpdeskFAQReqFAQ struct {
	CategoryID     *string  `json:"category_id,omitempty"`     // 知识库分类ID, 示例值："6836004780707807251"
	Question       string   `json:"question,omitempty"`        // 问题, 示例值："问题"
	Answer         *string  `json:"answer,omitempty"`          // 答案, 示例值："答案"
	AnswerRichtext *string  `json:"answer_richtext,omitempty"` // 富文本答案和答案必须有一个必填。Json Array格式，富文本结构请见[了解更多: 富文本](https://open.feishu.cn/document/ukTMukTMukTM/uITM0YjLyEDN24iMxQjN), 示例值："[{,                        "content": "这只是一个测试，医保问题",,                        "type": "text",                    }]"
	Tags           []string `json:"tags,omitempty"`            // 关联词
}

type createHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskFAQResp `json:"data,omitempty"`
}

type CreateHelpdeskFAQResp struct {
	FAQ *CreateHelpdeskFAQRespFAQ `json:"faq,omitempty"` // 知识库详情
}

type CreateHelpdeskFAQRespFAQ struct {
	FAQID          string                              `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                              `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                              `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                              `json:"question,omitempty"`        // 问题
	Answer         string                              `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                              `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                               `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                               `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory                 `json:"categories,omitempty"`      // 分类
	Tags           []string                            `json:"tags,omitempty"`            // 关联词列表
	ExpireTime     int64                               `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *CreateHelpdeskFAQRespFAQUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *CreateHelpdeskFAQRespFAQCreateUser `json:"create_user,omitempty"`     // 创建用户
}

type CreateHelpdeskFAQRespFAQUpdateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

type CreateHelpdeskFAQRespFAQCreateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskFAQ 该接口用于删除知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/delete
func (r *HelpdeskService) DeleteHelpdeskFAQ(ctx context.Context, request *DeleteHelpdeskFAQReq, options ...MethodOptionFunc) (*DeleteHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskFAQ",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskDeleteHelpdeskFAQ(f func(ctx context.Context, request *DeleteHelpdeskFAQReq, options ...MethodOptionFunc) (*DeleteHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskFAQ = f
}

func (r *Mock) UnMockHelpdeskDeleteHelpdeskFAQ() {
	r.mockHelpdeskDeleteHelpdeskFAQ = nil
}

type DeleteHelpdeskFAQReq struct {
	ID string `path:"id" json:"-"` // id, 示例值："12345"
}

type deleteHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskFAQResp `json:"data,omitempty"`
}

type DeleteHelpdeskFAQResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQ 该接口用于获取服务台知识库详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/get
func (r *HelpdeskService) GetHelpdeskFAQ(ctx context.Context, request *GetHelpdeskFAQReq, options ...MethodOptionFunc) (*GetHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQ",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskFAQ(f func(ctx context.Context, request *GetHelpdeskFAQReq, options ...MethodOptionFunc) (*GetHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQ = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskFAQ() {
	r.mockHelpdeskGetHelpdeskFAQ = nil
}

type GetHelpdeskFAQReq struct {
	ID string `path:"id" json:"-"` // 知识库ID, 示例值："6856395634652479491"
}

type getHelpdeskFAQResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskFAQResp `json:"data,omitempty"`
}

type GetHelpdeskFAQResp struct {
	FAQ *GetHelpdeskFAQRespFAQ `json:"faq,omitempty"` // 知识库详情
}

type GetHelpdeskFAQRespFAQ struct {
	FAQID          string                           `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                           `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                           `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                           `json:"question,omitempty"`        // 问题
	Answer         string                           `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                           `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                            `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                            `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory              `json:"categories,omitempty"`      // 分类
	Tags           []string                         `json:"tags,omitempty"`            // 关联词列表
	ExpireTime     int64                            `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *GetHelpdeskFAQRespFAQUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *GetHelpdeskFAQRespFAQCreateUser `json:"create_user,omitempty"`     // 创建用户
}

type GetHelpdeskFAQRespFAQUpdateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

type GetHelpdeskFAQRespFAQCreateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQImage 该接口用于获取知识库图像。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/faq_image
func (r *HelpdeskService) GetHelpdeskFAQImage(ctx context.Context, request *GetHelpdeskFAQImageReq, options ...MethodOptionFunc) (*GetHelpdeskFAQImageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQImage mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id/image/:image_key",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskFAQImage(f func(ctx context.Context, request *GetHelpdeskFAQImageReq, options ...MethodOptionFunc) (*GetHelpdeskFAQImageResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQImage = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskFAQImage() {
	r.mockHelpdeskGetHelpdeskFAQImage = nil
}

type GetHelpdeskFAQImageReq struct {
	ID       string `path:"id" json:"-"`        // 知识库ID, 示例值："12345"
	ImageKey string `path:"image_key" json:"-"` // 图像key, 示例值："img_b07ffac0-19c1-48a3-afca-599f8ea825fj"
}

type getHelpdeskFAQImageResp struct {
	IsFile bool                     `json:"is_file,omitempty"`
	Code   int64                    `json:"code,omitempty"`
	Msg    string                   `json:"msg,omitempty"`
	Data   *GetHelpdeskFAQImageResp `json:"data,omitempty"`
}

func (r *getHelpdeskFAQImageResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &GetHelpdeskFAQImageResp{}
	}
	r.Data.File = file
}

type GetHelpdeskFAQImageResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQList 该接口用于获取服务台知识库详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/list
func (r *HelpdeskService) GetHelpdeskFAQList(ctx context.Context, request *GetHelpdeskFAQListReq, options ...MethodOptionFunc) (*GetHelpdeskFAQListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskFAQList(f func(ctx context.Context, request *GetHelpdeskFAQListReq, options ...MethodOptionFunc) (*GetHelpdeskFAQListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQList = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskFAQList() {
	r.mockHelpdeskGetHelpdeskFAQList = nil
}

type GetHelpdeskFAQListReq struct {
	CategoryID *string `query:"category_id" json:"-"` // 知识库分类ID, 示例值："6856395522433908739"
	Status     *string `query:"status" json:"-"`      // 搜索条件: 知识库状态 1:在线 0:删除，可恢复 2：删除，不可恢复	, 示例值："1"
	Search     *string `query:"search" json:"-"`      // 搜索条件: 关键词，匹配问题标题，问题关键字，用户姓名	, 示例值："点餐"
	PageToken  *string `query:"page_token" json:"-"`  // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6856395634652479491"
	PageSize   *int64  `query:"page_size" json:"-"`   // 分页大小, 示例值：10, 最大值：`100`
}

type getHelpdeskFAQListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskFAQListResp `json:"data,omitempty"`
}

type GetHelpdeskFAQListResp struct {
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                        `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	PageSize  int64                         `json:"page_size,omitempty"`  // 实际返回的FAQ数量
	Total     int64                         `json:"total,omitempty"`      // 总数
	Items     []*GetHelpdeskFAQListRespItem `json:"items,omitempty"`      // 知识库列表
}

type GetHelpdeskFAQListRespItem struct {
	FAQID          string                                `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                                `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                                `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                                `json:"question,omitempty"`        // 问题
	Answer         string                                `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                                `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                                 `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                                 `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory                   `json:"categories,omitempty"`      // 分类
	Tags           []string                              `json:"tags,omitempty"`            // 关联词列表
	ExpireTime     int64                                 `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *GetHelpdeskFAQListRespItemUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *GetHelpdeskFAQListRespItemCreateUser `json:"create_user,omitempty"`     // 创建用户
}

type GetHelpdeskFAQListRespItemUpdateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

type GetHelpdeskFAQListRespItemCreateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchHelpdeskFAQ 该接口用于搜索服务台知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/search
func (r *HelpdeskService) SearchHelpdeskFAQ(ctx context.Context, request *SearchHelpdeskFAQReq, options ...MethodOptionFunc) (*SearchHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSearchHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SearchHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskSearchHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SearchHelpdeskFAQ",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(searchHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskSearchHelpdeskFAQ(f func(ctx context.Context, request *SearchHelpdeskFAQReq, options ...MethodOptionFunc) (*SearchHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskSearchHelpdeskFAQ = f
}

func (r *Mock) UnMockHelpdeskSearchHelpdeskFAQ() {
	r.mockHelpdeskSearchHelpdeskFAQ = nil
}

type SearchHelpdeskFAQReq struct {
	Query     string  `query:"query" json:"-"`      // 搜索query, 示例值："点餐"
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6936004780707807251"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
}

type searchHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *SearchHelpdeskFAQResp `json:"data,omitempty"`
}

type SearchHelpdeskFAQResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*SearchHelpdeskFAQRespItem `json:"items,omitempty"`      // 知识库列表
}

type SearchHelpdeskFAQRespItem struct {
	FAQID          string              `json:"faq_id,omitempty"`          // 知识库ID
	ID             string              `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string              `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string              `json:"question,omitempty"`        // 问题
	Answer         string              `json:"answer,omitempty"`          // 答案
	AnswerRichtext string              `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64               `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64               `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory `json:"categories,omitempty"`      // 分类
	Tags           []string            `json:"tags,omitempty"`            // 关联词列表
	ExpireTime     int64               `json:"expire_time,omitempty"`     // 失效时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskFAQ 该接口用于修改知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/patch
func (r *HelpdeskService) UpdateHelpdeskFAQ(ctx context.Context, request *UpdateHelpdeskFAQReq, options ...MethodOptionFunc) (*UpdateHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskFAQ",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskUpdateHelpdeskFAQ(f func(ctx context.Context, request *UpdateHelpdeskFAQReq, options ...MethodOptionFunc) (*UpdateHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskFAQ = f
}

func (r *Mock) UnMockHelpdeskUpdateHelpdeskFAQ() {
	r.mockHelpdeskUpdateHelpdeskFAQ = nil
}

type UpdateHelpdeskFAQReq struct {
	ID  string                   `path:"id" json:"-"`   // 知识库ID, 示例值："6856395634652479491"
	FAQ *UpdateHelpdeskFAQReqFAQ `json:"faq,omitempty"` // 修改的知识库内容
}

type UpdateHelpdeskFAQReqFAQ struct {
	CategoryID     *string  `json:"category_id,omitempty"`     // 知识库分类ID, 示例值："6836004780707807251"
	Question       string   `json:"question,omitempty"`        // 问题, 示例值："问题"
	Answer         *string  `json:"answer,omitempty"`          // 答案, 示例值："答案"
	AnswerRichtext *string  `json:"answer_richtext,omitempty"` // 富文本答案和答案必须有一个必填。Json Array格式，富文本结构请见[了解更多: 富文本](https://open.feishu.cn/document/ukTMukTMukTM/uITM0YjLyEDN24iMxQjN), 示例值："[{,                        "content": "这只是一个测试，医保问题",,                        "type": "text",                    }]"
	Tags           []string `json:"tags,omitempty"`            // 关联词
}

type updateHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskFAQResp `json:"data,omitempty"`
}

type UpdateHelpdeskFAQResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// StartHelpdeskService 该接口用于创建服务台对话。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/start_service
func (r *HelpdeskService) StartHelpdeskService(ctx context.Context, request *StartHelpdeskServiceReq, options ...MethodOptionFunc) (*StartHelpdeskServiceResp, *Response, error) {
	if r.cli.mock.mockHelpdeskStartHelpdeskService != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#StartHelpdeskService mock enable")
		return r.cli.mock.mockHelpdeskStartHelpdeskService(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "StartHelpdeskService",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/start_service",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(startHelpdeskServiceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskStartHelpdeskService(f func(ctx context.Context, request *StartHelpdeskServiceReq, options ...MethodOptionFunc) (*StartHelpdeskServiceResp, *Response, error)) {
	r.mockHelpdeskStartHelpdeskService = f
}

func (r *Mock) UnMockHelpdeskStartHelpdeskService() {
	r.mockHelpdeskStartHelpdeskService = nil
}

type StartHelpdeskServiceReq struct {
	HumanService    *bool    `json:"human_service,omitempty"`    // 是否直接进入人工(若appointed_agents填写了，该值为必填), 示例值：false
	AppointedAgents []string `json:"appointed_agents,omitempty"` // 客服 open ids (获取方式参考[获取单个用户信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get))，human_service需要为true, 示例值：[ou_7dab8a3d3cdcc9da365777c7ad535d62]
	OpenID          string   `json:"open_id,omitempty"`          // 用户 open id,(获取方式参考[获取单个用户信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get)), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	CustomizedInfo  *string  `json:"customized_info,omitempty"`  // 工单来源自定义信息，长度限制1024字符，如设置，[获取工单详情](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get)会返回此信息, 示例值："test customized info"
}

type startHelpdeskServiceResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *StartHelpdeskServiceResp `json:"data,omitempty"`
}

type StartHelpdeskServiceResp struct {
	ChatID string `json:"chat_id,omitempty"` // 客服群open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AnswerHelpdeskTicketUserQuery 该接口用于回复用户提问结果至工单，需要工单仍处于进行中且未接入人工状态。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/answer_user_query
func (r *HelpdeskService) AnswerHelpdeskTicketUserQuery(ctx context.Context, request *AnswerHelpdeskTicketUserQueryReq, options ...MethodOptionFunc) (*AnswerHelpdeskTicketUserQueryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskAnswerHelpdeskTicketUserQuery != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#AnswerHelpdeskTicketUserQuery mock enable")
		return r.cli.mock.mockHelpdeskAnswerHelpdeskTicketUserQuery(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "AnswerHelpdeskTicketUserQuery",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/answer_user_query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(answerHelpdeskTicketUserQueryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskAnswerHelpdeskTicketUserQuery(f func(ctx context.Context, request *AnswerHelpdeskTicketUserQueryReq, options ...MethodOptionFunc) (*AnswerHelpdeskTicketUserQueryResp, *Response, error)) {
	r.mockHelpdeskAnswerHelpdeskTicketUserQuery = f
}

func (r *Mock) UnMockHelpdeskAnswerHelpdeskTicketUserQuery() {
	r.mockHelpdeskAnswerHelpdeskTicketUserQuery = nil
}

type AnswerHelpdeskTicketUserQueryReq struct {
	TicketID string                                 `path:"ticket_id" json:"-"` // 工单ID, 示例值："6945345902185807891"
	EventID  string                                 `json:"event_id,omitempty"` // 事件ID,可从订阅事件中提取, 示例值："abcd"
	Faqs     []*AnswerHelpdeskTicketUserQueryReqFAQ `json:"faqs,omitempty"`     // faq结果列表
}

type AnswerHelpdeskTicketUserQueryReqFAQ struct {
	ID    *string  `json:"id,omitempty"`    // faq服务台内唯一标识, 示例值："12345"
	Score *float64 `json:"score,omitempty"` // faq匹配得分, 示例值：0.9
}

type answerHelpdeskTicketUserQueryResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *AnswerHelpdeskTicketUserQueryResp `json:"data,omitempty"`
}

type AnswerHelpdeskTicketUserQueryResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskTicketCustomizedField
//
// 该接口用于创建自定义字段
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/create-ticket-customized-field
func (r *HelpdeskService) CreateHelpdeskTicketCustomizedField(ctx context.Context, request *CreateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*CreateHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskTicketCustomizedField",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskCreateHelpdeskTicketCustomizedField(f func(ctx context.Context, request *CreateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*CreateHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskTicketCustomizedField = f
}

func (r *Mock) UnMockHelpdeskCreateHelpdeskTicketCustomizedField() {
	r.mockHelpdeskCreateHelpdeskTicketCustomizedField = nil
}

type CreateHelpdeskTicketCustomizedFieldReq struct {
	HelpdeskID            string                  `json:"helpdesk_id,omitempty"`             // 服务台ID, 示例值："1542164574896126"
	KeyName               string                  `json:"key_name,omitempty"`                // 键名, 示例值："test dropdown"
	DisplayName           string                  `json:"display_name,omitempty"`            // 名称, 示例值："test dropdown"
	Position              string                  `json:"position,omitempty"`                // 字段在列表后台管理列表中的位置, 示例值："3"
	FieldType             string                  `json:"field_type,omitempty"`              // 类型,string - 单行文本,multiline - 多行文本,dropdown - 下拉列表,dropdown_nested - 级联下拉,      , 示例值："dropdown"
	Description           string                  `json:"description,omitempty"`             // 描述, 示例值："下拉示例"
	Visible               bool                    `json:"visible,omitempty"`                 // 是否可见, 示例值：true
	Editable              bool                    `json:"editable,omitempty"`                // 是否可以修改, 示例值：true
	Required              bool                    `json:"required,omitempty"`                // 是否必填, 示例值：false
	DropdownOptions       *HelpdeskDropdownOption `json:"dropdown_options,omitempty"`        // 下拉列表选项
	DropdownAllowMultiple *bool                   `json:"dropdown_allow_multiple,omitempty"` // 是否支持多选，仅在字段类型是dropdown的时候有效, 示例值：true
}

type createHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

type CreateHelpdeskTicketCustomizedFieldResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskTicketCustomizedField 该接口用于删除工单自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/delete
func (r *HelpdeskService) DeleteHelpdeskTicketCustomizedField(ctx context.Context, request *DeleteHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*DeleteHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskTicketCustomizedField",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskDeleteHelpdeskTicketCustomizedField(f func(ctx context.Context, request *DeleteHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*DeleteHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskTicketCustomizedField = f
}

func (r *Mock) UnMockHelpdeskDeleteHelpdeskTicketCustomizedField() {
	r.mockHelpdeskDeleteHelpdeskTicketCustomizedField = nil
}

type DeleteHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
}

type deleteHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

type DeleteHelpdeskTicketCustomizedFieldResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketCustomizedField
//
// 该接口用于获取工单自定义字段详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/get-ticket-customized-field
func (r *HelpdeskService) GetHelpdeskTicketCustomizedField(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketCustomizedField",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskTicketCustomizedField(f func(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketCustomizedField = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskTicketCustomizedField() {
	r.mockHelpdeskGetHelpdeskTicketCustomizedField = nil
}

type GetHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
}

type getHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

type GetHelpdeskTicketCustomizedFieldResp struct {
	TicketCustomizedFieldID string                                         `json:"ticket_customized_field_id,omitempty"` // 工单自定义字段ID
	HelpdeskID              string                                         `json:"helpdesk_id,omitempty"`                // 服务台ID
	KeyName                 string                                         `json:"key_name,omitempty"`                   // 键名
	DisplayName             string                                         `json:"display_name,omitempty"`               // 名称
	Position                string                                         `json:"position,omitempty"`                   // 字段在列表后台管理列表中的位置
	FieldType               string                                         `json:"field_type,omitempty"`                 // 类型
	Description             string                                         `json:"description,omitempty"`                // 描述
	Visible                 bool                                           `json:"visible,omitempty"`                    // 是否可见
	Editable                bool                                           `json:"editable,omitempty"`                   // 是否可以修改
	Required                bool                                           `json:"required,omitempty"`                   // 是否必填
	CreatedAt               string                                         `json:"created_at,omitempty"`                 // 创建时间
	UpdatedAt               string                                         `json:"updated_at,omitempty"`                 // 更新时间
	CreatedBy               *GetHelpdeskTicketCustomizedFieldRespCreatedBy `json:"created_by,omitempty"`                 // 创建用户
	UpdatedBy               *GetHelpdeskTicketCustomizedFieldRespUpdatedBy `json:"updated_by,omitempty"`                 // 更新用户
	DropdownAllowMultiple   bool                                           `json:"dropdown_allow_multiple,omitempty"`    // 是否支持多选，仅在字段类型是dropdown的时候有效
}

type GetHelpdeskTicketCustomizedFieldRespCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

type GetHelpdeskTicketCustomizedFieldRespUpdatedBy struct {
	ID              string                  `json:"id,omitempty"`               // 用户ID
	AvatarURL       string                  `json:"avatar_url,omitempty"`       // 用户头像url
	Name            string                  `json:"name,omitempty"`             // 用户名
	Email           string                  `json:"email,omitempty"`            // 用户邮箱
	DropdownOptions *HelpdeskDropdownOption `json:"dropdown_options,omitempty"` // 下拉列表选项
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketCustomizedFieldList
//
// 该接口用于获取全部工单自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list-ticket-customized-fields
func (r *HelpdeskService) GetHelpdeskTicketCustomizedFieldList(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedFieldList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketCustomizedFieldList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedFieldList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketCustomizedFieldList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketCustomizedFieldListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskTicketCustomizedFieldList(f func(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketCustomizedFieldList = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskTicketCustomizedFieldList() {
	r.mockHelpdeskGetHelpdeskTicketCustomizedFieldList = nil
}

type GetHelpdeskTicketCustomizedFieldListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6948728206392295444"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10；默认为20, 最大值：`100`
	Visible   *bool   `json:"visible,omitempty"`    // 是否可见, 示例值：true
}

type getHelpdeskTicketCustomizedFieldListResp struct {
	Code int64                                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                    `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketCustomizedFieldListResp `json:"data,omitempty"`
}

type GetHelpdeskTicketCustomizedFieldListResp struct {
	HasMore       bool                                            `json:"has_more,omitempty"`        // 是否还有更多项
	NextPageToken string                                          `json:"next_page_token,omitempty"` // 下一分页标识
	Items         []*GetHelpdeskTicketCustomizedFieldListRespItem `json:"items,omitempty"`           // 工单自定义字段列表
}

type GetHelpdeskTicketCustomizedFieldListRespItem struct {
	TicketCustomizedFieldID string                                                 `json:"ticket_customized_field_id,omitempty"` // 工单自定义字段ID
	HelpdeskID              string                                                 `json:"helpdesk_id,omitempty"`                // 服务台ID
	KeyName                 string                                                 `json:"key_name,omitempty"`                   // 键名
	DisplayName             string                                                 `json:"display_name,omitempty"`               // 名称
	Position                string                                                 `json:"position,omitempty"`                   // 字段在列表后台管理列表中的位置
	FieldType               string                                                 `json:"field_type,omitempty"`                 // 类型
	Description             string                                                 `json:"description,omitempty"`                // 描述
	Visible                 bool                                                   `json:"visible,omitempty"`                    // 是否可见
	Editable                bool                                                   `json:"editable,omitempty"`                   // 是否可以修改
	Required                bool                                                   `json:"required,omitempty"`                   // 是否必填
	CreatedAt               string                                                 `json:"created_at,omitempty"`                 // 创建时间
	UpdatedAt               string                                                 `json:"updated_at,omitempty"`                 // 更新时间
	CreatedBy               *GetHelpdeskTicketCustomizedFieldListRespItemCreatedBy `json:"created_by,omitempty"`                 // 创建用户
	UpdatedBy               *GetHelpdeskTicketCustomizedFieldListRespItemUpdatedBy `json:"updated_by,omitempty"`                 // 更新用户
	DropdownOptions         *HelpdeskDropdownOption                                `json:"dropdown_options,omitempty"`           // 下拉列表选项
	DropdownAllowMultiple   bool                                                   `json:"dropdown_allow_multiple,omitempty"`    // 是否支持多选，仅在字段类型是dropdown的时候有效
}

type GetHelpdeskTicketCustomizedFieldListRespItemCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

type GetHelpdeskTicketCustomizedFieldListRespItemUpdatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskTicketCustomizedField
//
// 该接口用于更新自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/update-ticket-customized-field
func (r *HelpdeskService) UpdateHelpdeskTicketCustomizedField(ctx context.Context, request *UpdateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskTicketCustomizedField",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskUpdateHelpdeskTicketCustomizedField(f func(ctx context.Context, request *UpdateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskTicketCustomizedField = f
}

func (r *Mock) UnMockHelpdeskUpdateHelpdeskTicketCustomizedField() {
	r.mockHelpdeskUpdateHelpdeskTicketCustomizedField = nil
}

type UpdateHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string                  `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
	DisplayName             *string                 `json:"display_name,omitempty"`              // 名称, 示例值："test dropdown"
	Position                *string                 `json:"position,omitempty"`                  // 字段在列表后台管理列表中的位置, 示例值："3"
	Description             *string                 `json:"description,omitempty"`               // 描述, 示例值："下拉示例"
	Visible                 *bool                   `json:"visible,omitempty"`                   // 是否可见, 示例值：true
	Required                *bool                   `json:"required,omitempty"`                  // 是否必填, 示例值：false
	DropdownOptions         *HelpdeskDropdownOption `json:"dropdown_options,omitempty"`          // 下拉列表选项
}

type updateHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

type UpdateHelpdeskTicketCustomizedFieldResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicket 该接口用于获取单个服务台工单详情。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get
func (r *HelpdeskService) GetHelpdeskTicket(ctx context.Context, request *GetHelpdeskTicketReq, options ...MethodOptionFunc) (*GetHelpdeskTicketResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicket mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicket",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskTicket(f func(ctx context.Context, request *GetHelpdeskTicketReq, options ...MethodOptionFunc) (*GetHelpdeskTicketResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicket = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskTicket() {
	r.mockHelpdeskGetHelpdeskTicket = nil
}

type GetHelpdeskTicketReq struct {
	TicketID string `path:"ticket_id" json:"-"` // ticket id, 示例值："123456"
}

type getHelpdeskTicketResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketResp `json:"data,omitempty"`
}

type GetHelpdeskTicketResp struct {
	Ticket *GetHelpdeskTicketRespTicket `json:"ticket,omitempty"` // 工单详情
}

type GetHelpdeskTicketRespTicket struct {
	TicketID                   string                                        `json:"ticket_id,omitempty"`                     // 工单ID,[可以从工单列表里面取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list),[也可以订阅工单创建事件获取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/events/created)
	HelpdeskID                 string                                        `json:"helpdesk_id,omitempty"`                   // 服务台ID
	Guest                      *GetHelpdeskTicketRespTicketGuest             `json:"guest,omitempty"`                         // 工单创建用户
	TicketType                 int64                                         `json:"ticket_type,omitempty"`                   // 工单阶段：1. 机器人 2. 人工
	Status                     int64                                         `json:"status,omitempty"`                        // 工单状态，1：已创建 2: 处理中 3: 排队中 4：待定 5：待用户响应 50: 被机器人关闭 51: 被人工关闭
	Score                      int64                                         `json:"score,omitempty"`                         // 工单评分，1：不满意，2:一般，3:满意
	CreatedAt                  int64                                         `json:"created_at,omitempty"`                    // 工单创建时间
	UpdatedAt                  int64                                         `json:"updated_at,omitempty"`                    // 工单更新时间，没有值时为-1
	ClosedAt                   int64                                         `json:"closed_at,omitempty"`                     // 工单结束时间
	Agents                     []*GetHelpdeskTicketRespTicketAgent           `json:"agents,omitempty"`                        // 工单客服
	Channel                    int64                                         `json:"channel,omitempty"`                       // 工单渠道
	Solve                      int64                                         `json:"solve,omitempty"`                         // 工单是否解决 1:没解决 2:已解决
	ClosedBy                   *GetHelpdeskTicketRespTicketClosedBy          `json:"closed_by,omitempty"`                     // 关单用户ID
	Collaborators              []*GetHelpdeskTicketRespTicketCollaborator    `json:"collaborators,omitempty"`                 // 工单协作者
	CustomizedFields           []*GetHelpdeskTicketRespTicketCustomizedField `json:"customized_fields,omitempty"`             // 自定义字段列表，没有值时不设置
	AgentServiceDuration       float64                                       `json:"agent_service_duration,omitempty"`        // 客服服务时长minutes
	AgentFirstResponseDuration int64                                         `json:"agent_first_response_duration,omitempty"` // 客服第一反应时间 seconds
	BotServiceDuration         int64                                         `json:"bot_service_duration,omitempty"`          // 机器人服务时长 seconds
	AgentResolutionTime        int64                                         `json:"agent_resolution_time,omitempty"`         // 解决时长(秒)
	ActualProcessingTime       int64                                         `json:"actual_processing_time,omitempty"`        // 处理时长(秒)
}

type GetHelpdeskTicketRespTicketGuest struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
}

type GetHelpdeskTicketRespTicketAgent struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
}

type GetHelpdeskTicketRespTicketClosedBy struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
}

type GetHelpdeskTicketRespTicketCollaborator struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
}

type GetHelpdeskTicketRespTicketCustomizedField struct {
	ID          string `json:"id,omitempty"`           // 自定义字段ID
	Value       string `json:"value,omitempty"`        // 自定义字段值
	KeyName     string `json:"key_name,omitempty"`     // 键名
	DisplayName string `json:"display_name,omitempty"` // 展示名称
	Position    int64  `json:"position,omitempty"`     // 展示位置
	Required    bool   `json:"required,omitempty"`     // 是否必填
	Editable    bool   `json:"editable,omitempty"`     // 是否可修改
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketList 该接口用于获取全部工单详情。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list
func (r *HelpdeskService) GetHelpdeskTicketList(ctx context.Context, request *GetHelpdeskTicketListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskTicketList(f func(ctx context.Context, request *GetHelpdeskTicketListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketList = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskTicketList() {
	r.mockHelpdeskGetHelpdeskTicketList = nil
}

type GetHelpdeskTicketListReq struct {
	TicketID        *string  `query:"ticket_id" json:"-"`         // 搜索条件：工单ID, 示例值："123456"
	AgentID         *string  `query:"agent_id" json:"-"`          // 搜索条件: 客服id, 示例值："ou_b5de90429xxx"
	ClosedByID      *string  `query:"closed_by_id" json:"-"`      // 搜索条件: 关单客服id, 示例值："ou_b5de90429xxx"
	Type            *int64   `query:"type" json:"-"`              // 搜索条件: 工单类型 1:bot 2:人工, 示例值：1
	Channel         *int64   `query:"channel" json:"-"`           // 搜索条件: 工单渠道, 示例值：0
	Solved          *int64   `query:"solved" json:"-"`            // 搜索条件: 工单是否解决 1:没解决 2:已解决, 示例值：1
	Score           *int64   `query:"score" json:"-"`             // 搜索条件: 工单评分, 示例值：1
	StatusList      []int64  `query:"status_list" json:"-"`       // 搜索条件: 工单状态列表, 示例值：1
	GuestName       *string  `query:"guest_name" json:"-"`        // 搜索条件: 用户名称, 示例值："abc"
	GuestID         *string  `query:"guest_id" json:"-"`          // 搜索条件: 用户id, 示例值："ou_b5de90429xxx"
	Tags            []string `query:"tags" json:"-"`              // 搜索条件: 用户标签列表, 示例值：备注
	Page            *int64   `query:"page" json:"-"`              // 页数, 从1开始, 默认为1, 示例值：1
	PageSize        *int64   `query:"page_size" json:"-"`         // 当前页大小，最大为200, 默认为20。分页查询最多累计返回一万条数据，超过一万条请更改查询条件，推荐通过时间查询。, 示例值：20
	CreateTimeStart *int64   `query:"create_time_start" json:"-"` // 搜索条件: 工单创建起始时间 ms (也需要填上create_time_end)，相当于>=create_time_start, 示例值：1616920429000
	CreateTimeEnd   *int64   `query:"create_time_end" json:"-"`   // 搜索条件: 工单创建结束时间 ms (也需要填上create_time_start)，相当于<=create_time_end, 示例值：1616920429000
	UpdateTimeStart *int64   `query:"update_time_start" json:"-"` // 搜索条件: 工单修改起始时间 ms (也需要填上update_time_end), 示例值：1616920429000
	UpdateTimeEnd   *int64   `query:"update_time_end" json:"-"`   // 搜索条件: 工单修改结束时间 ms(也需要填上update_time_start), 示例值：1616920429000
}

type getHelpdeskTicketListResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketListResp `json:"data,omitempty"`
}

type GetHelpdeskTicketListResp struct {
	Total   int64                              `json:"total,omitempty"`   // 工单总数 (单次请求最大为10000条)
	Tickets []*GetHelpdeskTicketListRespTicket `json:"tickets,omitempty"` // 工单
}

type GetHelpdeskTicketListRespTicket struct {
	TicketID                   string                                            `json:"ticket_id,omitempty"`                     // 工单ID,[可以从工单列表里面取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list),[也可以订阅工单创建事件获取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/events/created)
	HelpdeskID                 string                                            `json:"helpdesk_id,omitempty"`                   // 服务台ID
	Guest                      *GetHelpdeskTicketListRespTicketGuest             `json:"guest,omitempty"`                         // 工单创建用户
	TicketType                 int64                                             `json:"ticket_type,omitempty"`                   // 工单阶段：1. 机器人 2. 人工
	Status                     int64                                             `json:"status,omitempty"`                        // 工单状态，1：已创建 2: 处理中 3: 排队中 4：待定 5：待用户响应 50: 被机器人关闭 51: 被人工关闭
	Score                      int64                                             `json:"score,omitempty"`                         // 工单评分，1：不满意，2:一般，3:满意
	CreatedAt                  int64                                             `json:"created_at,omitempty"`                    // 工单创建时间
	UpdatedAt                  int64                                             `json:"updated_at,omitempty"`                    // 工单更新时间，没有值时为-1
	ClosedAt                   int64                                             `json:"closed_at,omitempty"`                     // 工单结束时间
	Agents                     []*GetHelpdeskTicketListRespTicketAgent           `json:"agents,omitempty"`                        // 工单客服
	Channel                    int64                                             `json:"channel,omitempty"`                       // 工单渠道
	Solve                      int64                                             `json:"solve,omitempty"`                         // 工单是否解决 1:没解决 2:已解决
	ClosedBy                   *GetHelpdeskTicketListRespTicketClosedBy          `json:"closed_by,omitempty"`                     // 关单用户ID
	Collaborators              []*GetHelpdeskTicketListRespTicketCollaborator    `json:"collaborators,omitempty"`                 // 工单协作者
	CustomizedFields           []*GetHelpdeskTicketListRespTicketCustomizedField `json:"customized_fields,omitempty"`             // 自定义字段列表，没有值时不设置
	AgentServiceDuration       float64                                           `json:"agent_service_duration,omitempty"`        // 客服服务时长minutes
	AgentFirstResponseDuration int64                                             `json:"agent_first_response_duration,omitempty"` // 客服第一反应时间 seconds
	BotServiceDuration         int64                                             `json:"bot_service_duration,omitempty"`          // 机器人服务时长 seconds
	AgentResolutionTime        int64                                             `json:"agent_resolution_time,omitempty"`         // 解决时长(秒)
	ActualProcessingTime       int64                                             `json:"actual_processing_time,omitempty"`        // 处理时长(秒)
}

type GetHelpdeskTicketListRespTicketGuest struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
}

type GetHelpdeskTicketListRespTicketAgent struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
}

type GetHelpdeskTicketListRespTicketClosedBy struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
}

type GetHelpdeskTicketListRespTicketCollaborator struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
}

type GetHelpdeskTicketListRespTicketCustomizedField struct {
	ID          string `json:"id,omitempty"`           // 自定义字段ID
	Value       string `json:"value,omitempty"`        // 自定义字段值
	KeyName     string `json:"key_name,omitempty"`     // 键名
	DisplayName string `json:"display_name,omitempty"` // 展示名称
	Position    int64  `json:"position,omitempty"`     // 展示位置
	Required    bool   `json:"required,omitempty"`     // 是否必填
	Editable    bool   `json:"editable,omitempty"`     // 是否可修改
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadHelpdeskTicketImage 该接口用于获取服务台工单消息图象。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/ticket_image
func (r *HelpdeskService) DownloadHelpdeskTicketImage(ctx context.Context, request *DownloadHelpdeskTicketImageReq, options ...MethodOptionFunc) (*DownloadHelpdeskTicketImageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDownloadHelpdeskTicketImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DownloadHelpdeskTicketImage mock enable")
		return r.cli.mock.mockHelpdeskDownloadHelpdeskTicketImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "DownloadHelpdeskTicketImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_images",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(downloadHelpdeskTicketImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskDownloadHelpdeskTicketImage(f func(ctx context.Context, request *DownloadHelpdeskTicketImageReq, options ...MethodOptionFunc) (*DownloadHelpdeskTicketImageResp, *Response, error)) {
	r.mockHelpdeskDownloadHelpdeskTicketImage = f
}

func (r *Mock) UnMockHelpdeskDownloadHelpdeskTicketImage() {
	r.mockHelpdeskDownloadHelpdeskTicketImage = nil
}

type DownloadHelpdeskTicketImageReq struct {
	TicketID string `query:"ticket_id" json:"-"` // 工单ID, 示例值："12345"
	MsgID    string `query:"msg_id" json:"-"`    // 消息ID, 示例值："12345"
	Index    *int64 `query:"index" json:"-"`     // index，当消息类型为post时，需指定图片index，index从0开始。当消息类型为img时，无需index, 示例值：0
}

type downloadHelpdeskTicketImageResp struct {
	IsFile bool                             `json:"is_file,omitempty"`
	Code   int64                            `json:"code,omitempty"`
	Msg    string                           `json:"msg,omitempty"`
	Data   *DownloadHelpdeskTicketImageResp `json:"data,omitempty"`
}

func (r *downloadHelpdeskTicketImageResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadHelpdeskTicketImageResp{}
	}
	r.Data.File = file
}

type DownloadHelpdeskTicketImageResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketMessageList 该接口用于获取服务台工单消息详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list
func (r *HelpdeskService) GetHelpdeskTicketMessageList(ctx context.Context, request *GetHelpdeskTicketMessageListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketMessageListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketMessageList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketMessageList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketMessageList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketMessageList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketMessageListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskGetHelpdeskTicketMessageList(f func(ctx context.Context, request *GetHelpdeskTicketMessageListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketMessageListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketMessageList = f
}

func (r *Mock) UnMockHelpdeskGetHelpdeskTicketMessageList() {
	r.mockHelpdeskGetHelpdeskTicketMessageList = nil
}

type GetHelpdeskTicketMessageListReq struct {
	TimeStart *int64 `query:"time_start" json:"-"` // 起始时间, 示例值：1617960686000
	TimeEnd   *int64 `query:"time_end" json:"-"`   // 结束时间, 示例值：1617960687000
	Page      *int64 `query:"page" json:"-"`       // 页数ID, 示例值：1
	PageSize  *int64 `query:"page_size" json:"-"`  // 消息数量，最大200，默认20, 示例值：10
	TicketID  string `path:"ticket_id" json:"-"`   // 工单ID, 示例值："6948728206392295444"
}

type getHelpdeskTicketMessageListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketMessageListResp `json:"data,omitempty"`
}

type GetHelpdeskTicketMessageListResp struct {
	Messages []*GetHelpdeskTicketMessageListRespMessage `json:"messages,omitempty"` // 工单消息列表
	Total    int64                                      `json:"total,omitempty"`    // 消息总数
}

type GetHelpdeskTicketMessageListRespMessage struct {
	ID          string  `json:"id,omitempty"`           // 工单消息ID
	MessageID   string  `json:"message_id,omitempty"`   // chat消息ID
	MessageType MsgType `json:"message_type,omitempty"` // 消息类型；text：纯文本；post：富文本
	CreatedAt   int64   `json:"created_at,omitempty"`   // 创建时间
	Content     string  `json:"content,omitempty"`      // 内容
	UserName    string  `json:"user_name,omitempty"`    // 用户名
	AvatarURL   string  `json:"avatar_url,omitempty"`   // 用户图片url
	UserID      string  `json:"user_id,omitempty"`      // 用户open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendHelpdeskTicketMessage 该接口用于工单发送消息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/create
func (r *HelpdeskService) SendHelpdeskTicketMessage(ctx context.Context, request *SendHelpdeskTicketMessageReq, options ...MethodOptionFunc) (*SendHelpdeskTicketMessageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSendHelpdeskTicketMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SendHelpdeskTicketMessage mock enable")
		return r.cli.mock.mockHelpdeskSendHelpdeskTicketMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SendHelpdeskTicketMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(sendHelpdeskTicketMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskSendHelpdeskTicketMessage(f func(ctx context.Context, request *SendHelpdeskTicketMessageReq, options ...MethodOptionFunc) (*SendHelpdeskTicketMessageResp, *Response, error)) {
	r.mockHelpdeskSendHelpdeskTicketMessage = f
}

func (r *Mock) UnMockHelpdeskSendHelpdeskTicketMessage() {
	r.mockHelpdeskSendHelpdeskTicketMessage = nil
}

type SendHelpdeskTicketMessageReq struct {
	TicketID string  `path:"ticket_id" json:"-"` // 工单ID, 示例值："6948728206392295444"
	MsgType  MsgType `json:"msg_type,omitempty"` // 消息类型；text：纯文本；post：富文本, 示例值："post"
	Content  string  `json:"content,omitempty"`  // - 纯文本，参考[发送文本消息](https://open.feishu.cn/document/ukTMukTMukTM/uUjNz4SN2MjL1YzM)中的content；, 富文本，参考[发送富文本消息](https://open.feishu.cn/document/ukTMukTMukTM/uMDMxEjLzATMx4yMwETM)中的content, 示例值："{,    "msg_type": "post",,    "content": {,        "post": {,            "zh_cn": {,                "title": "this is title",,                "content": [,                    [,                        {,                            "tag": "text",,                            "un_escape": true,,                            "text": "第一行&nbsp;:",                        },,                        {,                            "tag": "a",,                            "text": "超链接",,                            "href": "http://www.feishu.cn",                        },                    ],,                    [,                        {,                            "tag": "text",,                            "text": "第二行 :",                        },,                        {,                            "tag": "text",,                            "text": "文本测试",                        },                    ],                ],            },        },    },}"
}

type sendHelpdeskTicketMessageResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *SendHelpdeskTicketMessageResp `json:"data,omitempty"`
}

type SendHelpdeskTicketMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // chat消息open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskTicket 该接口用于更新服务台工单详情。只会更新数据，不会触发相关操作。如修改工单状态到关单，不会关闭聊天页面。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/update
func (r *HelpdeskService) UpdateHelpdeskTicket(ctx context.Context, request *UpdateHelpdeskTicketReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskTicket mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskTicket",
		Method:              "PUT",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHelpdeskUpdateHelpdeskTicket(f func(ctx context.Context, request *UpdateHelpdeskTicketReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskTicket = f
}

func (r *Mock) UnMockHelpdeskUpdateHelpdeskTicket() {
	r.mockHelpdeskUpdateHelpdeskTicket = nil
}

type UpdateHelpdeskTicketReq struct {
	TicketID         string                                    `path:"ticket_id" json:"-"`          // 工单ID, 示例值："6945345902185807891"
	Status           *int64                                    `json:"status,omitempty"`            // new status, 1: 已创建, 2: 处理中, 3: 排队中, 5: 待定, 50: 机器人关闭工单, 51: 关闭工单, 示例值：1
	TagNames         []string                                  `json:"tag_names,omitempty"`         // 新标签名
	Comment          *string                                   `json:"comment,omitempty"`           // 新评论, 示例值："good"
	CustomizedFields []*UpdateHelpdeskTicketReqCustomizedField `json:"customized_fields,omitempty"` // 自定义字段
	TicketType       *int64                                    `json:"ticket_type,omitempty"`       // ticket stage, 示例值：1
	Solved           *int64                                    `json:"solved,omitempty"`            // 工单是否解决，1: 未解决, 2: 已解决, 示例值：1
	Channel          *int64                                    `json:"channel,omitempty"`           // 工单来源渠道ID, 示例值：1
}

type UpdateHelpdeskTicketReqCustomizedField struct {
	ID      *string `json:"id,omitempty"`       // 自定义字段ID, 示例值："123"
	Value   *string `json:"value,omitempty"`    // 自定义字段值, 示例值："value"
	KeyName *string `json:"key_name,omitempty"` // 键名, 示例值："key"
}

type updateHelpdeskTicketResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskTicketResp `json:"data,omitempty"`
}

type UpdateHelpdeskTicketResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHireApplication 根据人才 ID 和职位 ID 创建投递
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/create
func (r *HireService) CreateHireApplication(ctx context.Context, request *CreateHireApplicationReq, options ...MethodOptionFunc) (*CreateHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireCreateHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#CreateHireApplication mock enable")
		return r.cli.mock.mockHireCreateHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "CreateHireApplication",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockHireCreateHireApplication(f func(ctx context.Context, request *CreateHireApplicationReq, options ...MethodOptionFunc) (*CreateHireApplicationResp, *Response, error)) {
	r.mockHireCreateHireApplication = f
}

func (r *Mock) UnMockHireCreateHireApplication() {
	r.mockHireCreateHireApplication = nil
}

type CreateHireApplicationReq struct {
	TalentID string `json:"talent_id,omitempty"` // 人才ID, 示例值："12312312312"
	JobID    string `json:"job_id,omitempty"`    // 职位ID, 示例值："12312312312"
}

type createHireApplicationResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateHireApplicationResp `json:"data,omitempty"`
}

type CreateHireApplicationResp struct {
	ID string `json:"id,omitempty"` // 投递ID
}
