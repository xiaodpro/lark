// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteTaskV1 该接口用于删除任务。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/delete
// new doc: https://open.feishu.cn/document/server-docs/task-v1/task/delete
//
// Deprecated
func (r *TaskV1Service) DeleteTaskV1(ctx context.Context, request *DeleteTaskV1Req, options ...MethodOptionFunc) (*DeleteTaskV1Resp, *Response, error) {
	if r.cli.mock.mockTaskV1DeleteTaskV1 != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] TaskV1#DeleteTaskV1 mock enable")
		return r.cli.mock.mockTaskV1DeleteTaskV1(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "TaskV1",
		API:                   "DeleteTaskV1",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteTaskV1Resp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskV1DeleteTaskV1 mock TaskV1DeleteTaskV1 method
func (r *Mock) MockTaskV1DeleteTaskV1(f func(ctx context.Context, request *DeleteTaskV1Req, options ...MethodOptionFunc) (*DeleteTaskV1Resp, *Response, error)) {
	r.mockTaskV1DeleteTaskV1 = f
}

// UnMockTaskV1DeleteTaskV1 un-mock TaskV1DeleteTaskV1 method
func (r *Mock) UnMockTaskV1DeleteTaskV1() {
	r.mockTaskV1DeleteTaskV1 = nil
}

// DeleteTaskV1Req ...
type DeleteTaskV1Req struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值: "83912691-2e43-47fc-94a4-d512e03984fa"
}

// DeleteTaskV1Resp ...
type DeleteTaskV1Resp struct {
}

// deleteTaskV1Resp ...
type deleteTaskV1Resp struct {
	Code  int64             `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string            `json:"msg,omitempty"`  // 错误描述
	Data  *DeleteTaskV1Resp `json:"data,omitempty"`
	Error *ErrorDetail      `json:"error,omitempty"`
}
