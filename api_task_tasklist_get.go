// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetTaskTasklist 获取一个清单的详细信息, 包括清单名, 所有者, 清单成员等。
//
// 需要清单的读取权限。详情见[清单功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/overview)中的“清单是如何鉴权的？“章节。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/tasklist/get
func (r *TaskService) GetTaskTasklist(ctx context.Context, request *GetTaskTasklistReq, options ...MethodOptionFunc) (*GetTaskTasklistResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskTasklist != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#GetTaskTasklist mock enable")
		return r.cli.mock.mockTaskGetTaskTasklist(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskTasklist",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/tasklists/:tasklist_guid",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskTasklistResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskTasklist mock TaskGetTaskTasklist method
func (r *Mock) MockTaskGetTaskTasklist(f func(ctx context.Context, request *GetTaskTasklistReq, options ...MethodOptionFunc) (*GetTaskTasklistResp, *Response, error)) {
	r.mockTaskGetTaskTasklist = f
}

// UnMockTaskGetTaskTasklist un-mock TaskGetTaskTasklist method
func (r *Mock) UnMockTaskGetTaskTasklist() {
	r.mockTaskGetTaskTasklist = nil
}

// GetTaskTasklistReq ...
type GetTaskTasklistReq struct {
	TasklistGuid string  `path:"tasklist_guid" json:"-"` // 清单全局唯一GUID, 示例值: "d300a75f-c56a-4be9-80d1-e47653028ceb"
	UserIDType   *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 默认值: `open_id`
}

// GetTaskTasklistResp ...
type GetTaskTasklistResp struct {
	Tasklist *GetTaskTasklistRespTasklist `json:"tasklist,omitempty"` // 清单详情
}

// GetTaskTasklistRespTasklist ...
type GetTaskTasklistRespTasklist struct {
	Guid      string                               `json:"guid,omitempty"`       // 清单的全局唯一ID
	Name      string                               `json:"name,omitempty"`       // 清单名
	Creator   *GetTaskTasklistRespTasklistCreator  `json:"creator,omitempty"`    // 清单创建者
	Owner     *GetTaskTasklistRespTasklistOwner    `json:"owner,omitempty"`      // 清单所有者
	Members   []*GetTaskTasklistRespTasklistMember `json:"members,omitempty"`    // 清单协作成员
	URL       string                               `json:"url,omitempty"`        // 该清单分享的applink
	CreatedAt string                               `json:"created_at,omitempty"` // 清单创建时间戳(ms)
	UpdatedAt string                               `json:"updated_at,omitempty"` // 清单最后一次更新时间戳（ms)
}

// GetTaskTasklistRespTasklistCreator ...
type GetTaskTasklistRespTasklistCreator struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 清单角色
}

// GetTaskTasklistRespTasklistMember ...
type GetTaskTasklistRespTasklistMember struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// GetTaskTasklistRespTasklistOwner ...
type GetTaskTasklistRespTasklistOwner struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// getTaskTasklistResp ...
type getTaskTasklistResp struct {
	Code  int64                `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string               `json:"msg,omitempty"`  // 错误描述
	Data  *GetTaskTasklistResp `json:"data,omitempty"`
	Error *ErrorDetail         `json:"error,omitempty"`
}
