// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// AddAssigneeAPaaSApprovalTask 对于人工任务进行加签操作
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/apaas-v1/approval_task/add_assignee
func (r *APaaSService) AddAssigneeAPaaSApprovalTask(ctx context.Context, request *AddAssigneeAPaaSApprovalTaskReq, options ...MethodOptionFunc) (*AddAssigneeAPaaSApprovalTaskResp, *Response, error) {
	if r.cli.mock.mockAPaaSAddAssigneeAPaaSApprovalTask != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] APaaS#AddAssigneeAPaaSApprovalTask mock enable")
		return r.cli.mock.mockAPaaSAddAssigneeAPaaSApprovalTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "APaaS",
		API:                   "AddAssigneeAPaaSApprovalTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/apaas/v1/approval_tasks/:approval_task_id/add_assignee",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(addAssigneeAPaaSApprovalTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAPaaSAddAssigneeAPaaSApprovalTask mock APaaSAddAssigneeAPaaSApprovalTask method
func (r *Mock) MockAPaaSAddAssigneeAPaaSApprovalTask(f func(ctx context.Context, request *AddAssigneeAPaaSApprovalTaskReq, options ...MethodOptionFunc) (*AddAssigneeAPaaSApprovalTaskResp, *Response, error)) {
	r.mockAPaaSAddAssigneeAPaaSApprovalTask = f
}

// UnMockAPaaSAddAssigneeAPaaSApprovalTask un-mock APaaSAddAssigneeAPaaSApprovalTask method
func (r *Mock) UnMockAPaaSAddAssigneeAPaaSApprovalTask() {
	r.mockAPaaSAddAssigneeAPaaSApprovalTask = nil
}

// AddAssigneeAPaaSApprovalTaskReq ...
type AddAssigneeAPaaSApprovalTaskReq struct {
	ApprovalTaskID  string   `path:"approval_task_id" json:"-"`   // 人工任务 ID, 示例值: "1785771068261436"
	UserID          string   `json:"user_id,omitempty"`           // 操作人 ID, 示例值: "1783981209205788"
	Approvers       []string `json:"approvers,omitempty"`         // 审批人列表, 示例值: ["1783981209205788"], 长度范围: `0` ～ `20`
	AddAssigneeType *string  `json:"add_assignee_type,omitempty"` // 加签类型: 并加签: currentAndAddAssign, 后加签: afterAndAddAssign, 示例值: "currentAndAddAssign"
	Opinion         *string  `json:"opinion,omitempty"`           // 加签原因, 示例值: "加签"
}

// AddAssigneeAPaaSApprovalTaskResp ...
type AddAssigneeAPaaSApprovalTaskResp struct {
}

// addAssigneeAPaaSApprovalTaskResp ...
type addAssigneeAPaaSApprovalTaskResp struct {
	Code  int64                             `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                            `json:"msg,omitempty"`  // 错误描述
	Data  *AddAssigneeAPaaSApprovalTaskResp `json:"data,omitempty"`
	Error *ErrorDetail                      `json:"error,omitempty"`
}
