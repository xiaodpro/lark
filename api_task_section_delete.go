// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteTaskSection 删除一个自定义分组。删除后该自定义分组中的任务会被移动到被删除自定义分组所属资源的默认自定义分组中。
//
// 不能删除默认的自定义分组。
// 需要自定义分组归属资源的编辑权限。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/section/delete
func (r *TaskService) DeleteTaskSection(ctx context.Context, request *DeleteTaskSectionReq, options ...MethodOptionFunc) (*DeleteTaskSectionResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskSection != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskSection mock enable")
		return r.cli.mock.mockTaskDeleteTaskSection(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskSection",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/sections/:section_guid",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteTaskSectionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskDeleteTaskSection mock TaskDeleteTaskSection method
func (r *Mock) MockTaskDeleteTaskSection(f func(ctx context.Context, request *DeleteTaskSectionReq, options ...MethodOptionFunc) (*DeleteTaskSectionResp, *Response, error)) {
	r.mockTaskDeleteTaskSection = f
}

// UnMockTaskDeleteTaskSection un-mock TaskDeleteTaskSection method
func (r *Mock) UnMockTaskDeleteTaskSection() {
	r.mockTaskDeleteTaskSection = nil
}

// DeleteTaskSectionReq ...
type DeleteTaskSectionReq struct {
	SectionGuid string `path:"section_guid" json:"-"` // 要删除的自定义分组全局唯一ID, 示例值: "9842501a-9f47-4ff5-a622-d319eeecb97f"
}

// DeleteTaskSectionResp ...
type DeleteTaskSectionResp struct {
}

// deleteTaskSectionResp ...
type deleteTaskSectionResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *DeleteTaskSectionResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
