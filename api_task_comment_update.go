// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateTaskComment 更新一条评论。
//
// 更新时, 将`update_fields`字段中填写所有要修改的评论的字段名, 同时在`comment`字段中填写要修改的字段的新值即可。更新接口规范详情见[功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/overview)中的“ 关于资源的更新”章节。
// 目前只支持更新评论的"conent"字段。
// 更新评论需要评论归属任务的读取权限, 并且只能更新自己创建的评论。详情见[任务功能概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/task-v2/task/overview)中的“任务是如何鉴权的？”章节。
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/task-v2/comment/patch
func (r *TaskService) UpdateTaskComment(ctx context.Context, request *UpdateTaskCommentReq, options ...MethodOptionFunc) (*UpdateTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTaskComment != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Task#UpdateTaskComment mock enable")
		return r.cli.mock.mockTaskUpdateTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTaskComment",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v2/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskUpdateTaskComment mock TaskUpdateTaskComment method
func (r *Mock) MockTaskUpdateTaskComment(f func(ctx context.Context, request *UpdateTaskCommentReq, options ...MethodOptionFunc) (*UpdateTaskCommentResp, *Response, error)) {
	r.mockTaskUpdateTaskComment = f
}

// UnMockTaskUpdateTaskComment un-mock TaskUpdateTaskComment method
func (r *Mock) UnMockTaskUpdateTaskComment() {
	r.mockTaskUpdateTaskComment = nil
}

// UpdateTaskCommentReq ...
type UpdateTaskCommentReq struct {
	CommentID    string                       `path:"comment_id" json:"-"`     // 要更新的评论ID, 示例值: "7198104824246747156", 最大长度: `100` 字符
	UserIDType   *IDType                      `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值: open_id, 默认值: `open_id`
	Comment      *UpdateTaskCommentReqComment `json:"comment,omitempty"`       // 要更新的评论数据。
	UpdateFields []string                     `json:"update_fields,omitempty"` // 要更新的字段, 支持, content: 评论内容, 示例值: ["content"]
}

// UpdateTaskCommentReqComment ...
type UpdateTaskCommentReqComment struct {
	Content *string `json:"content,omitempty"` // 要更新的评论内容。如果更新该字段, 不允许设为空, 最大支持3000个utf8字符, 示例值: "举杯邀明月, 对影成三人", 最大长度: `10000` 字符
}

// UpdateTaskCommentResp ...
type UpdateTaskCommentResp struct {
	Comment *UpdateTaskCommentRespComment `json:"comment,omitempty"` // 更新后的评论
}

// UpdateTaskCommentRespComment ...
type UpdateTaskCommentRespComment struct {
	ID               string                               `json:"id,omitempty"`                  // 评论id
	Content          string                               `json:"content,omitempty"`             // 评论内容
	Creator          *UpdateTaskCommentRespCommentCreator `json:"creator,omitempty"`             // 评论创建人
	ReplyToCommentID string                               `json:"reply_to_comment_id,omitempty"` // 被回复评论的id。如果不是回复评论, 则为空。
	CreatedAt        string                               `json:"created_at,omitempty"`          // 评论创建时间戳（ms)
	UpdatedAt        string                               `json:"updated_at,omitempty"`          // 评论更新时间戳（ms）
	ResourceType     string                               `json:"resource_type,omitempty"`       // 任务关联的资源类型
	ResourceID       string                               `json:"resource_id,omitempty"`         // 任务关联的资源ID
}

// UpdateTaskCommentRespCommentCreator ...
type UpdateTaskCommentRespCommentCreator struct {
	ID   string `json:"id,omitempty"`   // 表示member的id
	Type string `json:"type,omitempty"` // 成员的类型
	Role string `json:"role,omitempty"` // 成员角色
}

// updateTaskCommentResp ...
type updateTaskCommentResp struct {
	Code  int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                 `json:"msg,omitempty"`  // 错误描述
	Data  *UpdateTaskCommentResp `json:"data,omitempty"`
	Error *ErrorDetail           `json:"error,omitempty"`
}
