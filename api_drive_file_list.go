// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetDriveFileList 该接口用于获取用户云空间指定文件夹中文件信息清单。文件的信息包括名称、类型、token、创建时间、所有者 ID 等。
//
// 了解如何让应用（tenant_access_token）访问个人云空间中的文件夹, 参考[云空间常见问题](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/faq)。
// 使用限制:
// - 本接口暂不支持返回快捷方式（shortcut）类型的文件。
// - 本接口仅支持获取当前层级的文件信息, 不支持递归获取子文件夹中的文件信息清单。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list
// new doc: https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/list
func (r *DriveService) GetDriveFileList(ctx context.Context, request *GetDriveFileListReq, options ...MethodOptionFunc) (*GetDriveFileListResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFileList != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFileList mock enable")
		return r.cli.mock.mockDriveGetDriveFileList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFileList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFileListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFileList mock DriveGetDriveFileList method
func (r *Mock) MockDriveGetDriveFileList(f func(ctx context.Context, request *GetDriveFileListReq, options ...MethodOptionFunc) (*GetDriveFileListResp, *Response, error)) {
	r.mockDriveGetDriveFileList = f
}

// UnMockDriveGetDriveFileList un-mock DriveGetDriveFileList method
func (r *Mock) UnMockDriveGetDriveFileList() {
	r.mockDriveGetDriveFileList = nil
}

// GetDriveFileListReq ...
type GetDriveFileListReq struct {
	PageSize    *int64  `query:"page_size" json:"-"`    // 指定每页显示的数据项的数量。若获取根目录下的清单, 将返回全部数据, 不支持分页, 示例值: 50, 最大值: `200`
	PageToken   *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: MTY1NTA3MTA1OXw3MTA4NDc2MDc1NzkyOTI0Nabcef
	FolderToken *string `query:"folder_token" json:"-"` // 文件夹的 token。不填写或填空字符串, 将获取用户云空间根目录下的清单, 且不支持分页。了解如何获取文件夹 token, 参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview), 示例值: fldbcO1UuPz8VwnpPx5a9abcef
	OrderBy     *string `query:"order_by" json:"-"`     // 定义清单中文件的排序方式, 示例值: EditedTime, 可选值有: EditedTime: 按编辑时间排序, CreatedTime: 按创建时间排序, 默认值: `EditedTime`
	Direction   *string `query:"direction" json:"-"`    // 定义清单中文件的排序规则, 示例值: DESC, 可选值有: ASC: 按升序排序, DESC: 按降序排序, 默认值: `DESC`
	UserIDType  *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: open_id, 可选值有: open_id: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多: 如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid), union_id: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的, 在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID, 应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多: 如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id), user_id: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内, 一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多: 如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id), 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetDriveFileListResp ...
type GetDriveFileListResp struct {
	Files         []*GetDriveFileListRespFile `json:"files,omitempty"`           // 文件夹中的文件清单列表
	NextPageToken string                      `json:"next_page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回下一次遍历的 page_token, 否则不返回。
	HasMore       bool                        `json:"has_more,omitempty"`        // 是否还有更多项
}

// GetDriveFileListRespFile ...
type GetDriveFileListRespFile struct {
	Token        string                                `json:"token,omitempty"`         // 文件标识
	Name         string                                `json:"name,omitempty"`          // 文件名
	Type         string                                `json:"type,omitempty"`          // 文件类型。可选值有: `doc`: 旧版文档, `sheet`: 表格, `mindnote`: 思维导图, `bitable`: 多维表格, `file`: 文件, `docx`: 新版文档, `folder`: 文件夹, `shortcut`: 快捷方式（暂不支持）
	ParentToken  string                                `json:"parent_token,omitempty"`  // 父文件夹标识
	URL          string                                `json:"url,omitempty"`           // 文件在浏览器中的 URL 链接
	ShortcutInfo *GetDriveFileListRespFileShortcutInfo `json:"shortcut_info,omitempty"` // 快捷方式类型文件的信息（暂不支持）
	CreatedTime  string                                `json:"created_time,omitempty"`  // 文件创建时间, 秒级时间戳
	ModifiedTime string                                `json:"modified_time,omitempty"` // 文件最近修改时间, 秒级时间戳
	OwnerID      string                                `json:"owner_id,omitempty"`      // 文件所有者的 ID。ID 类型由查询参数中的 `user_id_type` 决定
}

// GetDriveFileListRespFileShortcutInfo ...
type GetDriveFileListRespFileShortcutInfo struct {
	TargetType  string `json:"target_type,omitempty"`  // 快捷方式指向的原文件类型, 包括: `doc`: 旧版文档, `sheet`: 表格, `mindnote`: 思维导图, `bitable`: 多维表格, `file`: 文件, `docx`: 新版文档
	TargetToken string `json:"target_token,omitempty"` // 快捷方式指向的原文件 token
}

// getDriveFileListResp ...
type getDriveFileListResp struct {
	Code  int64                 `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                `json:"msg,omitempty"`  // 错误描述
	Data  *GetDriveFileListResp `json:"data,omitempty"`
	Error *ErrorDetail          `json:"error,omitempty"`
}
