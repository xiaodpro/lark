// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// AgreeAPaaSApprovalTask 对于人工任务进行同意操作
//
// doc: https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/apaas-v1/approval_task/agree
func (r *APaaSService) AgreeAPaaSApprovalTask(ctx context.Context, request *AgreeAPaaSApprovalTaskReq, options ...MethodOptionFunc) (*AgreeAPaaSApprovalTaskResp, *Response, error) {
	if r.cli.mock.mockAPaaSAgreeAPaaSApprovalTask != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] APaaS#AgreeAPaaSApprovalTask mock enable")
		return r.cli.mock.mockAPaaSAgreeAPaaSApprovalTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "APaaS",
		API:                   "AgreeAPaaSApprovalTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/apaas/v1/approval_tasks/:approval_task_id/agree",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(agreeAPaaSApprovalTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAPaaSAgreeAPaaSApprovalTask mock APaaSAgreeAPaaSApprovalTask method
func (r *Mock) MockAPaaSAgreeAPaaSApprovalTask(f func(ctx context.Context, request *AgreeAPaaSApprovalTaskReq, options ...MethodOptionFunc) (*AgreeAPaaSApprovalTaskResp, *Response, error)) {
	r.mockAPaaSAgreeAPaaSApprovalTask = f
}

// UnMockAPaaSAgreeAPaaSApprovalTask un-mock APaaSAgreeAPaaSApprovalTask method
func (r *Mock) UnMockAPaaSAgreeAPaaSApprovalTask() {
	r.mockAPaaSAgreeAPaaSApprovalTask = nil
}

// AgreeAPaaSApprovalTaskReq ...
type AgreeAPaaSApprovalTaskReq struct {
	ApprovalTaskID string  `path:"approval_task_id" json:"-"` // 人工任务 ID, 示例值: "1785996265147395"
	UserID         string  `json:"user_id,omitempty"`         // 操作人 ID, 示例值: "1783981209205788"
	Opinion        *string `json:"opinion,omitempty"`         // 审批意见, 示例值: "同意"
}

// AgreeAPaaSApprovalTaskResp ...
type AgreeAPaaSApprovalTaskResp struct {
}

// agreeAPaaSApprovalTaskResp ...
type agreeAPaaSApprovalTaskResp struct {
	Code  int64                       `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                      `json:"msg,omitempty"`  // 错误描述
	Data  *AgreeAPaaSApprovalTaskResp `json:"data,omitempty"`
	Error *ErrorDetail                `json:"error,omitempty"`
}
