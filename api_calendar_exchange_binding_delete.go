// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteCalendarExchangeBinding 调用该接口解除 Exchange 账户和飞书账户的绑定关系, Exchange 账户解除绑定后才能和其他飞书账户继续绑定。
//
// 当前身份需要是企业超级管理员。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/delete
// new doc: https://open.feishu.cn/document/server-docs/calendar-v4/exchange_binding/delete
func (r *CalendarService) DeleteCalendarExchangeBinding(ctx context.Context, request *DeleteCalendarExchangeBindingReq, options ...MethodOptionFunc) (*DeleteCalendarExchangeBindingResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendarExchangeBinding != nil {
		r.cli.Log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendarExchangeBinding mock enable")
		return r.cli.mock.mockCalendarDeleteCalendarExchangeBinding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "DeleteCalendarExchangeBinding",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(deleteCalendarExchangeBindingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarDeleteCalendarExchangeBinding mock CalendarDeleteCalendarExchangeBinding method
func (r *Mock) MockCalendarDeleteCalendarExchangeBinding(f func(ctx context.Context, request *DeleteCalendarExchangeBindingReq, options ...MethodOptionFunc) (*DeleteCalendarExchangeBindingResp, *Response, error)) {
	r.mockCalendarDeleteCalendarExchangeBinding = f
}

// UnMockCalendarDeleteCalendarExchangeBinding un-mock CalendarDeleteCalendarExchangeBinding method
func (r *Mock) UnMockCalendarDeleteCalendarExchangeBinding() {
	r.mockCalendarDeleteCalendarExchangeBinding = nil
}

// DeleteCalendarExchangeBindingReq ...
type DeleteCalendarExchangeBindingReq struct {
	ExchangeBindingID string `path:"exchange_binding_id" json:"-"` // Exchange 绑定的唯一标识 ID。调用 [将 Exchange 账户绑定到飞书账户](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/create) 绑定时, 可从返回结果中获取 exchange_binding_id, 示例值: "ZW1haWxfYWRtaW5fZXhhbXBsZUBvdXRsb29rLmNvbSBlbWFpbF9hY2NvdW50X2V4YW1wbGVAb3V0bG9vay5jb20="
}

// DeleteCalendarExchangeBindingResp ...
type DeleteCalendarExchangeBindingResp struct {
}

// deleteCalendarExchangeBindingResp ...
type deleteCalendarExchangeBindingResp struct {
	Code  int64                              `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg   string                             `json:"msg,omitempty"`  // 错误描述
	Data  *DeleteCalendarExchangeBindingResp `json:"data,omitempty"`
	Error *ErrorDetail                       `json:"error,omitempty"`
}
